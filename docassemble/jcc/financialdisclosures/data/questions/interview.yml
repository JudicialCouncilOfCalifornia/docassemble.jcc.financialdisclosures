---
modules:
	- docassemble.base.util
---
features:
  bootstrap theme: style.css
---
mandatory: True
code: |
	define("Today", today())
---
initial: True
code: |
  import datetime
  import types
  class FalseBoolean(object):
    def primitive_value(self):
      return False
    def is_undefined(self):
      return False
    def __nonzero__(self):
      return False
    def logical_and(self, arg):
      return self
    def logical_or(self, arg):
      if arg.is_undefined():
        return Undefined()
      else:
        return (TrueBoolean() if arg.__nonzero__() else self)
    def logical_not(self):
      return TrueBoolean()
    def logical_equals(self, arg):
      if arg.is_undefined():
        return Undefined()
      else:
        return (self if arg.__nonzero__() else TrueBoolean())
  class TrueBoolean(object):
    def primitive_value(self):
      return True
    def is_undefined(self):
      return False
    def __nonzero__(self):
      return True
    def logical_and(self, arg):
      if arg.is_undefined():
        return Undefined()
      else:
        return (self if arg.__nonzero__() else FalseBoolean())
    def logical_or(self, arg):
      return self
    def logical_not(self):
      return FalseBoolean()
    def logical_equals(self, arg):
      if arg.is_undefined():
        return Undefined()
      else:
        return (self if arg.__nonzero__() else FalseBoolean())
  class Undefined(object):
    def is_undefined(self):
      return True
    def __nonzero__(self):
      return False
    def primitive_value(self):
      return False
    def logical_and(self, arg):
      if arg.is_undefined():
        return self
      else:
        return (self if arg.__nonzero__() else augment(False))
    def logical_or(self, arg):
      if arg.is_undefined():
        return self
      else:
        return (augment(True) if arg.__nonzero__() else self)
    def logical_not(self):
      return self
    def logical_equals(self, arg):
      return self
    def all_true(self):
      return self
    def all_false(self):
      return self
    def any_true(self):
      return self
    def all_false(self):
      return self
    def __add__(self, other):
      return self
    def __mul__(self, other):
      return self
    def __sub__(self, other):
      return self
    def __div__(self, other):
      return self
    def __eq__(self, other):
      return self
    def __lt__(self, other):
      return self
    def __le__(self, other):
      return self
    def __gt__(self, other):
      return self
    def __ge__(self, other):
      return self
    def __ne__(self, other):
      return self
    def __len__(self):
      return self
  class Datetime(datetime.datetime):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return datetime.datetime(self.year, self.month, self.day, self.hour, self.minute, self.second, self.microsecond, self.tzinfo)
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == other.primitive_value())
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < other.primitive_value())
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= other.primitive_value())
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > other.primitive_value())
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= other.primitive_value())
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != other.primitive_value())
  class Time(datetime.time):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return datetime.time(self.hour, self.minute, self.second, self.microsecond, self.tzinfo)
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == other.primitive_value())
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < other.primitive_value())
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= other.primitive_value())
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > other.primitive_value())
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= other.primitive_value())
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != other.primitive_value())
  class Float(float):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return float(self)
    def __add__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() + (other.primitive_value()))
    def __mul__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() * (other.primitive_value()))
    def __sub__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() - (other.primitive_value()))
    def __div__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() / (other.primitive_value()))
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == other.primitive_value())
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < other.primitive_value())
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= other.primitive_value())
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > other.primitive_value())
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= other.primitive_value())
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != other.primitive_value())
  class Integer(int):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return int(self)
    def __add__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() + (other.primitive_value()))
    def __mul__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() * (other.primitive_value()))
    def __sub__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() - (other.primitive_value()))
    def __div__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() / (other.primitive_value()))
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == other.primitive_value())
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < other.primitive_value())
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= other.primitive_value())
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > other.primitive_value())
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= other.primitive_value())
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != other.primitive_value())
  class String(str):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return str(self)
    def __len__(self):
      return Integer(self.primitive_value().__len__())
    def __add__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() + (other.primitive_value()))
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == (other.primitive_value()))
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < (other.primitive_value()))
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= (other.primitive_value()))
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > (other.primitive_value()))
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= (other.primitive_value()))
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != (other.primitive_value()))
  class Dictionary(object):
    def __init__(self, da_dict):
      self.da_dict = da_dict
    def is_undefined(self):
      return False
    def primitive_value(self):
      return self.da_dict
    def all_true(self):
      return augment(self.da_dict.all_true())
    def all_false(self):
      return augment(self.da_dict.all_false())
    def any_true(self):
      return augment(self.da_dict.any_true())
    def any_false(self):
      return augment(self.da_dict.any_false())
    def __str__(self):
      return str(self.da_dict)
  def augment(something):
    string_type = type('a')
    bool_type = type(True)
    integer_type = type(1)
    float_type = type(1.0)
    time_type = type(datetime.time())
    datetime_type = type(datetime.datetime(1, 1, 1))
    my_type = type(something)
    alt_type = something.__class__.__name__
    if(my_type == string_type or alt_type == 'unicode'):
      return String(something)
    elif(my_type == bool_type):
      if(something == True):
        return TrueBoolean()
      else:
        return FalseBoolean()
    elif(my_type == integer_type or alt_type == 'int'):
      return Integer(something)
    elif(my_type == float_type or alt_type == 'float'):
      return Float(something)
    elif(my_type == time_type):
      return Time(something.hour, something.minute, something.second, something.microsecond, something.tzinfo)
    elif(my_type == datetime_type or alt_type == 'DADateTime'):
      return Datetime(something.year, something.month, something.day, something.hour, something.minute, something.second, something.microsecond, something.tzinfo)
    elif(alt_type == 'DADict'):
      return Dictionary(something)
    raise Exception("Couldn't augment because type() is " + str(my_type) + " and alt type is " + alt_type + " and argument was " + str(something))
  def ternary(condition, true_value, false_value):
    if type(condition) == type(Undefined()):
      return Undefined()
    elif condition:
      return true_value
    else:
      return false_value
---
initial: True
code: |
  import re
  from bs4 import BeautifulSoup
  from markdown import markdown

  def markdown_to_plaintext(markdown_string):
    html = markdown(markdown_string)
    html = re.sub(r'<pre>(.*?)</pre>', ' ', html)
    html = re.sub(r'<code>(.*?)</code >', ' ', html)
    soup = BeautifulSoup(html, "html.parser")
    text = ''.join(soup.findAll(text=True))
    return text
---
mandatory: True
code: |
	def ___define_until_idempotent():
		original_dict = all_variables()
		___define_all()
		if all_variables() != original_dict:
			re_run_logic()
	def ___define_all():
		vars = all_variables()
		if ((not ("filer_is_petitioner" in vars)) and (type((((augment(filer_party) if ("filer_party" in vars) else Undefined()) == (augment("Petitioner / Plaintiff"))))) != type(Undefined()))):
			define("filer_is_petitioner", ((((augment(filer_party) if ("filer_party" in vars) else Undefined()) == (augment("Petitioner / Plaintiff")))).primitive_value()))
		if ((not ("other_party" in vars)) and (type((ternary((augment(filer_is_petitioner) if ("filer_is_petitioner" in vars) else Undefined()), augment("Respondent"), augment("Petitioner")))) != type(Undefined()))):
			define("other_party", ((ternary((augment(filer_is_petitioner) if ("filer_is_petitioner" in vars) else Undefined()), augment("Respondent"), augment("Petitioner"))).primitive_value()))
		if ((not ("current_or_former_employment" in vars)) and (type(((((augment(employment) if ("employment" in vars) else Undefined()) == (augment("current")))).logical_or(((augment(employment) if ("employment" in vars) else Undefined()) == (augment("in past")))))) != type(Undefined()))):
			define("current_or_former_employment", (((((augment(employment) if ("employment" in vars) else Undefined()) == (augment("current")))).logical_or(((augment(employment) if ("employment" in vars) else Undefined()) == (augment("in past"))))).primitive_value()))
		if ((not ("employer_name1" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employer_name) if ("employer_name" in vars) else Undefined()), augment("n/a")))) != type(Undefined()))):
			define("employer_name1", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employer_name) if ("employer_name" in vars) else Undefined()), augment("n/a"))).primitive_value()))
		if ((not ("employment_address1" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employment_address) if ("employment_address" in vars) else Undefined()), augment("n/a")))) != type(Undefined()))):
			define("employment_address1", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employment_address) if ("employment_address" in vars) else Undefined()), augment("n/a"))).primitive_value()))
		if ((not ("employment_phone1" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employment_phone) if ("employment_phone" in vars) else Undefined()), augment("n/a")))) != type(Undefined()))):
			define("employment_phone1", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employment_phone) if ("employment_phone" in vars) else Undefined()), augment("n/a"))).primitive_value()))
		if ((not ("employment_occupation1" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employment_occupation) if ("employment_occupation" in vars) else Undefined()), augment("n/a")))) != type(Undefined()))):
			define("employment_occupation1", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employment_occupation) if ("employment_occupation" in vars) else Undefined()), augment("n/a"))).primitive_value()))
		if ((not ("employment_start_date1" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employment_start_date) if ("employment_start_date" in vars) else Undefined()), augment("n/a")))) != type(Undefined()))):
			define("employment_start_date1", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employment_start_date) if ("employment_start_date" in vars) else Undefined()), augment("n/a"))).primitive_value()))
		if ((not ("employment_hours1" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employment_hours_worked) if ("employment_hours_worked" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("employment_hours1", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employment_hours_worked) if ("employment_hours_worked" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("employment_wage1" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employment_wage) if ("employment_wage" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("employment_wage1", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(employment_wage) if ("employment_wage" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("asset_personal_property_checkmark" in vars)) and (type((((augment(asset_personal_property) if ("asset_personal_property" in vars) else Undefined()) > (augment(0))))) != type(Undefined()))):
			define("asset_personal_property_checkmark", ((((augment(asset_personal_property) if ("asset_personal_property" in vars) else Undefined()) > (augment(0)))).primitive_value()))
		if ((not ("asset_real_property_checkmark" in vars)) and (type((((augment(asset_real_property) if ("asset_real_property" in vars) else Undefined()) > (augment(0))))) != type(Undefined()))):
			define("asset_real_property_checkmark", ((((augment(asset_real_property) if ("asset_real_property" in vars) else Undefined()) > (augment(0)))).primitive_value()))
		if ((not ("expenses_childcare_total" in vars)) and (type((((((augment(childcare_to_work) if ("childcare_to_work" in vars) else Undefined()) + ((augment(uncovered_children_healthcare) if ("uncovered_children_healthcare" in vars) else Undefined())))) + (((augment(visitation_travel_expense) if ("visitation_travel_expense" in vars) else Undefined()) + ((augment(children_special_needs) if ("children_special_needs" in vars) else Undefined()))))) + (((augment(insurance_for_children_cost) if ("insurance_for_children_cost" in vars) else Undefined()) + ((augment(expenses_additional_childcare) if ("expenses_additional_childcare" in vars) else Undefined())))))) != type(Undefined()))):
			define("expenses_childcare_total", ((((((augment(childcare_to_work) if ("childcare_to_work" in vars) else Undefined()) + ((augment(uncovered_children_healthcare) if ("uncovered_children_healthcare" in vars) else Undefined())))) + (((augment(visitation_travel_expense) if ("visitation_travel_expense" in vars) else Undefined()) + ((augment(children_special_needs) if ("children_special_needs" in vars) else Undefined()))))) + (((augment(insurance_for_children_cost) if ("insurance_for_children_cost" in vars) else Undefined()) + ((augment(expenses_additional_childcare) if ("expenses_additional_childcare" in vars) else Undefined()))))).primitive_value()))
		if ((not ("debt1_defined" in vars)) and (type((ternary((augment(expense_types["installment/debt"]) if ("expense_types" in vars) else Undefined()), (augment(debt_monthly1) if ("debt_monthly1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("debt1_defined", ((ternary((augment(expense_types["installment/debt"]) if ("expense_types" in vars) else Undefined()), (augment(debt_monthly1) if ("debt_monthly1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("debt2_defined" in vars)) and (type((ternary((augment(debt2) if ("debt2" in vars) else Undefined()), (augment(debt_monthly2) if ("debt_monthly2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("debt2_defined", ((ternary((augment(debt2) if ("debt2" in vars) else Undefined()), (augment(debt_monthly2) if ("debt_monthly2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("debt3_defined" in vars)) and (type((ternary((augment(debt3) if ("debt3" in vars) else Undefined()), (augment(debt_monthly3) if ("debt_monthly3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("debt3_defined", ((ternary((augment(debt3) if ("debt3" in vars) else Undefined()), (augment(debt_monthly3) if ("debt_monthly3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("debt4_defined" in vars)) and (type((ternary((augment(debt4) if ("debt4" in vars) else Undefined()), (augment(debt_monthly4) if ("debt_monthly4" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("debt4_defined", ((ternary((augment(debt4) if ("debt4" in vars) else Undefined()), (augment(debt_monthly4) if ("debt_monthly4" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("debt5_defined" in vars)) and (type((ternary((augment(debt5) if ("debt5" in vars) else Undefined()), (augment(debt_monthly5) if ("debt_monthly5" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("debt5_defined", ((ternary((augment(debt5) if ("debt5" in vars) else Undefined()), (augment(debt_monthly5) if ("debt_monthly5" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("debt6_defined" in vars)) and (type((ternary((augment(debt6) if ("debt6" in vars) else Undefined()), (augment(debt_monthly6) if ("debt_monthly6" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("debt6_defined", ((ternary((augment(debt6) if ("debt6" in vars) else Undefined()), (augment(debt_monthly6) if ("debt_monthly6" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("debt7_defined" in vars)) and (type((ternary((augment(debt7) if ("debt7" in vars) else Undefined()), (augment(debt_monthly7) if ("debt_monthly7" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("debt7_defined", ((ternary((augment(debt7) if ("debt7" in vars) else Undefined()), (augment(debt_monthly7) if ("debt_monthly7" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("debt8_defined" in vars)) and (type((ternary((augment(debt8) if ("debt8" in vars) else Undefined()), (augment(debt_monthly8) if ("debt_monthly8" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("debt8_defined", ((ternary((augment(debt8) if ("debt8" in vars) else Undefined()), (augment(debt_monthly8) if ("debt_monthly8" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("expenses_debt_total" in vars)) and (type(((((((augment(debt1_defined) if ("debt1_defined" in vars) else Undefined()) + ((augment(debt2_defined) if ("debt2_defined" in vars) else Undefined())))) + (((augment(debt3_defined) if ("debt3_defined" in vars) else Undefined()) + ((augment(debt4_defined) if ("debt4_defined" in vars) else Undefined()))))) + (((augment(debt5_defined) if ("debt5_defined" in vars) else Undefined()) + ((augment(debt6_defined) if ("debt6_defined" in vars) else Undefined()))))) + (((augment(debt7_defined) if ("debt7_defined" in vars) else Undefined()) + ((augment(debt8_defined) if ("debt8_defined" in vars) else Undefined())))))) != type(Undefined()))):
			define("expenses_debt_total", (((((((augment(debt1_defined) if ("debt1_defined" in vars) else Undefined()) + ((augment(debt2_defined) if ("debt2_defined" in vars) else Undefined())))) + (((augment(debt3_defined) if ("debt3_defined" in vars) else Undefined()) + ((augment(debt4_defined) if ("debt4_defined" in vars) else Undefined()))))) + (((augment(debt5_defined) if ("debt5_defined" in vars) else Undefined()) + ((augment(debt6_defined) if ("debt6_defined" in vars) else Undefined()))))) + (((augment(debt7_defined) if ("debt7_defined" in vars) else Undefined()) + ((augment(debt8_defined) if ("debt8_defined" in vars) else Undefined()))))).primitive_value()))
		if ((not ("other_expense_amount_defined" in vars)) and (type((ternary((augment(expenses_other) if ("expenses_other" in vars) else Undefined()), (augment(other_expense_amount) if ("other_expense_amount" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("other_expense_amount_defined", ((ternary((augment(expenses_other) if ("expenses_other" in vars) else Undefined()), (augment(other_expense_amount) if ("other_expense_amount" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("asset_other_property" in vars)) and (type((((augment(asset_real_property) if ("asset_real_property" in vars) else Undefined()) + ((augment(asset_personal_property) if ("asset_personal_property" in vars) else Undefined()))))) != type(Undefined()))):
			define("asset_other_property", ((((augment(asset_real_property) if ("asset_real_property" in vars) else Undefined()) + ((augment(asset_personal_property) if ("asset_personal_property" in vars) else Undefined())))).primitive_value()))
		if ((not ("question1otherjobs_employment2_paragraph" in vars)) and (("employer_name2" in vars) and ("employment_address2" in vars) and ("employment_phone2" in vars) and ("employment_occupation2" in vars) and ("employment_start_date2" in vars) and ("employment_hours_worked2" in vars) and ("employment_wage2" in vars))):
			define("question1otherjobs_employment2_paragraph", (augment("""Employer: %s

		Employer\'s address: %s

		Employer\'s phone number: %s

		Occupation: %s

		Date job started: %s

		I work about %s hours per week.

		I get paid $%s gross (before taxes) per month""" % (employer_name2,employment_address2,employment_phone2,employment_occupation2,employment_start_date2,employment_hours_worked2,employment_wage2)).primitive_value()))
		if ((not ("insert_question1otherjobs_employment2_paragraph" in vars)) and (type((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(question1otherjobs_employment2_paragraph) if ("question1otherjobs_employment2_paragraph" in vars) else Undefined()), augment("")))) != type(Undefined()))):
			define("insert_question1otherjobs_employment2_paragraph", ((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(question1otherjobs_employment2_paragraph) if ("question1otherjobs_employment2_paragraph" in vars) else Undefined()), augment(""))).primitive_value()))
		if ((not ("question1otherjobs_employment3_paragraph" in vars)) and (("employer_name3" in vars) and ("employment_address3" in vars) and ("employment_phone3" in vars) and ("employment_occupation3" in vars) and ("employment_start_date3" in vars) and ("employment_hours_worked3" in vars) and ("employment_wage3" in vars))):
			define("question1otherjobs_employment3_paragraph", (augment("""Employer: %s

		Employer\'s address: %s

		Employer\'s phone number: %s

		Occupation:  %s

		Date job started: %s

		I work about %s hours per week.

		I get paid $ %s gross (before taxes) per month""" % (employer_name3,employment_address3,employment_phone3,employment_occupation3,employment_start_date3,employment_hours_worked3,employment_wage3)).primitive_value()))
		if ((not ("insert_question1otherjobs_employment3_paragraph" in vars)) and (type((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(question1otherjobs_employment3_paragraph) if ("question1otherjobs_employment3_paragraph" in vars) else Undefined()), augment("")))) != type(Undefined()))):
			define("insert_question1otherjobs_employment3_paragraph", ((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(question1otherjobs_employment3_paragraph) if ("question1otherjobs_employment3_paragraph" in vars) else Undefined()), augment(""))).primitive_value()))
		if ((not ("question12_person6_paragraph" in vars)) and (("householdname6" in vars) and ("householdage6" in vars) and ("householdrelation6" in vars) and ("householdincome6" in vars) and ("payyesno6" in vars))):
			define("question12_person6_paragraph", (augment("""**Question 12--The following people live with me**


		Name: %s

		Age: %s

		How the person is related to me: %s

		That person\'s gross monthly income: %s

		Does the person pay some of the household expenses: %s""" % (householdname6,householdage6,householdrelation6,householdincome6,payyesno6)).primitive_value()))
		if ((not ("insert_question12_person6_paragraph" in vars)) and (type((ternary((augment(household_size6) if ("household_size6" in vars) else Undefined()), (augment(question12_person6_paragraph) if ("question12_person6_paragraph" in vars) else Undefined()), augment("See FL-150 Form")))) != type(Undefined()))):
			define("insert_question12_person6_paragraph", ((ternary((augment(household_size6) if ("household_size6" in vars) else Undefined()), (augment(question12_person6_paragraph) if ("question12_person6_paragraph" in vars) else Undefined()), augment("See FL-150 Form"))).primitive_value()))
		if ((not ("question12_person7_paragraph" in vars)) and (("householdname7" in vars) and ("householdage7" in vars) and ("householdrelation7" in vars) and ("householdincome7" in vars) and ("payyesno7" in vars))):
			define("question12_person7_paragraph", (augment("""Name: %s

		Age: %s

		How the person is related to me: %s

		That person\'s gross monthly income: %s

		Does the person pay some of the household expenses: %s""" % (householdname7,householdage7,householdrelation7,householdincome7,payyesno7)).primitive_value()))
		if ((not ("insert_question12_person7_paragraph" in vars)) and (type((ternary((augment(household_size7) if ("household_size7" in vars) else Undefined()), (augment(question12_person7_paragraph) if ("question12_person7_paragraph" in vars) else Undefined()), augment("")))) != type(Undefined()))):
			define("insert_question12_person7_paragraph", ((ternary((augment(household_size7) if ("household_size7" in vars) else Undefined()), (augment(question12_person7_paragraph) if ("question12_person7_paragraph" in vars) else Undefined()), augment(""))).primitive_value()))
		if ((not ("question12_person8_paragraph" in vars)) and (("householdname8" in vars) and ("householdage8" in vars) and ("householdrelation8" in vars) and ("householdincome8" in vars) and ("payyesno8" in vars))):
			define("question12_person8_paragraph", (augment("""Name: %s

		Age: %s

		How the person is related to me: %s

		That person\'s gross monthly income: %s

		Does the person pay some of the household expenses: %s""" % (householdname8,householdage8,householdrelation8,householdincome8,payyesno8)).primitive_value()))
		if ((not ("insert_question12_person8_paragraph" in vars)) and (type((ternary((augment(household_size8) if ("household_size8" in vars) else Undefined()), (augment(question12_person8_paragraph) if ("question12_person8_paragraph" in vars) else Undefined()), augment("")))) != type(Undefined()))):
			define("insert_question12_person8_paragraph", ((ternary((augment(household_size8) if ("household_size8" in vars) else Undefined()), (augment(question12_person8_paragraph) if ("question12_person8_paragraph" in vars) else Undefined()), augment(""))).primitive_value()))
		if ((not ("character_limit_other_party_income_based_on" in vars)) and (type(((((augment(other_party_income_based_on) if ("other_party_income_based_on" in vars) else Undefined()).__len__())) > ((augment(25))))) != type(Undefined()))):
			define("character_limit_other_party_income_based_on", (((((augment(other_party_income_based_on) if ("other_party_income_based_on" in vars) else Undefined()).__len__())) > ((augment(25)))).primitive_value()))
		if ((not ("pdf_other_party_income_based_on" in vars)) and (type((ternary((augment(character_limit_other_party_income_based_on) if ("character_limit_other_party_income_based_on" in vars) else Undefined()), augment("See Addendum"), (augment(other_party_income_based_on) if ("other_party_income_based_on" in vars) else Undefined())))) != type(Undefined()))):
			define("pdf_other_party_income_based_on", ((ternary((augment(character_limit_other_party_income_based_on) if ("character_limit_other_party_income_based_on" in vars) else Undefined()), augment("See Addendum"), (augment(other_party_income_based_on) if ("other_party_income_based_on" in vars) else Undefined()))).primitive_value()))
		if ((not ("addendum_other_party_income_is_based_on" in vars)) and (type((ternary((augment(character_limit_other_party_income_based_on) if ("character_limit_other_party_income_based_on" in vars) else Undefined()), (augment(other_party_income_based_on) if ("other_party_income_based_on" in vars) else Undefined()), augment("See FL-150 form")))) != type(Undefined()))):
			define("addendum_other_party_income_is_based_on", ((ternary((augment(character_limit_other_party_income_based_on) if ("character_limit_other_party_income_based_on" in vars) else Undefined()), (augment(other_party_income_based_on) if ("other_party_income_based_on" in vars) else Undefined()), augment("See FL-150 form"))).primitive_value()))
		if ((not ("character_limit_source_of_other_income" in vars)) and (type(((((augment(additional_income_description) if ("additional_income_description" in vars) else Undefined()).__len__())) > ((augment(25))))) != type(Undefined()))):
			define("character_limit_source_of_other_income", (((((augment(additional_income_description) if ("additional_income_description" in vars) else Undefined()).__len__())) > ((augment(25)))).primitive_value()))
		if ((not ("pdf_source_of_other_income" in vars)) and (type((ternary((augment(character_limit_source_of_other_income) if ("character_limit_source_of_other_income" in vars) else Undefined()), augment("See addendum"), (augment(additional_income_description) if ("additional_income_description" in vars) else Undefined())))) != type(Undefined()))):
			define("pdf_source_of_other_income", ((ternary((augment(character_limit_source_of_other_income) if ("character_limit_source_of_other_income" in vars) else Undefined()), augment("See addendum"), (augment(additional_income_description) if ("additional_income_description" in vars) else Undefined()))).primitive_value()))
		if ((not ("addendum_source_of_other_income" in vars)) and (type((ternary((augment(character_limit_source_of_other_income) if ("character_limit_source_of_other_income" in vars) else Undefined()), (augment(additional_income_description) if ("additional_income_description" in vars) else Undefined()), augment("See Form FL-150")))) != type(Undefined()))):
			define("addendum_source_of_other_income", ((ternary((augment(character_limit_source_of_other_income) if ("character_limit_source_of_other_income" in vars) else Undefined()), (augment(additional_income_description) if ("additional_income_description" in vars) else Undefined()), augment("See Form FL-150"))).primitive_value()))
		if ((not ("character_limit_income_change_description" in vars)) and (type(((((augment(income_change_description) if ("income_change_description" in vars) else Undefined()).__len__())) > ((augment(25))))) != type(Undefined()))):
			define("character_limit_income_change_description", (((((augment(income_change_description) if ("income_change_description" in vars) else Undefined()).__len__())) > ((augment(25)))).primitive_value()))
		if ((not ("addendum_income_change_description" in vars)) and (type((ternary((augment(character_limit_income_change_description) if ("character_limit_income_change_description" in vars) else Undefined()), (augment(income_change_description) if ("income_change_description" in vars) else Undefined()), augment("See FL-150 form")))) != type(Undefined()))):
			define("addendum_income_change_description", ((ternary((augment(character_limit_income_change_description) if ("character_limit_income_change_description" in vars) else Undefined()), (augment(income_change_description) if ("income_change_description" in vars) else Undefined()), augment("See FL-150 form"))).primitive_value()))
		if ((not ("pdf_income_change_description" in vars)) and (type((ternary((augment(character_limit_income_change_description) if ("character_limit_income_change_description" in vars) else Undefined()), augment("See Addendum"), (augment(income_change_description) if ("income_change_description" in vars) else Undefined())))) != type(Undefined()))):
			define("pdf_income_change_description", ((ternary((augment(character_limit_income_change_description) if ("character_limit_income_change_description" in vars) else Undefined()), augment("See Addendum"), (augment(income_change_description) if ("income_change_description" in vars) else Undefined()))).primitive_value()))
		if ((not ("question14_debt7_paragraph" in vars)) and (("debt_creditor7" in vars) and ("debt_type7" in vars) and ("debt_monthly7" in vars) and ("debt_balance7" in vars) and ("debt_payment7" in vars))):
			define("question14_debt7_paragraph", (augment("""Paid to: %s

		For: %s

		Amount ($): %s

		Balance ($): %s

		Date of last payment: %s""" % (debt_creditor7,debt_type7,debt_monthly7,debt_balance7,debt_payment7)).primitive_value()))
		if ((not ("insert_question14_debt7_paragraph" in vars)) and (type((ternary((augment(debt7) if ("debt7" in vars) else Undefined()), (augment(question14_debt7_paragraph) if ("question14_debt7_paragraph" in vars) else Undefined()), augment("See FL-150 Form")))) != type(Undefined()))):
			define("insert_question14_debt7_paragraph", ((ternary((augment(debt7) if ("debt7" in vars) else Undefined()), (augment(question14_debt7_paragraph) if ("question14_debt7_paragraph" in vars) else Undefined()), augment("See FL-150 Form"))).primitive_value()))
		if ((not ("question14_debt8_paragraph" in vars)) and (("debt_creditor8" in vars) and ("debt_type8" in vars) and ("debt_monthly8" in vars) and ("debt_balance8" in vars) and ("debt_payment8" in vars))):
			define("question14_debt8_paragraph", (augment("""
		Paid to: %s

		For: %s

		Amount ($): %s

		Balance ($): %s

		Date of last referral: %s""" % (debt_creditor8,debt_type8,debt_monthly8,debt_balance8,debt_payment8)).primitive_value()))
		if ((not ("insert_question14_debt8_paragraph" in vars)) and (type((ternary((augment(debt8) if ("debt8" in vars) else Undefined()), (augment(question14_debt8_paragraph) if ("question14_debt8_paragraph" in vars) else Undefined()), augment("")))) != type(Undefined()))):
			define("insert_question14_debt8_paragraph", ((ternary((augment(debt8) if ("debt8" in vars) else Undefined()), (augment(question14_debt8_paragraph) if ("question14_debt8_paragraph" in vars) else Undefined()), augment(""))).primitive_value()))
		if ((not ("character_limit_other_relationship_children_name_and_ages" in vars)) and (type(((((augment(other_relationship_children_name_and_ages) if ("other_relationship_children_name_and_ages" in vars) else Undefined()).__len__())) > ((augment(40))))) != type(Undefined()))):
			define("character_limit_other_relationship_children_name_and_ages", (((((augment(other_relationship_children_name_and_ages) if ("other_relationship_children_name_and_ages" in vars) else Undefined()).__len__())) > ((augment(40)))).primitive_value()))
		if ((not ("pdf_other_relationship_children_name_and_ages" in vars)) and (type((ternary((augment(character_limit_other_relationship_children_name_and_ages) if ("character_limit_other_relationship_children_name_and_ages" in vars) else Undefined()), augment("See Addendum"), (augment(other_relationship_children_name_and_ages) if ("other_relationship_children_name_and_ages" in vars) else Undefined())))) != type(Undefined()))):
			define("pdf_other_relationship_children_name_and_ages", ((ternary((augment(character_limit_other_relationship_children_name_and_ages) if ("character_limit_other_relationship_children_name_and_ages" in vars) else Undefined()), augment("See Addendum"), (augment(other_relationship_children_name_and_ages) if ("other_relationship_children_name_and_ages" in vars) else Undefined()))).primitive_value()))
		if ((not ("addendum_other_relationship_children_name_and_ages" in vars)) and (type((ternary((augment(character_limit_other_relationship_children_name_and_ages) if ("character_limit_other_relationship_children_name_and_ages" in vars) else Undefined()), (augment(other_relationship_children_name_and_ages) if ("other_relationship_children_name_and_ages" in vars) else Undefined()), augment("See FL-150 Form")))) != type(Undefined()))):
			define("addendum_other_relationship_children_name_and_ages", ((ternary((augment(character_limit_other_relationship_children_name_and_ages) if ("character_limit_other_relationship_children_name_and_ages" in vars) else Undefined()), (augment(other_relationship_children_name_and_ages) if ("other_relationship_children_name_and_ages" in vars) else Undefined()), augment("See FL-150 Form"))).primitive_value()))
		if ((not ("character_limit_special_hardship_explanation" in vars)) and (type(((((augment(special_hardship_explanation) if ("special_hardship_explanation" in vars) else Undefined()).__len__())) > ((augment(40))))) != type(Undefined()))):
			define("character_limit_special_hardship_explanation", (((((augment(special_hardship_explanation) if ("special_hardship_explanation" in vars) else Undefined()).__len__())) > ((augment(40)))).primitive_value()))
		if ((not ("pdf_special_hardship_explanation" in vars)) and (type((ternary((augment(character_limit_special_hardship_explanation) if ("character_limit_special_hardship_explanation" in vars) else Undefined()), augment("See Addendum"), (augment(special_hardship_explanation) if ("special_hardship_explanation" in vars) else Undefined())))) != type(Undefined()))):
			define("pdf_special_hardship_explanation", ((ternary((augment(character_limit_special_hardship_explanation) if ("character_limit_special_hardship_explanation" in vars) else Undefined()), augment("See Addendum"), (augment(special_hardship_explanation) if ("special_hardship_explanation" in vars) else Undefined()))).primitive_value()))
		if ((not ("addendum_special_hardship_explanation" in vars)) and (type((ternary((augment(character_limit_special_hardship_explanation) if ("character_limit_special_hardship_explanation" in vars) else Undefined()), (augment(special_hardship_explanation) if ("special_hardship_explanation" in vars) else Undefined()), augment("See FL-150 Form")))) != type(Undefined()))):
			define("addendum_special_hardship_explanation", ((ternary((augment(character_limit_special_hardship_explanation) if ("character_limit_special_hardship_explanation" in vars) else Undefined()), (augment(special_hardship_explanation) if ("special_hardship_explanation" in vars) else Undefined()), augment("See FL-150 Form"))).primitive_value()))
		if ((not ("character_limit_additional_information_about_support" in vars)) and (type(((((augment(additional_information_about_support) if ("additional_information_about_support" in vars) else Undefined()).__len__())) > ((augment(40))))) != type(Undefined()))):
			define("character_limit_additional_information_about_support", (((((augment(additional_information_about_support) if ("additional_information_about_support" in vars) else Undefined()).__len__())) > ((augment(40)))).primitive_value()))
		if ((not ("pdf_additional_information_about_support" in vars)) and (type((ternary((augment(character_limit_additional_information_about_support) if ("character_limit_additional_information_about_support" in vars) else Undefined()), augment("See Addendum"), (augment(additional_information_about_support) if ("additional_information_about_support" in vars) else Undefined())))) != type(Undefined()))):
			define("pdf_additional_information_about_support", ((ternary((augment(character_limit_additional_information_about_support) if ("character_limit_additional_information_about_support" in vars) else Undefined()), augment("See Addendum"), (augment(additional_information_about_support) if ("additional_information_about_support" in vars) else Undefined()))).primitive_value()))
		if ((not ("addendum_additional_information_about_support" in vars)) and (type((ternary((augment(character_limit_additional_information_about_support) if ("character_limit_additional_information_about_support" in vars) else Undefined()), (augment(additional_information_about_support) if ("additional_information_about_support" in vars) else Undefined()), augment("See FL-150 Form")))) != type(Undefined()))):
			define("addendum_additional_information_about_support", ((ternary((augment(character_limit_additional_information_about_support) if ("character_limit_additional_information_about_support" in vars) else Undefined()), (augment(additional_information_about_support) if ("additional_information_about_support" in vars) else Undefined()), augment("See FL-150 Form"))).primitive_value()))
		if ((not ("per_month_checked" in vars)) and (type((((augment(employment_wage1) if ("employment_wage1" in vars) else Undefined()) > (augment(0))))) != type(Undefined()))):
			define("per_month_checked", ((((augment(employment_wage1) if ("employment_wage1" in vars) else Undefined()) > (augment(0)))).primitive_value()))
		if ((not ("high_school_incomplete" in vars)) and (type((((augment(education_level) if ("education_level" in vars) else Undefined()) < (augment(12))))) != type(Undefined()))):
			define("high_school_incomplete", ((((augment(education_level) if ("education_level" in vars) else Undefined()) < (augment(12)))).primitive_value()))
		if ((not ("completed_college" in vars)) and (type((((augment(education_level) if ("education_level" in vars) else Undefined()) >= (augment(16))))) != type(Undefined()))):
			define("completed_college", ((((augment(education_level) if ("education_level" in vars) else Undefined()) >= (augment(16)))).primitive_value()))
		if ((not ("completed_graduate" in vars)) and (type((((augment(education_level) if ("education_level" in vars) else Undefined()) >= (augment(18))))) != type(Undefined()))):
			define("completed_graduate", ((((augment(education_level) if ("education_level" in vars) else Undefined()) >= (augment(18)))).primitive_value()))
		if ((not ("years_of_college" in vars)) and (type((((augment(education_level) if ("education_level" in vars) else Undefined()) - (augment(12))))) != type(Undefined()))):
			define("years_of_college", ((((augment(education_level) if ("education_level" in vars) else Undefined()) - (augment(12)))).primitive_value()))
		if ((not ("years_of_college_makes_sense" in vars)) and (type((((augment(years_of_college) if ("years_of_college" in vars) else Undefined()) >= (augment(0))))) != type(Undefined()))):
			define("years_of_college_makes_sense", ((((augment(years_of_college) if ("years_of_college" in vars) else Undefined()) >= (augment(0)))).primitive_value()))
		if ((not ("years_of_college_filled" in vars)) and (type((ternary((augment(years_of_college_makes_sense) if ("years_of_college_makes_sense" in vars) else Undefined()), (augment(years_of_college) if ("years_of_college" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("years_of_college_filled", ((ternary((augment(years_of_college_makes_sense) if ("years_of_college_makes_sense" in vars) else Undefined()), (augment(years_of_college) if ("years_of_college" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("filed_taxes" in vars)) and (type((((augment(tax_filing_year) if ("tax_filing_year" in vars) else Undefined()) >= (augment(0))))) != type(Undefined()))):
			define("filed_taxes", ((((augment(tax_filing_year) if ("tax_filing_year" in vars) else Undefined()) >= (augment(0)))).primitive_value()))
		if ((not ("petitioner" in vars)) and (type((ternary((augment(filer_is_petitioner) if ("filer_is_petitioner" in vars) else Undefined()), (augment(party_name) if ("party_name" in vars) else Undefined()), (augment(name_of_spouse) if ("name_of_spouse" in vars) else Undefined())))) != type(Undefined()))):
			define("petitioner", ((ternary((augment(filer_is_petitioner) if ("filer_is_petitioner" in vars) else Undefined()), (augment(party_name) if ("party_name" in vars) else Undefined()), (augment(name_of_spouse) if ("name_of_spouse" in vars) else Undefined()))).primitive_value()))
		if ((not ("respondent" in vars)) and (type((ternary((augment(filer_is_petitioner) if ("filer_is_petitioner" in vars) else Undefined()), (augment(name_of_spouse) if ("name_of_spouse" in vars) else Undefined()), (augment(party_name) if ("party_name" in vars) else Undefined())))) != type(Undefined()))):
			define("respondent", ((ternary((augment(filer_is_petitioner) if ("filer_is_petitioner" in vars) else Undefined()), (augment(name_of_spouse) if ("name_of_spouse" in vars) else Undefined()), (augment(party_name) if ("party_name" in vars) else Undefined()))).primitive_value()))
		if ((not ("deduction_union1_defined" in vars)) and (type((ternary((augment(union1) if ("union1" in vars) else Undefined()), (augment(deduction_union1) if ("deduction_union1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("deduction_union1_defined", ((ternary((augment(union1) if ("union1" in vars) else Undefined()), (augment(deduction_union1) if ("deduction_union1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("deduction_union2_defined" in vars)) and (type((ternary((augment(union2) if ("union2" in vars) else Undefined()), (augment(deduction_union2) if ("deduction_union2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("deduction_union2_defined", ((ternary((augment(union2) if ("union2" in vars) else Undefined()), (augment(deduction_union2) if ("deduction_union2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("deduction_union3_defined" in vars)) and (type((ternary((augment(union3) if ("union3" in vars) else Undefined()), (augment(deduction_union3) if ("deduction_union3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("deduction_union3_defined", ((ternary((augment(union3) if ("union3" in vars) else Undefined()), (augment(deduction_union3) if ("deduction_union3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("deduction_union" in vars)) and (type(((((augment(deduction_union1_defined) if ("deduction_union1_defined" in vars) else Undefined()) + ((augment(deduction_union2_defined) if ("deduction_union2_defined" in vars) else Undefined())))) + (((augment(deduction_union3_defined) if ("deduction_union3_defined" in vars) else Undefined()))))) != type(Undefined()))):
			define("deduction_union", (((((augment(deduction_union1_defined) if ("deduction_union1_defined" in vars) else Undefined()) + ((augment(deduction_union2_defined) if ("deduction_union2_defined" in vars) else Undefined())))) + (((augment(deduction_union3_defined) if ("deduction_union3_defined" in vars) else Undefined())))).primitive_value()))
		if ((not ("deduction_health1_defined" in vars)) and (type((ternary((augment(health1) if ("health1" in vars) else Undefined()), (augment(deduction_health1) if ("deduction_health1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("deduction_health1_defined", ((ternary((augment(health1) if ("health1" in vars) else Undefined()), (augment(deduction_health1) if ("deduction_health1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("deduction_health2_defined" in vars)) and (type((ternary((augment(health2) if ("health2" in vars) else Undefined()), (augment(deduction_health2) if ("deduction_health2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("deduction_health2_defined", ((ternary((augment(health2) if ("health2" in vars) else Undefined()), (augment(deduction_health2) if ("deduction_health2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("deduction_health3_defined" in vars)) and (type((ternary((augment(health3) if ("health3" in vars) else Undefined()), (augment(deduction_health3) if ("deduction_health3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("deduction_health3_defined", ((ternary((augment(health3) if ("health3" in vars) else Undefined()), (augment(deduction_health3) if ("deduction_health3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("deduction_health" in vars)) and (type(((((augment(deduction_health1_defined) if ("deduction_health1_defined" in vars) else Undefined()) + ((augment(deduction_health2_defined) if ("deduction_health2_defined" in vars) else Undefined())))) + (((augment(deduction_health3_defined) if ("deduction_health3_defined" in vars) else Undefined()))))) != type(Undefined()))):
			define("deduction_health", (((((augment(deduction_health1_defined) if ("deduction_health1_defined" in vars) else Undefined()) + ((augment(deduction_health2_defined) if ("deduction_health2_defined" in vars) else Undefined())))) + (((augment(deduction_health3_defined) if ("deduction_health3_defined" in vars) else Undefined())))).primitive_value()))
		if ((not ("deduction_retirement1_defined" in vars)) and (type((ternary((augment(retirement1) if ("retirement1" in vars) else Undefined()), (augment(deduction_retirement1) if ("deduction_retirement1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("deduction_retirement1_defined", ((ternary((augment(retirement1) if ("retirement1" in vars) else Undefined()), (augment(deduction_retirement1) if ("deduction_retirement1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("deduction_retirement2_defined" in vars)) and (type((ternary((augment(retirement2) if ("retirement2" in vars) else Undefined()), (augment(deduction_retirement2) if ("deduction_retirement2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("deduction_retirement2_defined", ((ternary((augment(retirement2) if ("retirement2" in vars) else Undefined()), (augment(deduction_retirement2) if ("deduction_retirement2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("deduction_retirement3_defined" in vars)) and (type((ternary((augment(retirement3) if ("retirement3" in vars) else Undefined()), (augment(deduction_retirement3) if ("deduction_retirement3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("deduction_retirement3_defined", ((ternary((augment(retirement3) if ("retirement3" in vars) else Undefined()), (augment(deduction_retirement3) if ("deduction_retirement3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("deduction_retirement" in vars)) and (type(((((augment(deduction_retirement1_defined) if ("deduction_retirement1_defined" in vars) else Undefined()) + ((augment(deduction_retirement2_defined) if ("deduction_retirement2_defined" in vars) else Undefined())))) + (((augment(deduction_retirement3_defined) if ("deduction_retirement3_defined" in vars) else Undefined()))))) != type(Undefined()))):
			define("deduction_retirement", (((((augment(deduction_retirement1_defined) if ("deduction_retirement1_defined" in vars) else Undefined()) + ((augment(deduction_retirement2_defined) if ("deduction_retirement2_defined" in vars) else Undefined())))) + (((augment(deduction_retirement3_defined) if ("deduction_retirement3_defined" in vars) else Undefined())))).primitive_value()))
		if ((not ("deduction_job_related1_defined" in vars)) and (type((ternary((augment(job_related_expenses1) if ("job_related_expenses1" in vars) else Undefined()), (augment(deduction_job_related1) if ("deduction_job_related1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("deduction_job_related1_defined", ((ternary((augment(job_related_expenses1) if ("job_related_expenses1" in vars) else Undefined()), (augment(deduction_job_related1) if ("deduction_job_related1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("deduction_job_related2_defined" in vars)) and (type((ternary((augment(job_related_expenses2) if ("job_related_expenses2" in vars) else Undefined()), (augment(deduction_job_related2) if ("deduction_job_related2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("deduction_job_related2_defined", ((ternary((augment(job_related_expenses2) if ("job_related_expenses2" in vars) else Undefined()), (augment(deduction_job_related2) if ("deduction_job_related2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("deduction_job_related3_defined" in vars)) and (type((ternary((augment(job_related_expenses3) if ("job_related_expenses3" in vars) else Undefined()), (augment(deduction_job_related3) if ("deduction_job_related3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("deduction_job_related3_defined", ((ternary((augment(job_related_expenses3) if ("job_related_expenses3" in vars) else Undefined()), (augment(deduction_job_related3) if ("deduction_job_related3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("deduction_job_related" in vars)) and (type(((((augment(deduction_job_related1_defined) if ("deduction_job_related1_defined" in vars) else Undefined()) + ((augment(deduction_job_related2_defined) if ("deduction_job_related2_defined" in vars) else Undefined())))) + (((augment(deduction_job_related3_defined) if ("deduction_job_related3_defined" in vars) else Undefined()))))) != type(Undefined()))):
			define("deduction_job_related", (((((augment(deduction_job_related1_defined) if ("deduction_job_related1_defined" in vars) else Undefined()) + ((augment(deduction_job_related2_defined) if ("deduction_job_related2_defined" in vars) else Undefined())))) + (((augment(deduction_job_related3_defined) if ("deduction_job_related3_defined" in vars) else Undefined())))).primitive_value()))
		if ((not ("wage_last_month1_defined" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(wage_last_month1) if ("wage_last_month1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("wage_last_month1_defined", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(wage_last_month1) if ("wage_last_month1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("wage_last_month2_defined" in vars)) and (type((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(wage_last_month2) if ("wage_last_month2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("wage_last_month2_defined", ((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(wage_last_month2) if ("wage_last_month2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("wage_last_month3_defined" in vars)) and (type((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(wage_last_month3) if ("wage_last_month3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("wage_last_month3_defined", ((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(wage_last_month3) if ("wage_last_month3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("wage_last_month_total" in vars)) and (type(((((augment(wage_last_month1_defined) if ("wage_last_month1_defined" in vars) else Undefined()) + ((augment(wage_last_month2_defined) if ("wage_last_month2_defined" in vars) else Undefined())))) + (((augment(wage_last_month3_defined) if ("wage_last_month3_defined" in vars) else Undefined()))))) != type(Undefined()))):
			define("wage_last_month_total", (((((augment(wage_last_month1_defined) if ("wage_last_month1_defined" in vars) else Undefined()) + ((augment(wage_last_month2_defined) if ("wage_last_month2_defined" in vars) else Undefined())))) + (((augment(wage_last_month3_defined) if ("wage_last_month3_defined" in vars) else Undefined())))).primitive_value()))
		if ((not ("wage_avg_monthly1_defined" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(wage_avg_monthly1) if ("wage_avg_monthly1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("wage_avg_monthly1_defined", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(wage_avg_monthly1) if ("wage_avg_monthly1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("wage_avg_monthly2_defined" in vars)) and (type((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(wage_avg_monthly2) if ("wage_avg_monthly2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("wage_avg_monthly2_defined", ((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(wage_avg_monthly2) if ("wage_avg_monthly2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("wage_avg_monthly3_defined" in vars)) and (type((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(wage_avg_monthly3) if ("wage_avg_monthly3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("wage_avg_monthly3_defined", ((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(wage_avg_monthly3) if ("wage_avg_monthly3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("wage_avg_monthly_total" in vars)) and (type((((((augment(wage_avg_monthly1_defined) if ("wage_avg_monthly1_defined" in vars) else Undefined()) + ((augment(wage_avg_monthly2_defined) if ("wage_avg_monthly2_defined" in vars) else Undefined())))) + (((augment(wage_avg_monthly3_defined) if ("wage_avg_monthly3_defined" in vars) else Undefined())))) / ((augment(12))))) != type(Undefined()))):
			define("wage_avg_monthly_total", ((((((augment(wage_avg_monthly1_defined) if ("wage_avg_monthly1_defined" in vars) else Undefined()) + ((augment(wage_avg_monthly2_defined) if ("wage_avg_monthly2_defined" in vars) else Undefined())))) + (((augment(wage_avg_monthly3_defined) if ("wage_avg_monthly3_defined" in vars) else Undefined())))) / ((augment(12)))).primitive_value()))
		if ((not ("commission_last_month1_defined" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(commission_last_month1) if ("commission_last_month1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("commission_last_month1_defined", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(commission_last_month1) if ("commission_last_month1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("commission_last_month2_defined" in vars)) and (type((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(commission_last_month2) if ("commission_last_month2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("commission_last_month2_defined", ((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(commission_last_month2) if ("commission_last_month2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("commission_last_month3_defined" in vars)) and (type((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(commission_last_month3) if ("commission_last_month3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("commission_last_month3_defined", ((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(commission_last_month3) if ("commission_last_month3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("commission_last_month_total" in vars)) and (type(((((augment(commission_last_month1_defined) if ("commission_last_month1_defined" in vars) else Undefined()) + ((augment(commission_last_month2_defined) if ("commission_last_month2_defined" in vars) else Undefined())))) + (((augment(commission_last_month3_defined) if ("commission_last_month3_defined" in vars) else Undefined()))))) != type(Undefined()))):
			define("commission_last_month_total", (((((augment(commission_last_month1_defined) if ("commission_last_month1_defined" in vars) else Undefined()) + ((augment(commission_last_month2_defined) if ("commission_last_month2_defined" in vars) else Undefined())))) + (((augment(commission_last_month3_defined) if ("commission_last_month3_defined" in vars) else Undefined())))).primitive_value()))
		if ((not ("commission_monthly_avg1_defined" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(commission_avg_monthly1) if ("commission_avg_monthly1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("commission_monthly_avg1_defined", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(commission_avg_monthly1) if ("commission_avg_monthly1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("commission_monthly_avg2_defined" in vars)) and (type((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(commission_avg_monthly2) if ("commission_avg_monthly2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("commission_monthly_avg2_defined", ((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(commission_avg_monthly2) if ("commission_avg_monthly2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("commission_monthly_avg3_defined" in vars)) and (type((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(commission_avg_monthly3) if ("commission_avg_monthly3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("commission_monthly_avg3_defined", ((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(commission_avg_monthly3) if ("commission_avg_monthly3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("commission_monthly_avg_total" in vars)) and (type((((((augment(commission_monthly_avg1_defined) if ("commission_monthly_avg1_defined" in vars) else Undefined()) + ((augment(commission_monthly_avg2_defined) if ("commission_monthly_avg2_defined" in vars) else Undefined())))) + (((augment(commission_monthly_avg3_defined) if ("commission_monthly_avg3_defined" in vars) else Undefined())))) / ((augment(12))))) != type(Undefined()))):
			define("commission_monthly_avg_total", ((((((augment(commission_monthly_avg1_defined) if ("commission_monthly_avg1_defined" in vars) else Undefined()) + ((augment(commission_monthly_avg2_defined) if ("commission_monthly_avg2_defined" in vars) else Undefined())))) + (((augment(commission_monthly_avg3_defined) if ("commission_monthly_avg3_defined" in vars) else Undefined())))) / ((augment(12)))).primitive_value()))
		if ((not ("overtime_last_month1_defined" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(overtime_last_month1) if ("overtime_last_month1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("overtime_last_month1_defined", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(overtime_last_month1) if ("overtime_last_month1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("overtime_last_month2_defined" in vars)) and (type((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(overtime_last_month2) if ("overtime_last_month2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("overtime_last_month2_defined", ((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(overtime_last_month2) if ("overtime_last_month2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("overtime_last_month3_defined" in vars)) and (type((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(overtime_last_month3) if ("overtime_last_month3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("overtime_last_month3_defined", ((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(overtime_last_month3) if ("overtime_last_month3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("total_overtime_last_month" in vars)) and (type(((((augment(overtime_last_month1_defined) if ("overtime_last_month1_defined" in vars) else Undefined()) + ((augment(overtime_last_month2_defined) if ("overtime_last_month2_defined" in vars) else Undefined())))) + (((augment(overtime_last_month3_defined) if ("overtime_last_month3_defined" in vars) else Undefined()))))) != type(Undefined()))):
			define("total_overtime_last_month", (((((augment(overtime_last_month1_defined) if ("overtime_last_month1_defined" in vars) else Undefined()) + ((augment(overtime_last_month2_defined) if ("overtime_last_month2_defined" in vars) else Undefined())))) + (((augment(overtime_last_month3_defined) if ("overtime_last_month3_defined" in vars) else Undefined())))).primitive_value()))
		if ((not ("overtime_avg_monthly1_defined" in vars)) and (type((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(overtime_avg_monthly1) if ("overtime_avg_monthly1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("overtime_avg_monthly1_defined", ((ternary((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()), (augment(overtime_avg_monthly1) if ("overtime_avg_monthly1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("overtime_avg_monthly2_defined" in vars)) and (type((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(overtime_avg_monthly2) if ("overtime_avg_monthly2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("overtime_avg_monthly2_defined", ((ternary((augment(second_job) if ("second_job" in vars) else Undefined()), (augment(overtime_avg_monthly2) if ("overtime_avg_monthly2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("overtime_avg_monthly3_defined" in vars)) and (type((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(overtime_avg_monthly3) if ("overtime_avg_monthly3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("overtime_avg_monthly3_defined", ((ternary((augment(third_job) if ("third_job" in vars) else Undefined()), (augment(overtime_avg_monthly3) if ("overtime_avg_monthly3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("overtime_avg_monthly_total" in vars)) and (type((((((augment(overtime_avg_monthly1_defined) if ("overtime_avg_monthly1_defined" in vars) else Undefined()) + ((augment(overtime_avg_monthly2_defined) if ("overtime_avg_monthly2_defined" in vars) else Undefined())))) + (((augment(overtime_avg_monthly3_defined) if ("overtime_avg_monthly3_defined" in vars) else Undefined())))) / ((augment(12))))) != type(Undefined()))):
			define("overtime_avg_monthly_total", ((((((augment(overtime_avg_monthly1_defined) if ("overtime_avg_monthly1_defined" in vars) else Undefined()) + ((augment(overtime_avg_monthly2_defined) if ("overtime_avg_monthly2_defined" in vars) else Undefined())))) + (((augment(overtime_avg_monthly3_defined) if ("overtime_avg_monthly3_defined" in vars) else Undefined())))) / ((augment(12)))).primitive_value()))
		if ((not ("income_public_benefits_monthly_avg" in vars)) and (type((((augment(income_public_benefits_year) if ("income_public_benefits_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("income_public_benefits_monthly_avg", ((((augment(income_public_benefits_year) if ("income_public_benefits_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("income_spousal_support_monthly_avg" in vars)) and (type((((augment(income_spousal_support_year) if ("income_spousal_support_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("income_spousal_support_monthly_avg", ((((augment(income_spousal_support_year) if ("income_spousal_support_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("income_partner_support_monthly_avg" in vars)) and (type((((augment(income_partner_support_year) if ("income_partner_support_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("income_partner_support_monthly_avg", ((((augment(income_partner_support_year) if ("income_partner_support_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("income_pension_retirement_monthly_avg" in vars)) and (type((((augment(income_pension_retirement_year) if ("income_pension_retirement_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("income_pension_retirement_monthly_avg", ((((augment(income_pension_retirement_year) if ("income_pension_retirement_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("income_social_security_monthly_avg" in vars)) and (type((((augment(income_social_security_year) if ("income_social_security_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("income_social_security_monthly_avg", ((((augment(income_social_security_year) if ("income_social_security_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("income_disability_monthly_avg" in vars)) and (type((((augment(income_disability_year) if ("income_disability_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("income_disability_monthly_avg", ((((augment(income_disability_year) if ("income_disability_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("income_unemployment_comp_monthly_avg" in vars)) and (type((((augment(income_unemployment_year) if ("income_unemployment_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("income_unemployment_comp_monthly_avg", ((((augment(income_unemployment_year) if ("income_unemployment_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("income_workers_comp_monthly_avg" in vars)) and (type((((augment(income_workers_comp_year) if ("income_workers_comp_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("income_workers_comp_monthly_avg", ((((augment(income_workers_comp_year) if ("income_workers_comp_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("income_other_monthly_avg" in vars)) and (type((((augment(income_other_year) if ("income_other_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("income_other_monthly_avg", ((((augment(income_other_year) if ("income_other_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("dividends_monthly_avg" in vars)) and (type((((augment(dividends_investment_year) if ("dividends_investment_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("dividends_monthly_avg", ((((augment(dividends_investment_year) if ("dividends_investment_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("rental_investment_monthly_avg" in vars)) and (type((((augment(rental_investment_year) if ("rental_investment_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("rental_investment_monthly_avg", ((((augment(rental_investment_year) if ("rental_investment_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("trust_monthly_avg" in vars)) and (type((((augment(trust_investment_year) if ("trust_investment_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("trust_monthly_avg", ((((augment(trust_investment_year) if ("trust_investment_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("business_last_month" in vars)) and (type(((((augment(business_last_month1_defined) if ("business_last_month1_defined" in vars) else Undefined()) + ((augment(business_last_month2_defined) if ("business_last_month2_defined" in vars) else Undefined())))) + (((augment(business_last_month3_defined) if ("business_last_month3_defined" in vars) else Undefined()))))) != type(Undefined()))):
			define("business_last_month", (((((augment(business_last_month1_defined) if ("business_last_month1_defined" in vars) else Undefined()) + ((augment(business_last_month2_defined) if ("business_last_month2_defined" in vars) else Undefined())))) + (((augment(business_last_month3_defined) if ("business_last_month3_defined" in vars) else Undefined())))).primitive_value()))
		if ((not ("business_last_month1_defined" in vars)) and (type((ternary((augment(business1) if ("business1" in vars) else Undefined()), (augment(business_last_month1) if ("business_last_month1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("business_last_month1_defined", ((ternary((augment(business1) if ("business1" in vars) else Undefined()), (augment(business_last_month1) if ("business_last_month1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("business_last_month2_defined" in vars)) and (type((ternary((augment(business2) if ("business2" in vars) else Undefined()), (augment(business_last_month2) if ("business_last_month2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("business_last_month2_defined", ((ternary((augment(business2) if ("business2" in vars) else Undefined()), (augment(business_last_month2) if ("business_last_month2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("business_last_month3_defined" in vars)) and (type((ternary((augment(business3) if ("business3" in vars) else Undefined()), (augment(business_last_month3) if ("business_last_month3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("business_last_month3_defined", ((ternary((augment(business3) if ("business3" in vars) else Undefined()), (augment(business_last_month3) if ("business_last_month3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("business_year1_defined" in vars)) and (type((ternary((augment(business1) if ("business1" in vars) else Undefined()), (augment(business_year1) if ("business_year1" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("business_year1_defined", ((ternary((augment(business1) if ("business1" in vars) else Undefined()), (augment(business_year1) if ("business_year1" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("business_year2_defined" in vars)) and (type((ternary((augment(business2) if ("business2" in vars) else Undefined()), (augment(business_year2) if ("business_year2" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("business_year2_defined", ((ternary((augment(business2) if ("business2" in vars) else Undefined()), (augment(business_year2) if ("business_year2" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("business_year3_defined" in vars)) and (type((ternary((augment(business3) if ("business3" in vars) else Undefined()), (augment(business_year3) if ("business_year3" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("business_year3_defined", ((ternary((augment(business3) if ("business3" in vars) else Undefined()), (augment(business_year3) if ("business_year3" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("business_year" in vars)) and (type((((((augment(business_year1_defined) if ("business_year1_defined" in vars) else Undefined()) + ((augment(business_year2_defined) if ("business_year2_defined" in vars) else Undefined())))) + (((augment(business_year3_defined) if ("business_year3_defined" in vars) else Undefined())))) / ((augment(12))))) != type(Undefined()))):
			define("business_year", ((((((augment(business_year1_defined) if ("business_year1_defined" in vars) else Undefined()) + ((augment(business_year2_defined) if ("business_year2_defined" in vars) else Undefined())))) + (((augment(business_year3_defined) if ("business_year3_defined" in vars) else Undefined())))) / ((augment(12)))).primitive_value()))
		if ((not ("other_investment_monthly_avg" in vars)) and (type((((augment(other_investment_year) if ("other_investment_year" in vars) else Undefined()) / (augment(12))))) != type(Undefined()))):
			define("other_investment_monthly_avg", ((((augment(other_investment_year) if ("other_investment_year" in vars) else Undefined()) / (augment(12)))).primitive_value()))
		if ((not ("home_expenses" in vars)) and (type((ternary((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_monthly_mortgage) if ("expenses_monthly_mortgage" in vars) else Undefined()), (augment(expenses_monthly_rent) if ("expenses_monthly_rent" in vars) else Undefined())))) != type(Undefined()))):
			define("home_expenses", ((ternary((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_monthly_mortgage) if ("expenses_monthly_mortgage" in vars) else Undefined()), (augment(expenses_monthly_rent) if ("expenses_monthly_rent" in vars) else Undefined()))).primitive_value()))
		if ((not ("expenses_home_insurance" in vars)) and (type((ternary((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_homeowners_insurance) if ("expenses_homeowners_insurance" in vars) else Undefined()), (augment(expenses_renters_insurance) if ("expenses_renters_insurance" in vars) else Undefined())))) != type(Undefined()))):
			define("expenses_home_insurance", ((ternary((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_homeowners_insurance) if ("expenses_homeowners_insurance" in vars) else Undefined()), (augment(expenses_renters_insurance) if ("expenses_renters_insurance" in vars) else Undefined()))).primitive_value()))
		if ((not ("expenses_home_repairs" in vars)) and (type((ternary((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_homeowners_repairs) if ("expenses_homeowners_repairs" in vars) else Undefined()), (augment(expenses_rental_repairs) if ("expenses_rental_repairs" in vars) else Undefined())))) != type(Undefined()))):
			define("expenses_home_repairs", ((ternary((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_homeowners_repairs) if ("expenses_homeowners_repairs" in vars) else Undefined()), (augment(expenses_rental_repairs) if ("expenses_rental_repairs" in vars) else Undefined()))).primitive_value()))
		if ((not ("expenses_utilities" in vars)) and (type((ternary((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_homeowner_utility) if ("expenses_homeowner_utility" in vars) else Undefined()), (augment(expenses_rental_utilities) if ("expenses_rental_utilities" in vars) else Undefined())))) != type(Undefined()))):
			define("expenses_utilities", ((ternary((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_homeowner_utility) if ("expenses_homeowner_utility" in vars) else Undefined()), (augment(expenses_rental_utilities) if ("expenses_rental_utilities" in vars) else Undefined()))).primitive_value()))
		if ((not ("deduction_job_related_addendum_paragraph1" in vars)) and (("deduction_job_related_description1" in vars))):
			define("deduction_job_related_addendum_paragraph1", (augment("""Job 1: %s""" % (deduction_job_related_description1)).primitive_value()))
		if ((not ("deduction_job_related_addendum_paragraph2" in vars)) and (("deduction_job_related_description2" in vars))):
			define("deduction_job_related_addendum_paragraph2", (augment("""Job 2: %s""" % (deduction_job_related_description2)).primitive_value()))
		if ((not ("deduction_job_related_addendum_paragraph3" in vars)) and (("deduction_job_related_description3" in vars))):
			define("deduction_job_related_addendum_paragraph3", (augment("""Job 3: %s""" % (deduction_job_related_description3)).primitive_value()))
		if ((not ("insert_deduction_job_related_addendum_paragraph1" in vars)) and (type((ternary((augment(job_related_expenses1) if ("job_related_expenses1" in vars) else Undefined()), (augment(deduction_job_related_addendum_paragraph1) if ("deduction_job_related_addendum_paragraph1" in vars) else Undefined()), augment("")))) != type(Undefined()))):
			define("insert_deduction_job_related_addendum_paragraph1", ((ternary((augment(job_related_expenses1) if ("job_related_expenses1" in vars) else Undefined()), (augment(deduction_job_related_addendum_paragraph1) if ("deduction_job_related_addendum_paragraph1" in vars) else Undefined()), augment(""))).primitive_value()))
		if ((not ("insert_deduction_job_related_addendum_paragraph2" in vars)) and (type((ternary((augment(job_related_expenses2) if ("job_related_expenses2" in vars) else Undefined()), (augment(deduction_job_related_addendum_paragraph2) if ("deduction_job_related_addendum_paragraph2" in vars) else Undefined()), augment("")))) != type(Undefined()))):
			define("insert_deduction_job_related_addendum_paragraph2", ((ternary((augment(job_related_expenses2) if ("job_related_expenses2" in vars) else Undefined()), (augment(deduction_job_related_addendum_paragraph2) if ("deduction_job_related_addendum_paragraph2" in vars) else Undefined()), augment(""))).primitive_value()))
		if ((not ("insert_deduction_job_related_addendum_paragraph3" in vars)) and (type((ternary((augment(job_related_expenses3) if ("job_related_expenses3" in vars) else Undefined()), (augment(deduction_job_related_addendum_paragraph3) if ("deduction_job_related_addendum_paragraph3" in vars) else Undefined()), augment("")))) != type(Undefined()))):
			define("insert_deduction_job_related_addendum_paragraph3", ((ternary((augment(job_related_expenses3) if ("job_related_expenses3" in vars) else Undefined()), (augment(deduction_job_related_addendum_paragraph3) if ("deduction_job_related_addendum_paragraph3" in vars) else Undefined()), augment(""))).primitive_value()))
		if ((not ("has_home" in vars)) and (type(((((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()))).logical_or(((augment(expense_types["home rental"]) if ("expense_types" in vars) else Undefined()))))) != type(Undefined()))):
			define("has_home", (((((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()))).logical_or(((augment(expense_types["home rental"]) if ("expense_types" in vars) else Undefined())))).primitive_value()))
		if ((not ("expenses_property_taxes_defined" in vars)) and (type((ternary((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_property_taxes) if ("expenses_property_taxes" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("expenses_property_taxes_defined", ((ternary((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_property_taxes) if ("expenses_property_taxes" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("expenses_childcare_total_defined" in vars)) and (type((ternary((augment(expense_types["children related to case"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_childcare_total) if ("expenses_childcare_total" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("expenses_childcare_total_defined", ((ternary((augment(expense_types["children related to case"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_childcare_total) if ("expenses_childcare_total" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("expenses_utilities_defined" in vars)) and (type((ternary((augment(has_home) if ("has_home" in vars) else Undefined()), (augment(expenses_utilities) if ("expenses_utilities" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("expenses_utilities_defined", ((ternary((augment(has_home) if ("has_home" in vars) else Undefined()), (augment(expenses_utilities) if ("expenses_utilities" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("home_expenses_defined" in vars)) and (type((ternary((augment(has_home) if ("has_home" in vars) else Undefined()), (augment(home_expenses) if ("home_expenses" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("home_expenses_defined", ((ternary((augment(has_home) if ("has_home" in vars) else Undefined()), (augment(home_expenses) if ("home_expenses" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("expenses_home_insurance_defined" in vars)) and (type((ternary((augment(has_home) if ("has_home" in vars) else Undefined()), (augment(expenses_home_insurance) if ("expenses_home_insurance" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("expenses_home_insurance_defined", ((ternary((augment(has_home) if ("has_home" in vars) else Undefined()), (augment(expenses_home_insurance) if ("expenses_home_insurance" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("expenses_home_repairs_defined" in vars)) and (type((ternary((augment(has_home) if ("has_home" in vars) else Undefined()), (augment(expenses_home_repairs) if ("expenses_home_repairs" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("expenses_home_repairs_defined", ((ternary((augment(has_home) if ("has_home" in vars) else Undefined()), (augment(expenses_home_repairs) if ("expenses_home_repairs" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("expenses_total_debt_defined" in vars)) and (type((ternary((augment(expense_types["installment/debt"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_debt_total) if ("expenses_debt_total" in vars) else Undefined()), augment(0)))) != type(Undefined()))):
			define("expenses_total_debt_defined", ((ternary((augment(expense_types["installment/debt"]) if ("expense_types" in vars) else Undefined()), (augment(expenses_debt_total) if ("expenses_debt_total" in vars) else Undefined()), augment(0))).primitive_value()))
		if ((not ("expenses_grand_total" in vars)) and (type(((((((((((((augment(expenses_health) if ("expenses_health" in vars) else Undefined()) + ((augment(expenses_household_supplies) if ("expenses_household_supplies" in vars) else Undefined())))) + (((augment(expenses_eating_out) if ("expenses_eating_out" in vars) else Undefined()) + ((augment(expenses_communication) if ("expenses_communication" in vars) else Undefined()))))) + (((augment(expenses_cleaning) if ("expenses_cleaning" in vars) else Undefined()) + ((augment(expenses_clothes) if ("expenses_clothes" in vars) else Undefined()))))) + (((augment(expenses_education) if ("expenses_education" in vars) else Undefined()) + ((augment(expenses_entertainment) if ("expenses_entertainment" in vars) else Undefined()))))) + (((augment(expenses_transport) if ("expenses_transport" in vars) else Undefined()) + ((augment(expenses_insurance) if ("expenses_insurance" in vars) else Undefined()))))) + (((augment(expenses_savings) if ("expenses_savings" in vars) else Undefined()) + ((augment(expenses_charity) if ("expenses_charity" in vars) else Undefined()))))) + (((augment(other_expense_amount_defined) if ("other_expense_amount_defined" in vars) else Undefined()) + ((augment(expenses_total_debt_defined) if ("expenses_total_debt_defined" in vars) else Undefined()))))) + (((augment(expenses_home_repairs_defined) if ("expenses_home_repairs_defined" in vars) else Undefined()) + ((augment(expenses_home_insurance_defined) if ("expenses_home_insurance_defined" in vars) else Undefined()))))) + (((augment(home_expenses_defined) if ("home_expenses_defined" in vars) else Undefined()) + ((augment(expenses_utilities_defined) if ("expenses_utilities_defined" in vars) else Undefined()))))) + (((augment(expenses_childcare_total_defined) if ("expenses_childcare_total_defined" in vars) else Undefined()) + ((augment(expenses_property_taxes_defined) if ("expenses_property_taxes_defined" in vars) else Undefined())))))) != type(Undefined()))):
			define("expenses_grand_total", (((((((((((((augment(expenses_health) if ("expenses_health" in vars) else Undefined()) + ((augment(expenses_household_supplies) if ("expenses_household_supplies" in vars) else Undefined())))) + (((augment(expenses_eating_out) if ("expenses_eating_out" in vars) else Undefined()) + ((augment(expenses_communication) if ("expenses_communication" in vars) else Undefined()))))) + (((augment(expenses_cleaning) if ("expenses_cleaning" in vars) else Undefined()) + ((augment(expenses_clothes) if ("expenses_clothes" in vars) else Undefined()))))) + (((augment(expenses_education) if ("expenses_education" in vars) else Undefined()) + ((augment(expenses_entertainment) if ("expenses_entertainment" in vars) else Undefined()))))) + (((augment(expenses_transport) if ("expenses_transport" in vars) else Undefined()) + ((augment(expenses_insurance) if ("expenses_insurance" in vars) else Undefined()))))) + (((augment(expenses_savings) if ("expenses_savings" in vars) else Undefined()) + ((augment(expenses_charity) if ("expenses_charity" in vars) else Undefined()))))) + (((augment(other_expense_amount_defined) if ("other_expense_amount_defined" in vars) else Undefined()) + ((augment(expenses_total_debt_defined) if ("expenses_total_debt_defined" in vars) else Undefined()))))) + (((augment(expenses_home_repairs_defined) if ("expenses_home_repairs_defined" in vars) else Undefined()) + ((augment(expenses_home_insurance_defined) if ("expenses_home_insurance_defined" in vars) else Undefined()))))) + (((augment(home_expenses_defined) if ("home_expenses_defined" in vars) else Undefined()) + ((augment(expenses_utilities_defined) if ("expenses_utilities_defined" in vars) else Undefined()))))) + (((augment(expenses_childcare_total_defined) if ("expenses_childcare_total_defined" in vars) else Undefined()) + ((augment(expenses_property_taxes_defined) if ("expenses_property_taxes_defined" in vars) else Undefined()))))).primitive_value()))
		if ((not ("payyesno6" in vars)) and (type((ternary((augment(householdpayexpenses6) if ("householdpayexpenses6" in vars) else Undefined()), augment("Yes"), augment("No")))) != type(Undefined()))):
			define("payyesno6", ((ternary((augment(householdpayexpenses6) if ("householdpayexpenses6" in vars) else Undefined()), augment("Yes"), augment("No"))).primitive_value()))
		if ((not ("payyesno7" in vars)) and (type((ternary((augment(householdpayexpenses7) if ("householdpayexpenses7" in vars) else Undefined()), augment("Yes"), augment("No")))) != type(Undefined()))):
			define("payyesno7", ((ternary((augment(householdpayexpenses7) if ("householdpayexpenses7" in vars) else Undefined()), augment("Yes"), augment("No"))).primitive_value()))
		if ((not ("payyesno8" in vars)) and (type((ternary((augment(householdpayexpenses8) if ("householdpayexpenses8" in vars) else Undefined()), augment("Yes"), augment("No")))) != type(Undefined()))):
			define("payyesno8", ((ternary((augment(householdpayexpenses8) if ("householdpayexpenses8" in vars) else Undefined()), augment("Yes"), augment("No"))).primitive_value()))
		if ((not ("past_employed" in vars)) and (type((((augment(employment) if ("employment" in vars) else Undefined()) == (augment("in past"))))) != type(Undefined()))):
			define("past_employed", ((((augment(employment) if ("employment" in vars) else Undefined()) == (augment("in past")))).primitive_value()))
		if ((not ("owner_business_header" in vars)) and (True)):
			define("owner_business_header", (augment("""Tell us about the business you own""").primitive_value()))
		if ((not ("contractor_header" in vars)) and (True)):
			define("contractor_header", (augment("""Independent Contractor Income""").primitive_value()))
		if ((not ("business_header" in vars)) and (type((ternary((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()), (augment(owner_business_header) if ("owner_business_header" in vars) else Undefined()), (augment(contractor_header) if ("contractor_header" in vars) else Undefined())))) != type(Undefined()))):
			define("business_header", ((ternary((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()), (augment(owner_business_header) if ("owner_business_header" in vars) else Undefined()), (augment(contractor_header) if ("contractor_header" in vars) else Undefined()))).primitive_value()))
		if ((not ("owner_business_subheader" in vars)) and (True)):
			define("owner_business_subheader", (augment("""You said that you own one or more businesses. Please provide details about this business below.""").primitive_value()))
		if ((not ("contractor_subheader" in vars)) and (("current_or_former" in vars))):
			define("contractor_subheader", (augment("""You said that your %s work is as an independent contractor. This means that you received a 1099 tax form from a business and did not have taxes withheld from your paycheck.""" % (current_or_former)).primitive_value()))
		if ((not ("business_subheader" in vars)) and (type((ternary((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()), (augment(owner_business_subheader) if ("owner_business_subheader" in vars) else Undefined()), (augment(contractor_subheader) if ("contractor_subheader" in vars) else Undefined())))) != type(Undefined()))):
			define("business_subheader", ((ternary((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()), (augment(owner_business_subheader) if ("owner_business_subheader" in vars) else Undefined()), (augment(contractor_subheader) if ("contractor_subheader" in vars) else Undefined()))).primitive_value()))
		if ((not ("owner_business_name_q" in vars)) and (True)):
			define("owner_business_name_q", (augment("""What\'s the name of your business?""").primitive_value()))
		if ((not ("contractor_name_q" in vars)) and (("current_or_former" in vars))):
			define("contractor_name_q", (augment("""What\'s the name of the %s business you contract with?""" % (current_or_former)).primitive_value()))
		if ((not ("business_name_q" in vars)) and (type((ternary((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()), (augment(owner_business_name_q) if ("owner_business_name_q" in vars) else Undefined()), (augment(contractor_name_q) if ("contractor_name_q" in vars) else Undefined())))) != type(Undefined()))):
			define("business_name_q", ((ternary((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()), (augment(owner_business_name_q) if ("owner_business_name_q" in vars) else Undefined()), (augment(contractor_name_q) if ("contractor_name_q" in vars) else Undefined()))).primitive_value()))
		if ((not ("contractor_years_q" in vars)) and (True)):
			define("contractor_years_q", (augment("""How many years have you done this type of work?""").primitive_value()))
		if ((not ("owner_years_q" in vars)) and (True)):
			define("owner_years_q", (augment("""How many years have you owned or been involved in this business?""").primitive_value()))
		if ((not ("business_years_q" in vars)) and (type((ternary((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()), (augment(owner_years_q) if ("owner_years_q" in vars) else Undefined()), (augment(contractor_years_q) if ("contractor_years_q" in vars) else Undefined())))) != type(Undefined()))):
			define("business_years_q", ((ternary((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()), (augment(owner_years_q) if ("owner_years_q" in vars) else Undefined()), (augment(contractor_years_q) if ("contractor_years_q" in vars) else Undefined()))).primitive_value()))
		if ((not ("contractor_upload_q" in vars)) and (("current_or_former" in vars))):
			define("contractor_upload_q", (augment("""If you have filed a tax return since your %s work as an independent contractor for this business, please upload the Schedule that you filed as part of your return.""" % (current_or_former)).primitive_value()))
		if ((not ("owner_upload_q" in vars)) and (True)):
			define("owner_upload_q", (augment("""Attach the Schedule C you completed for this business and submitted as part of your last tax return OR attach a statement showing the profit and loss  of this business for the last two years.""").primitive_value()))
		if ((not ("business_upload_q" in vars)) and (type((ternary((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()), (augment(owner_upload_q) if ("owner_upload_q" in vars) else Undefined()), (augment(contractor_upload_q) if ("contractor_upload_q" in vars) else Undefined())))) != type(Undefined()))):
			define("business_upload_q", ((ternary((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()), (augment(owner_upload_q) if ("owner_upload_q" in vars) else Undefined()), (augment(contractor_upload_q) if ("contractor_upload_q" in vars) else Undefined()))).primitive_value()))
		if ((not ("contractor_loop_q" in vars)) and (True)):
			define("contractor_loop_q", (augment("""Are you an independent contractor for another business?""").primitive_value()))
		if ((not ("owner_loop_q" in vars)) and (True)):
			define("owner_loop_q", (augment("""Do you have another business?""").primitive_value()))
		if ((not ("business_loop_q" in vars)) and (type((ternary((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()), (augment(owner_loop_q) if ("owner_loop_q" in vars) else Undefined()), (augment(contractor_loop_q) if ("contractor_loop_q" in vars) else Undefined())))) != type(Undefined()))):
			define("business_loop_q", ((ternary((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()), (augment(owner_loop_q) if ("owner_loop_q" in vars) else Undefined()), (augment(contractor_loop_q) if ("contractor_loop_q" in vars) else Undefined()))).primitive_value()))
		if ((not ("business1" in vars)) and (type(((((augment(employee_contractor) if ("employee_contractor" in vars) else Undefined()) == (augment("contractor")))).logical_or(((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()))))) != type(Undefined()))):
			define("business1", (((((augment(employee_contractor) if ("employee_contractor" in vars) else Undefined()) == (augment("contractor")))).logical_or(((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined())))).primitive_value()))
		if ((not ("percent_with_children" in vars)) and (type(((((augment(number_of_hours_with_children) if ("number_of_hours_with_children" in vars) else Undefined()) / ((augment(frequency_with_children) if ("frequency_with_children" in vars) else Undefined())))) * ((augment(100))))) != type(Undefined()))):
			define("percent_with_children", (((((augment(number_of_hours_with_children) if ("number_of_hours_with_children" in vars) else Undefined()) / ((augment(frequency_with_children) if ("frequency_with_children" in vars) else Undefined())))) * ((augment(100)))).primitive_value()))
		if ((not ("percent_spouse_with_children" in vars)) and (type(((augment(100) - ((augment(percent_with_children) if ("percent_with_children" in vars) else Undefined()))))) != type(Undefined()))):
			define("percent_spouse_with_children", (((augment(100) - ((augment(percent_with_children) if ("percent_with_children" in vars) else Undefined())))).primitive_value()))
		if ((not ("current_or_former" in vars)) and (type((ternary((augment(currently_employed) if ("currently_employed" in vars) else Undefined()), augment("current"), augment("most recent")))) != type(Undefined()))):
			define("current_or_former", ((ternary((augment(currently_employed) if ("currently_employed" in vars) else Undefined()), augment("current"), augment("most recent"))).primitive_value()))
		if ((not ("currently_employed" in vars)) and (type((((augment(employment) if ("employment" in vars) else Undefined()) == (augment("current"))))) != type(Undefined()))):
			define("currently_employed", ((((augment(employment) if ("employment" in vars) else Undefined()) == (augment("current")))).primitive_value()))
		if ((not ("formerly_employed" in vars)) and (type((((augment(employment) if ("employment" in vars) else Undefined()) == (augment("in past"))))) != type(Undefined()))):
			define("formerly_employed", ((((augment(employment) if ("employment" in vars) else Undefined()) == (augment("in past")))).primitive_value()))
		if ((not ("upload_current_or_former" in vars)) and (type((ternary((augment(currently_employed) if ("currently_employed" in vars) else Undefined()), augment("Please locate and upload copies of your pay stubs from the last two months."), augment("Please locate and upload copies of your pay stubs from the last two months of your most recent job.")))) != type(Undefined()))):
			define("upload_current_or_former", ((ternary((augment(currently_employed) if ("currently_employed" in vars) else Undefined()), augment("Please locate and upload copies of your pay stubs from the last two months."), augment("Please locate and upload copies of your pay stubs from the last two months of your most recent job."))).primitive_value()))
		if ((not ("___shortcut_633_false" in vars)) and (("all_investment_sources" in vars))):
			define("___shortcut_633_false", ((((augment(all_investment_sources["dividends/interest"]) if ("all_investment_sources" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_657_false" in vars)) and (("all_investment_sources" in vars))):
			define("___shortcut_657_false", ((((augment(all_investment_sources["other"]) if ("all_investment_sources" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_614_false" in vars)) and (("all_investment_sources" in vars))):
			define("___shortcut_614_false", ((((augment(all_investment_sources["rental property"]) if ("all_investment_sources" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_643_false" in vars)) and (("all_investment_sources" in vars))):
			define("___shortcut_643_false", ((((augment(all_investment_sources["trust"]) if ("all_investment_sources" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_48_false" in vars)) and (("asset_personal_property_checkmark" in vars))):
			define("___shortcut_48_false", ((((augment(asset_personal_property_checkmark) if ("asset_personal_property_checkmark" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_49_false" in vars)) and (("asset_real_property_checkmark" in vars))):
			define("___shortcut_49_false", ((((augment(asset_real_property_checkmark) if ("asset_real_property_checkmark" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_307_false" in vars)) and (("attorney_fees" in vars))):
			define("___shortcut_307_false", ((((augment(attorney_fees) if ("attorney_fees" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_244_false" in vars)) and (("business1" in vars))):
			define("___shortcut_244_false", ((((augment(business1) if ("business1" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_591_false" in vars)) and (("business2" in vars))):
			define("___shortcut_591_false", ((((augment(business2) if ("business2" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_595_false" in vars)) and (("business3" in vars))):
			define("___shortcut_595_false", ((((augment(business3) if ("business3" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_648_choice" in vars)) and (("business_role" in vars))):
			define("___shortcut_648_choice", ((((augment(business_role) if ("business_role" in vars) else Undefined()) == (augment("other"))).primitive_value())))
		if ((not ("___shortcut_620_choice" in vars)) and (("business_role" in vars))):
			define("___shortcut_620_choice", ((((augment(business_role) if ("business_role" in vars) else Undefined()) == (augment("owner"))).primitive_value())))
		if ((not ("___shortcut_631_choice" in vars)) and (("business_role" in vars))):
			define("___shortcut_631_choice", ((((augment(business_role) if ("business_role" in vars) else Undefined()) == (augment("partner"))).primitive_value())))
		if ((not ("___shortcut_640_choice" in vars)) and (("business_role2" in vars))):
			define("___shortcut_640_choice", ((((augment(business_role2) if ("business_role2" in vars) else Undefined()) == (augment("other"))).primitive_value())))
		if ((not ("___shortcut_623_choice" in vars)) and (("business_role2" in vars))):
			define("___shortcut_623_choice", ((((augment(business_role2) if ("business_role2" in vars) else Undefined()) == (augment("owner"))).primitive_value())))
		if ((not ("___shortcut_632_choice" in vars)) and (("business_role2" in vars))):
			define("___shortcut_632_choice", ((((augment(business_role2) if ("business_role2" in vars) else Undefined()) == (augment("partner"))).primitive_value())))
		if ((not ("___shortcut_647_choice" in vars)) and (("business_role3" in vars))):
			define("___shortcut_647_choice", ((((augment(business_role3) if ("business_role3" in vars) else Undefined()) == (augment("other"))).primitive_value())))
		if ((not ("___shortcut_619_choice" in vars)) and (("business_role3" in vars))):
			define("___shortcut_619_choice", ((((augment(business_role3) if ("business_role3" in vars) else Undefined()) == (augment("owner"))).primitive_value())))
		if ((not ("___shortcut_625_choice" in vars)) and (("business_role3" in vars))):
			define("___shortcut_625_choice", ((((augment(business_role3) if ("business_role3" in vars) else Undefined()) == (augment("partner"))).primitive_value())))
		if ((not ("___shortcut_129_false" in vars)) and (("character_limit_additional_information_about_support" in vars))):
			define("___shortcut_129_false", ((((augment(character_limit_additional_information_about_support) if ("character_limit_additional_information_about_support" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_116_false" in vars)) and (("character_limit_income_change_description" in vars))):
			define("___shortcut_116_false", ((((augment(character_limit_income_change_description) if ("character_limit_income_change_description" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_110_false" in vars)) and (("character_limit_other_party_income_based_on" in vars))):
			define("___shortcut_110_false", ((((augment(character_limit_other_party_income_based_on) if ("character_limit_other_party_income_based_on" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_123_false" in vars)) and (("character_limit_other_relationship_children_name_and_ages" in vars))):
			define("___shortcut_123_false", ((((augment(character_limit_other_relationship_children_name_and_ages) if ("character_limit_other_relationship_children_name_and_ages" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_113_false" in vars)) and (("character_limit_source_of_other_income" in vars))):
			define("___shortcut_113_false", ((((augment(character_limit_source_of_other_income) if ("character_limit_source_of_other_income" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_126_false" in vars)) and (("character_limit_special_hardship_explanation" in vars))):
			define("___shortcut_126_false", ((((augment(character_limit_special_hardship_explanation) if ("character_limit_special_hardship_explanation" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_544_false" in vars)) and (("commission_extra_compensation1" in vars))):
			define("___shortcut_544_false", ((((augment(commission_extra_compensation1) if ("commission_extra_compensation1" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_549_false" in vars)) and (("commission_extra_compensation2" in vars))):
			define("___shortcut_549_false", ((((augment(commission_extra_compensation2) if ("commission_extra_compensation2" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_522_false" in vars)) and (("commission_extra_compensation3" in vars))):
			define("___shortcut_522_false", ((((augment(commission_extra_compensation3) if ("commission_extra_compensation3" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_134_false" in vars)) and (("completed_college" in vars))):
			define("___shortcut_134_false", ((((augment(completed_college) if ("completed_college" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_135_false" in vars)) and (("completed_graduate" in vars))):
			define("___shortcut_135_false", ((((augment(completed_graduate) if ("completed_graduate" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_12_false" in vars)) and (("current_or_former_employment" in vars))):
			define("___shortcut_12_false", ((((augment(current_or_former_employment) if ("current_or_former_employment" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_248_false" in vars)) and (("currently_employed" in vars))):
			define("___shortcut_248_false", ((((augment(currently_employed) if ("currently_employed" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_535_false" in vars)) and (("debt2" in vars))):
			define("___shortcut_535_false", ((((augment(debt2) if ("debt2" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_533_false" in vars)) and (("debt3" in vars))):
			define("___shortcut_533_false", ((((augment(debt3) if ("debt3" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_550_false" in vars)) and (("debt4" in vars))):
			define("___shortcut_550_false", ((((augment(debt4) if ("debt4" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_546_false" in vars)) and (("debt5" in vars))):
			define("___shortcut_546_false", ((((augment(debt5) if ("debt5" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_548_false" in vars)) and (("debt6" in vars))):
			define("___shortcut_548_false", ((((augment(debt6) if ("debt6" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_537_false" in vars)) and (("debt7" in vars))):
			define("___shortcut_537_false", ((((augment(debt7) if ("debt7" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_551_false" in vars)) and (("debt8" in vars))):
			define("___shortcut_551_false", ((((augment(debt8) if ("debt8" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_613_false" in vars)) and (("deduction_spousal_tax" in vars))):
			define("___shortcut_613_false", ((((augment(deduction_spousal_tax["deductible"]) if ("deduction_spousal_tax" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_685_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_685_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(0))).primitive_value())))
		if ((not ("___shortcut_684_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_684_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(1))).primitive_value())))
		if ((not ("___shortcut_672_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_672_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(10))).primitive_value())))
		if ((not ("___shortcut_669_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_669_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(11))).primitive_value())))
		if ((not ("___shortcut_665_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_665_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(12))).primitive_value())))
		if ((not ("___shortcut_663_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_663_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(13))).primitive_value())))
		if ((not ("___shortcut_660_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_660_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(14))).primitive_value())))
		if ((not ("___shortcut_652_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_652_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(15))).primitive_value())))
		if ((not ("___shortcut_642_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_642_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(16))).primitive_value())))
		if ((not ("___shortcut_637_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_637_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(17))).primitive_value())))
		if ((not ("___shortcut_610_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_610_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(18))).primitive_value())))
		if ((not ("___shortcut_683_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_683_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(2))).primitive_value())))
		if ((not ("___shortcut_682_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_682_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(3))).primitive_value())))
		if ((not ("___shortcut_681_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_681_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(4))).primitive_value())))
		if ((not ("___shortcut_680_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_680_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(5))).primitive_value())))
		if ((not ("___shortcut_679_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_679_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(6))).primitive_value())))
		if ((not ("___shortcut_678_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_678_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(7))).primitive_value())))
		if ((not ("___shortcut_677_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_677_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(8))).primitive_value())))
		if ((not ("___shortcut_673_choice" in vars)) and (("education_level" in vars))):
			define("___shortcut_673_choice", ((((augment(education_level) if ("education_level" in vars) else Undefined()) == (augment(9))).primitive_value())))
		if ((not ("___shortcut_487_false" in vars)) and (("education_license" in vars))):
			define("___shortcut_487_false", ((((augment(education_license) if ("education_license" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_558_false" in vars)) and (("education_vocational" in vars))):
			define("___shortcut_558_false", ((((augment(education_vocational) if ("education_vocational" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_639_choice" in vars)) and (("employee_contractor" in vars))):
			define("___shortcut_639_choice", ((((augment(employee_contractor) if ("employee_contractor" in vars) else Undefined()) == (augment("contractor"))).primitive_value())))
		if ((not ("___shortcut_612_choice" in vars)) and (("employee_contractor" in vars))):
			define("___shortcut_612_choice", ((((augment(employee_contractor) if ("employee_contractor" in vars) else Undefined()) == (augment("employee"))).primitive_value())))
		if ((not ("___shortcut_629_choice" in vars)) and (("employment" in vars))):
			define("___shortcut_629_choice", ((((augment(employment) if ("employment" in vars) else Undefined()) == (augment("current"))).primitive_value())))
		if ((not ("___shortcut_622_choice" in vars)) and (("employment" in vars))):
			define("___shortcut_622_choice", ((((augment(employment) if ("employment" in vars) else Undefined()) == (augment("in past"))).primitive_value())))
		if ((not ("___shortcut_262_false" in vars)) and (("ever_employed" in vars))):
			define("___shortcut_262_false", ((((augment(ever_employed) if ("ever_employed" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_658_false" in vars)) and (("expense_types" in vars))):
			define("___shortcut_658_false", ((((augment(expense_types["child support"]) if ("expense_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_661_false" in vars)) and (("expense_types" in vars))):
			define("___shortcut_661_false", ((((augment(expense_types["children related to case"]) if ("expense_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_664_false" in vars)) and (("expense_types" in vars))):
			define("___shortcut_664_false", ((((augment(expense_types["children unrelated to case"]) if ("expense_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_636_false" in vars)) and (("expense_types" in vars))):
			define("___shortcut_636_false", ((((augment(expense_types["home mortgage"]) if ("expense_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_616_false" in vars)) and (("expense_types" in vars))):
			define("___shortcut_616_false", ((((augment(expense_types["home rental"]) if ("expense_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_674_false" in vars)) and (("expense_types" in vars))):
			define("___shortcut_674_false", ((((augment(expense_types["installment/debt"]) if ("expense_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_653_false" in vars)) and (("expense_types" in vars))):
			define("___shortcut_653_false", ((((augment(expense_types["partner support"]) if ("expense_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_651_false" in vars)) and (("expense_types" in vars))):
			define("___shortcut_651_false", ((((augment(expense_types["spousal support"]) if ("expense_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_638_choice" in vars)) and (("expenses_listed" in vars))):
			define("___shortcut_638_choice", ((((augment(expenses_listed) if ("expenses_listed" in vars) else Undefined()) == (augment("actual"))).primitive_value())))
		if ((not ("___shortcut_609_choice" in vars)) and (("expenses_listed" in vars))):
			define("___shortcut_609_choice", ((((augment(expenses_listed) if ("expenses_listed" in vars) else Undefined()) == (augment("estimated"))).primitive_value())))
		if ((not ("___shortcut_649_choice" in vars)) and (("expenses_listed" in vars))):
			define("___shortcut_649_choice", ((((augment(expenses_listed) if ("expenses_listed" in vars) else Undefined()) == (augment("proposed"))).primitive_value())))
		if ((not ("___shortcut_271_false" in vars)) and (("expenses_other" in vars))):
			define("___shortcut_271_false", ((((augment(expenses_other) if ("expenses_other" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_139_false" in vars)) and (("filed_taxes" in vars))):
			define("___shortcut_139_false", ((((augment(filed_taxes) if ("filed_taxes" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_5_false" in vars)) and (("filer_is_petitioner" in vars))):
			define("___shortcut_5_false", ((((augment(filer_is_petitioner) if ("filer_is_petitioner" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_617_choice" in vars)) and (("filer_party" in vars))):
			define("___shortcut_617_choice", ((((augment(filer_party) if ("filer_party" in vars) else Undefined()) == (augment("Petitioner / Plaintiff"))).primitive_value())))
		if ((not ("___shortcut_630_choice" in vars)) and (("filer_party" in vars))):
			define("___shortcut_630_choice", ((((augment(filer_party) if ("filer_party" in vars) else Undefined()) == (augment("Respondent / Defendant"))).primitive_value())))
		if ((not ("___shortcut_249_false" in vars)) and (("formerly_employed" in vars))):
			define("___shortcut_249_false", ((((augment(formerly_employed) if ("formerly_employed" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_650_choice" in vars)) and (("frequency_with_children" in vars))):
			define("___shortcut_650_choice", ((((augment(frequency_with_children) if ("frequency_with_children" in vars) else Undefined()) == (augment(168))).primitive_value())))
		if ((not ("___shortcut_655_choice" in vars)) and (("frequency_with_children" in vars))):
			define("___shortcut_655_choice", ((((augment(frequency_with_children) if ("frequency_with_children" in vars) else Undefined()) == (augment(24))).primitive_value())))
		if ((not ("___shortcut_624_choice" in vars)) and (("frequency_with_children" in vars))):
			define("___shortcut_624_choice", ((((augment(frequency_with_children) if ("frequency_with_children" in vars) else Undefined()) == (augment(336))).primitive_value())))
		if ((not ("___shortcut_611_choice" in vars)) and (("frequency_with_children" in vars))):
			define("___shortcut_611_choice", ((((augment(frequency_with_children) if ("frequency_with_children" in vars) else Undefined()) == (augment(720))).primitive_value())))
		if ((not ("___shortcut_213_false" in vars)) and (("has_home" in vars))):
			define("___shortcut_213_false", ((((augment(has_home) if ("has_home" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_555_false" in vars)) and (("have_children_with_spouse" in vars))):
			define("___shortcut_555_false", ((((augment(have_children_with_spouse) if ("have_children_with_spouse" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_309_false" in vars)) and (("health1" in vars))):
			define("___shortcut_309_false", ((((augment(health1) if ("health1" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_263_false" in vars)) and (("health2" in vars))):
			define("___shortcut_263_false", ((((augment(health2) if ("health2" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_287_false" in vars)) and (("health3" in vars))):
			define("___shortcut_287_false", ((((augment(health3) if ("health3" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_133_false" in vars)) and (("high_school_incomplete" in vars))):
			define("___shortcut_133_false", ((((augment(high_school_incomplete) if ("high_school_incomplete" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_310_false" in vars)) and (("household_size1" in vars))):
			define("___shortcut_310_false", ((((augment(household_size1) if ("household_size1" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_553_false" in vars)) and (("household_size2" in vars))):
			define("___shortcut_553_false", ((((augment(household_size2) if ("household_size2" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_532_false" in vars)) and (("household_size3" in vars))):
			define("___shortcut_532_false", ((((augment(household_size3) if ("household_size3" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_530_false" in vars)) and (("household_size4" in vars))):
			define("___shortcut_530_false", ((((augment(household_size4) if ("household_size4" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_538_false" in vars)) and (("household_size5" in vars))):
			define("___shortcut_538_false", ((((augment(household_size5) if ("household_size5" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_528_false" in vars)) and (("household_size6" in vars))):
			define("___shortcut_528_false", ((((augment(household_size6) if ("household_size6" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_534_false" in vars)) and (("household_size7" in vars))):
			define("___shortcut_534_false", ((((augment(household_size7) if ("household_size7" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_529_false" in vars)) and (("household_size8" in vars))):
			define("___shortcut_529_false", ((((augment(household_size8) if ("household_size8" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_497_false" in vars)) and (("householdpayexpenses1" in vars))):
			define("___shortcut_497_false", ((((augment(householdpayexpenses1) if ("householdpayexpenses1" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_492_false" in vars)) and (("householdpayexpenses2" in vars))):
			define("___shortcut_492_false", ((((augment(householdpayexpenses2) if ("householdpayexpenses2" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_514_false" in vars)) and (("householdpayexpenses3" in vars))):
			define("___shortcut_514_false", ((((augment(householdpayexpenses3) if ("householdpayexpenses3" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_499_false" in vars)) and (("householdpayexpenses4" in vars))):
			define("___shortcut_499_false", ((((augment(householdpayexpenses4) if ("householdpayexpenses4" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_498_false" in vars)) and (("householdpayexpenses5" in vars))):
			define("___shortcut_498_false", ((((augment(householdpayexpenses5) if ("householdpayexpenses5" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_491_false" in vars)) and (("householdpayexpenses6" in vars))):
			define("___shortcut_491_false", ((((augment(householdpayexpenses6) if ("householdpayexpenses6" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_506_false" in vars)) and (("householdpayexpenses7" in vars))):
			define("___shortcut_506_false", ((((augment(householdpayexpenses7) if ("householdpayexpenses7" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_512_false" in vars)) and (("householdpayexpenses8" in vars))):
			define("___shortcut_512_false", ((((augment(householdpayexpenses8) if ("householdpayexpenses8" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_275_false" in vars)) and (("how_to_begin" in vars))):
			define("___shortcut_275_false", ((((augment(how_to_begin) if ("how_to_begin" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_572_false" in vars)) and (("income_changed" in vars))):
			define("___shortcut_572_false", ((((augment(income_changed) if ("income_changed" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_646_false" in vars)) and (("income_disability_source" in vars))):
			define("___shortcut_646_false", ((((augment(income_disability_source["private insurance"]) if ("income_disability_source" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_618_false" in vars)) and (("income_disability_source" in vars))):
			define("___shortcut_618_false", ((((augment(income_disability_source["social security"]) if ("income_disability_source" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_627_false" in vars)) and (("income_disability_source" in vars))):
			define("___shortcut_627_false", ((((augment(income_disability_source["state disability"]) if ("income_disability_source" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_523_false" in vars)) and (("income_one_time" in vars))):
			define("___shortcut_523_false", ((((augment(income_one_time) if ("income_one_time" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_615_false" in vars)) and (("income_partner_support_source" in vars))):
			define("___shortcut_615_false", ((((augment(income_partner_support_source["current"]) if ("income_partner_support_source" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_626_false" in vars)) and (("income_partner_support_source" in vars))):
			define("___shortcut_626_false", ((((augment(income_partner_support_source["different"]) if ("income_partner_support_source" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_621_false" in vars)) and (("income_spousal_support_source" in vars))):
			define("___shortcut_621_false", ((((augment(income_spousal_support_source["current"]) if ("income_spousal_support_source" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_634_false" in vars)) and (("income_spousal_support_source" in vars))):
			define("___shortcut_634_false", ((((augment(income_spousal_support_source["different"]) if ("income_spousal_support_source" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_644_false" in vars)) and (("income_spousal_support_source" in vars))):
			define("___shortcut_644_false", ((((augment(income_spousal_support_source["federally taxable"]) if ("income_spousal_support_source" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_656_false" in vars)) and (("income_types" in vars))):
			define("___shortcut_656_false", ((((augment(income_types["disability"]) if ("income_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_675_false" in vars)) and (("income_types" in vars))):
			define("___shortcut_675_false", ((((augment(income_types["investments"]) if ("income_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_676_false" in vars)) and (("income_types" in vars))):
			define("___shortcut_676_false", ((((augment(income_types["other"]) if ("income_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_666_false" in vars)) and (("income_types" in vars))):
			define("___shortcut_666_false", ((((augment(income_types["partner"]) if ("income_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_671_false" in vars)) and (("income_types" in vars))):
			define("___shortcut_671_false", ((((augment(income_types["pension"]) if ("income_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_628_false" in vars)) and (("income_types" in vars))):
			define("___shortcut_628_false", ((((augment(income_types["public benefits"]) if ("income_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_607_false" in vars)) and (("income_types" in vars))):
			define("___shortcut_607_false", ((((augment(income_types["self-employment income"]) if ("income_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_641_false" in vars)) and (("income_types" in vars))):
			define("___shortcut_641_false", ((((augment(income_types["social security"]) if ("income_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_668_false" in vars)) and (("income_types" in vars))):
			define("___shortcut_668_false", ((((augment(income_types["spousal"]) if ("income_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_659_false" in vars)) and (("income_types" in vars))):
			define("___shortcut_659_false", ((((augment(income_types["unemployment"]) if ("income_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_662_false" in vars)) and (("income_types" in vars))):
			define("___shortcut_662_false", ((((augment(income_types["workers comp"]) if ("income_types" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_545_false" in vars)) and (("insurance_for_children_via_job" in vars))):
			define("___shortcut_545_false", ((((augment(insurance_for_children_via_job) if ("insurance_for_children_via_job" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_598_false" in vars)) and (("job_related_expenses1" in vars))):
			define("___shortcut_598_false", ((((augment(job_related_expenses1) if ("job_related_expenses1" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_592_false" in vars)) and (("job_related_expenses2" in vars))):
			define("___shortcut_592_false", ((((augment(job_related_expenses2) if ("job_related_expenses2" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_593_false" in vars)) and (("job_related_expenses3" in vars))):
			define("___shortcut_593_false", ((((augment(job_related_expenses3) if ("job_related_expenses3" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_428_false" in vars)) and (("other_claimant" in vars))):
			define("___shortcut_428_false", ((((augment(other_claimant) if ("other_claimant" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_420_false" in vars)) and (("overtime_extra_compensation1" in vars))):
			define("___shortcut_420_false", ((((augment(overtime_extra_compensation1) if ("overtime_extra_compensation1" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_421_false" in vars)) and (("overtime_extra_compensation2" in vars))):
			define("___shortcut_421_false", ((((augment(overtime_extra_compensation2) if ("overtime_extra_compensation2" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_422_false" in vars)) and (("overtime_extra_compensation3" in vars))):
			define("___shortcut_422_false", ((((augment(overtime_extra_compensation3) if ("overtime_extra_compensation3" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_225_false" in vars)) and (("past_employed" in vars))):
			define("___shortcut_225_false", ((((augment(past_employed) if ("past_employed" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_132_false" in vars)) and (("per_month_checked" in vars))):
			define("___shortcut_132_false", ((((augment(per_month_checked) if ("per_month_checked" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_517_false" in vars)) and (("retirement1" in vars))):
			define("___shortcut_517_false", ((((augment(retirement1) if ("retirement1" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_513_false" in vars)) and (("retirement2" in vars))):
			define("___shortcut_513_false", ((((augment(retirement2) if ("retirement2" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_510_false" in vars)) and (("retirement3" in vars))):
			define("___shortcut_510_false", ((((augment(retirement3) if ("retirement3" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_578_false" in vars)) and (("second_job" in vars))):
			define("___shortcut_578_false", ((((augment(second_job) if ("second_job" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_689_false" in vars)) and (("special_hardships" in vars))):
			define("___shortcut_689_false", ((((augment(special_hardships["Extraordinary Health"]) if ("special_hardships" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_688_false" in vars)) and (("special_hardships" in vars))):
			define("___shortcut_688_false", ((((augment(special_hardships["Major Losses"]) if ("special_hardships" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_427_false" in vars)) and (("tax_state_ca" in vars))):
			define("___shortcut_427_false", ((((augment(tax_state_ca) if ("tax_state_ca" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_635_choice" in vars)) and (("tax_status" in vars))):
			define("___shortcut_635_choice", ((((augment(tax_status) if ("tax_status" in vars) else Undefined()) == (augment("household head"))).primitive_value())))
		if ((not ("___shortcut_654_choice" in vars)) and (("tax_status" in vars))):
			define("___shortcut_654_choice", ((((augment(tax_status) if ("tax_status" in vars) else Undefined()) == (augment("married filing jointly"))).primitive_value())))
		if ((not ("___shortcut_645_choice" in vars)) and (("tax_status" in vars))):
			define("___shortcut_645_choice", ((((augment(tax_status) if ("tax_status" in vars) else Undefined()) == (augment("married filing separately"))).primitive_value())))
		if ((not ("___shortcut_608_choice" in vars)) and (("tax_status" in vars))):
			define("___shortcut_608_choice", ((((augment(tax_status) if ("tax_status" in vars) else Undefined()) == (augment("single"))).primitive_value())))
		if ((not ("___shortcut_589_false" in vars)) and (("third_job" in vars))):
			define("___shortcut_589_false", ((((augment(third_job) if ("third_job" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_387_false" in vars)) and (("union1" in vars))):
			define("___shortcut_387_false", ((((augment(union1) if ("union1" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_429_false" in vars)) and (("union2" in vars))):
			define("___shortcut_429_false", ((((augment(union2) if ("union2" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_440_false" in vars)) and (("union3" in vars))):
			define("___shortcut_440_false", ((((augment(union3) if ("union3" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_567_false" in vars)) and (("variable_11" in vars))):
			define("___shortcut_567_false", ((((augment(variable_11) if ("variable_11" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_326_false" in vars)) and (("variable_36" in vars))):
			define("___shortcut_326_false", ((((augment(variable_36) if ("variable_36" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_405_false" in vars)) and (("variable_4" in vars))):
			define("___shortcut_405_false", ((((augment(variable_4) if ("variable_4" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_559_false" in vars)) and (("variable_5" in vars))):
			define("___shortcut_559_false", ((((augment(variable_5) if ("variable_5" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_282_false" in vars)) and (("welcome" in vars))):
			define("___shortcut_282_false", ((((augment(welcome) if ("welcome" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
		if ((not ("___shortcut_137_false" in vars)) and (("years_of_college_makes_sense" in vars))):
			define("___shortcut_137_false", ((((augment(years_of_college_makes_sense) if ("years_of_college_makes_sense" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
---
initial: True
code: |
	___define_until_idempotent()
---
code: |
	___shortcut_633_false = (all_investment_sources["dividends/interest"] == False)
---
code: |
	___shortcut_657_false = (all_investment_sources["other"] == False)
---
code: |
	___shortcut_614_false = (all_investment_sources["rental property"] == False)
---
code: |
	___shortcut_643_false = (all_investment_sources["trust"] == False)
---
code: |
	___shortcut_48_false = (asset_personal_property_checkmark == False)
---
code: |
	___shortcut_49_false = (asset_real_property_checkmark == False)
---
code: |
	___shortcut_307_false = (attorney_fees == False)
---
code: |
	___shortcut_244_false = (business1 == False)
---
code: |
	___shortcut_591_false = (business2 == False)
---
code: |
	___shortcut_595_false = (business3 == False)
---
code: |
	___shortcut_648_choice = (business_role == "other")
---
code: |
	___shortcut_620_choice = (business_role == "owner")
---
code: |
	___shortcut_631_choice = (business_role == "partner")
---
code: |
	___shortcut_640_choice = (business_role2 == "other")
---
code: |
	___shortcut_623_choice = (business_role2 == "owner")
---
code: |
	___shortcut_632_choice = (business_role2 == "partner")
---
code: |
	___shortcut_647_choice = (business_role3 == "other")
---
code: |
	___shortcut_619_choice = (business_role3 == "owner")
---
code: |
	___shortcut_625_choice = (business_role3 == "partner")
---
code: |
	___shortcut_129_false = (character_limit_additional_information_about_support == False)
---
code: |
	___shortcut_116_false = (character_limit_income_change_description == False)
---
code: |
	___shortcut_110_false = (character_limit_other_party_income_based_on == False)
---
code: |
	___shortcut_123_false = (character_limit_other_relationship_children_name_and_ages == False)
---
code: |
	___shortcut_113_false = (character_limit_source_of_other_income == False)
---
code: |
	___shortcut_126_false = (character_limit_special_hardship_explanation == False)
---
code: |
	___shortcut_544_false = (commission_extra_compensation1 == False)
---
code: |
	___shortcut_549_false = (commission_extra_compensation2 == False)
---
code: |
	___shortcut_522_false = (commission_extra_compensation3 == False)
---
code: |
	___shortcut_134_false = (completed_college == False)
---
code: |
	___shortcut_135_false = (completed_graduate == False)
---
code: |
	___shortcut_12_false = (current_or_former_employment == False)
---
code: |
	___shortcut_248_false = (currently_employed == False)
---
code: |
	___shortcut_535_false = (debt2 == False)
---
code: |
	___shortcut_533_false = (debt3 == False)
---
code: |
	___shortcut_550_false = (debt4 == False)
---
code: |
	___shortcut_546_false = (debt5 == False)
---
code: |
	___shortcut_548_false = (debt6 == False)
---
code: |
	___shortcut_537_false = (debt7 == False)
---
code: |
	___shortcut_551_false = (debt8 == False)
---
code: |
	___shortcut_613_false = (deduction_spousal_tax["deductible"] == False)
---
code: |
	___shortcut_685_choice = (education_level == 0)
---
code: |
	___shortcut_684_choice = (education_level == 1)
---
code: |
	___shortcut_672_choice = (education_level == 10)
---
code: |
	___shortcut_669_choice = (education_level == 11)
---
code: |
	___shortcut_665_choice = (education_level == 12)
---
code: |
	___shortcut_663_choice = (education_level == 13)
---
code: |
	___shortcut_660_choice = (education_level == 14)
---
code: |
	___shortcut_652_choice = (education_level == 15)
---
code: |
	___shortcut_642_choice = (education_level == 16)
---
code: |
	___shortcut_637_choice = (education_level == 17)
---
code: |
	___shortcut_610_choice = (education_level == 18)
---
code: |
	___shortcut_683_choice = (education_level == 2)
---
code: |
	___shortcut_682_choice = (education_level == 3)
---
code: |
	___shortcut_681_choice = (education_level == 4)
---
code: |
	___shortcut_680_choice = (education_level == 5)
---
code: |
	___shortcut_679_choice = (education_level == 6)
---
code: |
	___shortcut_678_choice = (education_level == 7)
---
code: |
	___shortcut_677_choice = (education_level == 8)
---
code: |
	___shortcut_673_choice = (education_level == 9)
---
code: |
	___shortcut_487_false = (education_license == False)
---
code: |
	___shortcut_558_false = (education_vocational == False)
---
code: |
	___shortcut_639_choice = (employee_contractor == "contractor")
---
code: |
	___shortcut_612_choice = (employee_contractor == "employee")
---
code: |
	___shortcut_629_choice = (employment == "current")
---
code: |
	___shortcut_622_choice = (employment == "in past")
---
code: |
	___shortcut_262_false = (ever_employed == False)
---
code: |
	___shortcut_658_false = (expense_types["child support"] == False)
---
code: |
	___shortcut_661_false = (expense_types["children related to case"] == False)
---
code: |
	___shortcut_664_false = (expense_types["children unrelated to case"] == False)
---
code: |
	___shortcut_636_false = (expense_types["home mortgage"] == False)
---
code: |
	___shortcut_616_false = (expense_types["home rental"] == False)
---
code: |
	___shortcut_674_false = (expense_types["installment/debt"] == False)
---
code: |
	___shortcut_653_false = (expense_types["partner support"] == False)
---
code: |
	___shortcut_651_false = (expense_types["spousal support"] == False)
---
code: |
	___shortcut_638_choice = (expenses_listed == "actual")
---
code: |
	___shortcut_609_choice = (expenses_listed == "estimated")
---
code: |
	___shortcut_649_choice = (expenses_listed == "proposed")
---
code: |
	___shortcut_271_false = (expenses_other == False)
---
code: |
	___shortcut_139_false = (filed_taxes == False)
---
code: |
	___shortcut_5_false = (filer_is_petitioner == False)
---
code: |
	___shortcut_617_choice = (filer_party == "Petitioner / Plaintiff")
---
code: |
	___shortcut_630_choice = (filer_party == "Respondent / Defendant")
---
code: |
	___shortcut_249_false = (formerly_employed == False)
---
code: |
	___shortcut_650_choice = (frequency_with_children == 168)
---
code: |
	___shortcut_655_choice = (frequency_with_children == 24)
---
code: |
	___shortcut_624_choice = (frequency_with_children == 336)
---
code: |
	___shortcut_611_choice = (frequency_with_children == 720)
---
code: |
	___shortcut_213_false = (has_home == False)
---
code: |
	___shortcut_555_false = (have_children_with_spouse == False)
---
code: |
	___shortcut_309_false = (health1 == False)
---
code: |
	___shortcut_263_false = (health2 == False)
---
code: |
	___shortcut_287_false = (health3 == False)
---
code: |
	___shortcut_133_false = (high_school_incomplete == False)
---
code: |
	___shortcut_310_false = (household_size1 == False)
---
code: |
	___shortcut_553_false = (household_size2 == False)
---
code: |
	___shortcut_532_false = (household_size3 == False)
---
code: |
	___shortcut_530_false = (household_size4 == False)
---
code: |
	___shortcut_538_false = (household_size5 == False)
---
code: |
	___shortcut_528_false = (household_size6 == False)
---
code: |
	___shortcut_534_false = (household_size7 == False)
---
code: |
	___shortcut_529_false = (household_size8 == False)
---
code: |
	___shortcut_497_false = (householdpayexpenses1 == False)
---
code: |
	___shortcut_492_false = (householdpayexpenses2 == False)
---
code: |
	___shortcut_514_false = (householdpayexpenses3 == False)
---
code: |
	___shortcut_499_false = (householdpayexpenses4 == False)
---
code: |
	___shortcut_498_false = (householdpayexpenses5 == False)
---
code: |
	___shortcut_491_false = (householdpayexpenses6 == False)
---
code: |
	___shortcut_506_false = (householdpayexpenses7 == False)
---
code: |
	___shortcut_512_false = (householdpayexpenses8 == False)
---
code: |
	___shortcut_275_false = (how_to_begin == False)
---
code: |
	___shortcut_572_false = (income_changed == False)
---
code: |
	___shortcut_646_false = (income_disability_source["private insurance"] == False)
---
code: |
	___shortcut_618_false = (income_disability_source["social security"] == False)
---
code: |
	___shortcut_627_false = (income_disability_source["state disability"] == False)
---
code: |
	___shortcut_523_false = (income_one_time == False)
---
code: |
	___shortcut_615_false = (income_partner_support_source["current"] == False)
---
code: |
	___shortcut_626_false = (income_partner_support_source["different"] == False)
---
code: |
	___shortcut_621_false = (income_spousal_support_source["current"] == False)
---
code: |
	___shortcut_634_false = (income_spousal_support_source["different"] == False)
---
code: |
	___shortcut_644_false = (income_spousal_support_source["federally taxable"] == False)
---
code: |
	___shortcut_656_false = (income_types["disability"] == False)
---
code: |
	___shortcut_675_false = (income_types["investments"] == False)
---
code: |
	___shortcut_676_false = (income_types["other"] == False)
---
code: |
	___shortcut_666_false = (income_types["partner"] == False)
---
code: |
	___shortcut_671_false = (income_types["pension"] == False)
---
code: |
	___shortcut_628_false = (income_types["public benefits"] == False)
---
code: |
	___shortcut_607_false = (income_types["self-employment income"] == False)
---
code: |
	___shortcut_641_false = (income_types["social security"] == False)
---
code: |
	___shortcut_668_false = (income_types["spousal"] == False)
---
code: |
	___shortcut_659_false = (income_types["unemployment"] == False)
---
code: |
	___shortcut_662_false = (income_types["workers comp"] == False)
---
code: |
	___shortcut_545_false = (insurance_for_children_via_job == False)
---
code: |
	___shortcut_598_false = (job_related_expenses1 == False)
---
code: |
	___shortcut_592_false = (job_related_expenses2 == False)
---
code: |
	___shortcut_593_false = (job_related_expenses3 == False)
---
code: |
	___shortcut_428_false = (other_claimant == False)
---
code: |
	___shortcut_420_false = (overtime_extra_compensation1 == False)
---
code: |
	___shortcut_421_false = (overtime_extra_compensation2 == False)
---
code: |
	___shortcut_422_false = (overtime_extra_compensation3 == False)
---
code: |
	___shortcut_225_false = (past_employed == False)
---
code: |
	___shortcut_132_false = (per_month_checked == False)
---
code: |
	___shortcut_517_false = (retirement1 == False)
---
code: |
	___shortcut_513_false = (retirement2 == False)
---
code: |
	___shortcut_510_false = (retirement3 == False)
---
code: |
	___shortcut_578_false = (second_job == False)
---
code: |
	___shortcut_689_false = (special_hardships["Extraordinary Health"] == False)
---
code: |
	___shortcut_688_false = (special_hardships["Major Losses"] == False)
---
code: |
	___shortcut_427_false = (tax_state_ca == False)
---
code: |
	___shortcut_635_choice = (tax_status == "household head")
---
code: |
	___shortcut_654_choice = (tax_status == "married filing jointly")
---
code: |
	___shortcut_645_choice = (tax_status == "married filing separately")
---
code: |
	___shortcut_608_choice = (tax_status == "single")
---
code: |
	___shortcut_589_false = (third_job == False)
---
code: |
	___shortcut_387_false = (union1 == False)
---
code: |
	___shortcut_429_false = (union2 == False)
---
code: |
	___shortcut_440_false = (union3 == False)
---
code: |
	___shortcut_567_false = (variable_11 == False)
---
code: |
	___shortcut_326_false = (variable_36 == False)
---
code: |
	___shortcut_405_false = (variable_4 == False)
---
code: |
	___shortcut_559_false = (variable_5 == False)
---
code: |
	___shortcut_282_false = (welcome == False)
---
code: |
	___shortcut_137_false = (years_of_college_makes_sense == False)
---
features:
	debug: False
---
metadata:
	title: |
		JCC FL-150 Prototype App Version 1.3 copy
---
mandatory: |
	True
question: ''
subquestion: |
	# **JCC Financial Disclosures Toolkit**
	> _The purpose of the financial disclosure process is to share a clear, up-to-date summary of your financial situation. This includes what you earn, what you own, and living expenses. Sharing a clear financial picture with the Court and your spouse is very important. Accurate answers make it easier to negotiate an end to the divorce. This is often the first impression the Court has of you. If you share incorrect information about your financial situation it can delay your divorce and endanger your property._


	**How we can help**


	Our step-by-step tool will save you time and headache by asking you a series of simple questions about your assets, debts, income, and expenses. Based on your responses, our tool will then auto-complete the required financial disclosure forms.
field: welcome

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	True
question: ''
subquestion: |
	# **How to Begin:**
	# **Gather the Right Information**
	There are five categories of information you will need to gather in order to auto-complete your required forms. Before you get started, take a moment to locate as much of the following information as possible.

	> _**Can't locate the info right now?** We will help you keep track of what you need to complete this process._
	**You will need current infomation about:**

	- **YOU:**  Information personal to you, including contact details and education history.
	- **YOUR HOUSEHOLD:** Details about the people you live with, including their income as well as child care arrangements and expenses (if applicablle)
	- **YOUR INCOME:** Information about current or previous employment income and all sources of income, including pay stubs and your most recent tax return.
	- **YOUR ASSETS:**  Estimated value of assets, including cars, furniture, real estate. As well information about any debt include mortagages and loans.
	- **YOUR EXPENSES:** Estimated monthly expenses for rent/mortgage, debts and installment payments,  food/household supplies, laundry, utilities, cellphone, car/transport, credit card debt, medical bills.
field: how_to_begin

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	True
question: ''
subquestion: |
	# Your Contact Information
fields:
	- "What's your full name?": party_name
		datatype: text
		required: true

	- "How old are you?": party_age
		datatype: integer
		required: true

	- "Phone Number": party_phone
		datatype: text
		required: true

	- "Email address?": party_email
		datatype: email
		required: false

	- "Street Address? Or best address to receive mail about your case.": party_street_address
		datatype: text
		required: true

	- "City": party_city
		datatype: text
		required: true

	- "State (use two-letter state abbreviation)": party_state
		datatype: text
		required: true

	- "Zip Code": party_zip
		datatype: integer
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	True
question: ''
subquestion: |
	# Your Case
fields:
	- "What's the full name of your spouse": name_of_spouse
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='name_of_spouse'/>

	- "Did you file the petition to start the divorce?": filer_party
		input type: radio
		required: true
		datatype: text
		choices:
			- "Yes, I am the petitioner": "Petitioner / Plaintiff"
			- "No, I am responding as the defendant": "Respondent / Defendant"
		html: |
			<span hidden data-variable data-event-type='change' id='filer_party'/>

	- "Is there another party involved in this case other than your spouse/partner?": other_claimant
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='other_claimant'/>

	- "What's the full name of the other claimant?": other_claimant_name
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='other_claimant_name'/>

	- "What's your case number?": case_number
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='case_number'/>

	- "Do you have any children under 18 with your spouse?": have_children_with_spouse
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='have_children_with_spouse'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var other_claimant_name_field = $('#other_claimant_name').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      name_of_spouse: null,
			filer_party: null,
			other_claimant: null,
			other_claimant_name: null,
			case_number: null,
			have_children_with_spouse: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: other_claimant_name, field: other_claimant_name_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['other_claimant']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
code: |
	filer_is_petitioner = ((augment(filer_party) == (augment("Petitioner / Plaintiff")))).primitive_value()
---
code: |
	other_party = (ternary(filer_is_petitioner, "Respondent", "Petitioner"))
---
mandatory: |
	True
question: ''
subquestion: |
	# Your Court Information
fields:
	- "Which Court did you file in for Divorce in?": court_county
		datatype: text
		required: true

	- "Court Branch Name": court_branch_name
		datatype: text
		required: true

	- "Court Branch Street Address": court_street_address
		datatype: text
		required: true

	- "Court City and Zip Code": court_city_and_zip_code
		datatype: text
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	True
question: ''
subquestion: |
	# **Your Education**
fields:
	- "What's the highest level of education you completed?": education_level
		input type: dropdown
		required: true
		datatype: number
		choices:
			- "Completed Graduate School": 18
			- "Some Graduate School": 17
			- "Graduated from College": 16
			- "3 years of College": 15
			- "2 years of College": 14
			- "1 year of College": 13
			- "Graduated from High School": 12
			- "11 grade": 11
			- "10 grade": 10
			- "9th grade": 9
			- "8th grade": 8
			- "7th grade": 7
			- "6th grade": 6
			- "5th grade": 5
			- "4th grade": 4
			- "3rd grade": 3
			- "2nd grade": 2
			- "1st grade": 1
			- "Did not attend school": 0
		html: |
			<span hidden data-variable data-event-type='change' id='education_level'/>

	- "What college degree or degrees did you receive?": college_degrees_obtained
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='college_degrees_obtained'/>

	- "How many years of graduate school did you complete?": graduate_school_years
		datatype: number
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='graduate_school_years'/>

	- "What graudate degree or degrees did you receive?": grad_degrees_obtained
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='grad_degrees_obtained'/>

	- "Do you have any professional licenses? (For Example: nurse, plumber, CPA license or Class A Truck Driver's License)": education_license
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='education_license'/>

	- "What professional and/or occupational licenses have you received?(For Example: nurse, plumber, CPA license or Class A Truck Driver's License)": license_obtained
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='license_obtained'/>

	- "Do you have any vocational training? (For Example: cook, construction worker, mechanic, medical assistant, office management skills)": education_vocational
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='education_vocational'/>

	- "What vocational training have you received? (For Example: cook, construction worker, mechanic, medical assistant, office management skills)": training_obtained
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='training_obtained'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var college_degrees_obtained_field = $('#college_degrees_obtained').closest('.form-group');
		var graduate_school_years_field = $('#graduate_school_years').closest('.form-group');
		var grad_degrees_obtained_field = $('#grad_degrees_obtained').closest('.form-group');
		var license_obtained_field = $('#license_obtained').closest('.form-group');
		var training_obtained_field = $('#training_obtained').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      education_level: null,
			college_degrees_obtained: null,
			graduate_school_years: null,
			grad_degrees_obtained: null,
			education_license: null,
			license_obtained: null,
			education_vocational: null,
			training_obtained: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: college_degrees_obtained, field: college_degrees_obtained_field, required: true, callback: function() { return allVariableValues['education_level'] >= 16 } },
			{ shouldShow: false, variableName: graduate_school_years, field: graduate_school_years_field, required: true, callback: function() { return allVariableValues['education_level'] >= 17 } },
			{ shouldShow: false, variableName: grad_degrees_obtained, field: grad_degrees_obtained_field, required: true, callback: function() { return allVariableValues['education_level'] == 18 } },
			{ shouldShow: false, variableName: license_obtained, field: license_obtained_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['education_license']) } },
			{ shouldShow: false, variableName: training_obtained, field: training_obtained_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['education_vocational']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	True
question: ''
subquestion: |
	# Tell us about your taxes
fields:
	- "Please upload and attach a copy of your latest federal tax return.": tax_return_proof
		datatype: file
		required: false
		html: |
			<span hidden data-variable data-event-type='input' id='tax_return_proof'/>

	- "What was the last year you filed taxes?": tax_filing_year
		datatype: integer
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='tax_filing_year'/>

	- "Did you last file your taxes in California?": tax_state_ca
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='tax_state_ca'/>

	- "What state did you last file taxes in?": tax_state
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='tax_state'/>

	- "What was your filing status on your last tax return?": tax_status
		input type: radio
		required: true
		datatype: text
		choices:
			- "Single": "single"
			- "Head of household": "household head"
			- "Married, filing separately": "married filing separately"
			- "Married, jointly filing": "married filing jointly"
		html: |
			<span hidden data-variable data-event-type='change' id='tax_status'/>

	- "What's the full name of the person you jointly filed your taxes with?": name_joint_tax_filer
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='name_joint_tax_filer'/>

	- "How many exemptions (including yourself) did you claim on your taxes? **What's an exemption?** The Federal government allows you to claim yourself and any dependents as exemptions. If filing jointly you get one exemption for each spouse.": tax_exemptions
		datatype: integer
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='tax_exemptions'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var tax_state_field = $('#tax_state').closest('.form-group');
		var name_joint_tax_filer_field = $('#name_joint_tax_filer').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      tax_return_proof: null,
			tax_filing_year: null,
			tax_state_ca: null,
			tax_state: null,
			tax_status: null,
			name_joint_tax_filer: null,
			tax_exemptions: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: tax_state, field: tax_state_field, required: true, callback: function() { return [false, 'False'].includes(allVariableValues['tax_state_ca']) } },
			{ shouldShow: false, variableName: name_joint_tax_filer, field: name_joint_tax_filer_field, required: true, callback: function() { return allVariableValues['tax_status'] == "married filing jointly" } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	True
question: ''
subquestion: |
	# Tell us about your income
fields:
	- "Have you ever had a job?": ever_employed
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='ever_employed'/>

	- "Are you currently employed?": employment
		input type: radio
		required: true
		datatype: text
		choices:
			- "No, I'm unemployed right now.": "in past"
			- "Yes, I currently have one or more jobs": "current"
		html: |
			<span hidden data-variable data-event-type='change' id='employment'/>

	- "What was/is your status at your most recent job?": employee_contractor
		input type: radio
		required: true
		datatype: text
		choices:
			- "I'm an employee": "employee"
			- "I'm an independent contractor": "contractor"
		html: |
			<span hidden data-variable data-event-type='change' id='employee_contractor'/>

	- "Check if you got money from any of the following sources in the last 12 months.": income_types
		datatype: checkboxes
		required: true
		choices:
			- "Income from businesses you own": "self-employment income"
			- "Public Assistance. CalFresh, General Assistance, SSI, TANF etc.": "public benefits"
			- "Social Security Retirement Benefits": "social security"
			- "Disability Benefits": "disability"
			- "Unemployment Compensation (from the government)": "unemployment"
			- "Workers' Compensation": "workers comp"
			- "Partner Support. From current or previous domestic partnership": "partner"
			- "Spousal support. From current or previous marriage": "spousal"
			- "Pension/Retirement fund payments": "pension"
			- "Investments. Real estate, stock, trust income.": "investments"
			- "Other. Ex. Military BAQ,  royalty payments or otherwise.": "other"
		none of the above: False
		html: |
			<span hidden data-variable data-event-type='change' id='income_types'/>

	- "What was the source of this \"other\" income?": other_income_name
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='other_income_name'/>

	- "Have you received extra, one-time money in the last 12 month (ex. inheritance, lottery?": income_one_time
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='income_one_time'/>

	- "Has your income changed significantly over the last 12 months?": income_changed
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='income_changed'/>

	- "You said that your income has changed significantly over the last 12 months. Tell us more  about how your income has changed and why it has changed?": income_change_description
		datatype: area
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='income_change_description'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var employment_field = $('#employment').closest('.form-group');
		var employee_contractor_field = $('#employee_contractor').closest('.form-group');
		var other_income_name_field = $('#other_income_name').closest('.form-group');
		var income_change_description_field = $('#income_change_description').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      ever_employed: null,
			employment: null,
			employee_contractor: null,
			income_types: { "self-employment income": null,
				"public benefits": null,
				"social security": null,
				"disability": null,
				"unemployment": null,
				"workers comp": null,
				"partner": null,
				"spousal": null,
				"pension": null,
				"investments": null,
				"other": null, },
			other_income_name: null,
			income_one_time: null,
			income_changed: null,
			income_change_description: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      income_types: {
				"Income from businesses you own": "self-employment income",
				"Public Assistance. CalFresh, General Assistance, SSI, TANF etc.": "public benefits",
				"Social Security Retirement Benefits": "social security",
				"Disability Benefits": "disability",
				"Unemployment Compensation (from the government)": "unemployment",
				"Workers' Compensation": "workers comp",
				"Partner Support. From current or previous domestic partnership": "partner",
				"Spousal support. From current or previous marriage": "spousal",
				"Pension/Retirement fund payments": "pension",
				"Investments. Real estate, stock, trust income.": "investments",
				"Other. Ex. Military BAQ,  royalty payments or otherwise.": "other"}
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: employment, field: employment_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['ever_employed']) } },
			{ shouldShow: false, variableName: employee_contractor, field: employee_contractor_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['ever_employed']) } },
			{ shouldShow: false, variableName: other_income_name, field: other_income_name_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['income_types']['other'] ) } },
			{ shouldShow: false, variableName: income_change_description, field: income_change_description_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['income_changed']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	(((augment(employee_contractor) if defined("employee_contractor") else Undefined()) == (augment("employee"))))
question: ''
subquestion: |
	# Tell us about your ${current_or_former} job
	This will help the Court understand your earning ability and your current financial situation. Use your most recent pay stubs to answer the following questions.
fields:
	- "${upload_current_or_former} **Note:** Make sure to black out your Social Security Number.": employer_pay_stubs1
		datatype: file
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employer_pay_stubs1'/>

	- "Name of your employer (company)": employer_name
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employer_name'/>

	- "Employer's office address?": employment_address
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_address'/>

	- "Employer's phone number": employment_phone
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_phone'/>

	- "Occupation (type of work)": employment_occupation
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_occupation'/>

	- "What date did you start the job?": employment_start_date
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_start_date'/>

	- "What date did your job end?": employment_end_date1
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_end_date1'/>

	- "Hours worked per week (please estimate)?": employment_hours_worked
		datatype: number
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_hours_worked'/>

	- "How much money do you earn each month before taxes? (Please estimate)": employment_wage
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_wage'/>

	- "Do you have any necessary job related expenses that are not reimbursed by your employer?": job_related_expenses1
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='job_related_expenses1'/>

	- "Explain each of these job related expenses and why they are necessary?": deduction_job_related_description1
		datatype: area
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_job_related_description1'/>

	- "How much did you spend on these necessary job related expenses last month?": deduction_job_related1
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_job_related1'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var employment_end_date1_field = $('#employment_end_date1').closest('.form-group');
		var deduction_job_related_description1_field = $('#deduction_job_related_description1').closest('.form-group');
		var deduction_job_related1_field = $('#deduction_job_related1').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      employer_pay_stubs1: null,
			employer_name: null,
			employment_address: null,
			employment_phone: null,
			employment_occupation: null,
			employment_start_date: null,
			employment_end_date1: null,
			employment_hours_worked: null,
			employment_wage: null,
			job_related_expenses1: null,
			deduction_job_related_description1: null,
			deduction_job_related1: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: employment_end_date1, field: employment_end_date1_field, required: true, callback: function() { return allVariableValues['employment'] == "in past" } },
			{ shouldShow: false, variableName: deduction_job_related_description1, field: deduction_job_related_description1_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['job_related_expenses1']) } },
			{ shouldShow: false, variableName: deduction_job_related1, field: deduction_job_related1_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['job_related_expenses1']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
code: |
	current_or_former_employment = (((augment(employment) == (augment("current")))).logical_or((augment(employment) == (augment("in past"))))).primitive_value()
---
code: |
	employer_name1 = (ternary(current_or_former_employment, employer_name, "n/a"))
---
code: |
	employment_address1 = (ternary(current_or_former_employment, employment_address, "n/a"))
---
code: |
	employment_phone1 = (ternary(current_or_former_employment, employment_phone, "n/a"))
---
code: |
	employment_occupation1 = (ternary(current_or_former_employment, employment_occupation, "n/a"))
---
code: |
	employment_start_date1 = (ternary(current_or_former_employment, employment_start_date, "n/a"))
---
code: |
	employment_hours1 = (ternary(current_or_former_employment, employment_hours_worked, 0))
---
code: |
	employment_wage1 = (ternary(current_or_former_employment, employment_wage, 0))
---
mandatory: |
	((((augment(employment) if defined("employment") else Undefined()) == (augment("current")))).logical_and(((augment(employee_contractor) if defined("employee_contractor") else Undefined()) == (augment("employee")))))
question: ''
subquestion: |
	# Tell us about your income from ${employer_name}
fields:
	- "How much did you make in total salary/wages last month (before taxes)? Note: Do not include overtime, commissions or bonuses.": wage_last_month1
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='wage_last_month1'/>

	- "Approximately, what's _total_ amount you made in salary/wages before taxes **over the last 12 months**.": wage_avg_monthly1
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='wage_avg_monthly1'/>

	- "Did you get any money for overtime in the last 12 months from this job?": overtime_extra_compensation1
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='overtime_extra_compensation1'/>

	- "How much did you earn for overtime **in the last month**?": overtime_last_month1
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='overtime_last_month1'/>

	- "Approximately, what was the _total_ about you earned for overtime over the **last 12 months**?": overtime_avg_monthly1
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='overtime_avg_monthly1'/>

	- "Did you get any money for  commissions or bonuses in the last 12 months from this job?": commission_extra_compensation1
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='commission_extra_compensation1'/>

	- "How much did you make in commissions or bonuses **in the last month**": commission_last_month1
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='commission_last_month1'/>

	- "Approximately, what was the _total_ amount you earned in commisions or bonuses **over the last 12 months?**": commission_avg_monthly1
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='commission_avg_monthly1'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var overtime_last_month1_field = $('#overtime_last_month1').closest('.form-group');
		var overtime_avg_monthly1_field = $('#overtime_avg_monthly1').closest('.form-group');
		var commission_last_month1_field = $('#commission_last_month1').closest('.form-group');
		var commission_avg_monthly1_field = $('#commission_avg_monthly1').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      wage_last_month1: null,
			wage_avg_monthly1: null,
			overtime_extra_compensation1: null,
			overtime_last_month1: null,
			overtime_avg_monthly1: null,
			commission_extra_compensation1: null,
			commission_last_month1: null,
			commission_avg_monthly1: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: overtime_last_month1, field: overtime_last_month1_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['overtime_extra_compensation1']) } },
			{ shouldShow: false, variableName: overtime_avg_monthly1, field: overtime_avg_monthly1_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['overtime_extra_compensation1']) } },
			{ shouldShow: false, variableName: commission_last_month1, field: commission_last_month1_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['commission_extra_compensation1']) } },
			{ shouldShow: false, variableName: commission_avg_monthly1, field: commission_avg_monthly1_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['commission_extra_compensation1']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	((((augment(employee_contractor) if defined("employee_contractor") else Undefined()) == (augment("employee")))).logical_and(((augment(employment) if defined("employment") else Undefined()) == (augment("current")))))
question: ''
subquestion: |
	# Deductions from your pay at ${employer_name}
	Often employers will take money out of your paycheck to pay for certain things like benefits or dues. These deductions almost always show up on your pay stub.
fields:
	- "Does your employer take any money from your paycheck to pay for any insurance premiums?": health1
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='health1'/>

	- "How much was taken  out for health insurance premiums **last month**?": deduction_health1
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_health1'/>

	- "Does your employer take any required union dues out of your paycheck?": union1
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='union1'/>

	- "How much was deducted for required union dues **last month**?": deduction_union1
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_union1'/>

	- "Does your employer take required retirement payments our of your paycheck? Note: Don't include deductions for Social Security, FICA, 401(k) or an IRA)": retirement1
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='retirement1'/>

	- "How much was deducted for required retirment payments **last month**?": deduction_retirement1
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_retirement1'/>

	- html: |
			<p><strong>Do you have any additional jobs to report?</strong></p>

			<span hidden data-variable data-event-type='input' id='variable_5'/>

	- "": second_job
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='second_job'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var deduction_health1_field = $('#deduction_health1').closest('.form-group');
		var deduction_union1_field = $('#deduction_union1').closest('.form-group');
		var deduction_retirement1_field = $('#deduction_retirement1').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      health1: null,
			deduction_health1: null,
			union1: null,
			deduction_union1: null,
			retirement1: null,
			deduction_retirement1: null,
			variable_5: null,
			second_job: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: deduction_health1, field: deduction_health1_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['health1']) } },
			{ shouldShow: false, variableName: deduction_union1, field: deduction_union1_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['union1']) } },
			{ shouldShow: false, variableName: deduction_retirement1, field: deduction_retirement1_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['retirement1']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	(((augment(second_job) if defined("second_job") else Undefined())))
question: ''
subquestion: |
	# Tell us about your second job
	This will help the Court understand your earning ability and your current financial situation. Use your most recent pay stubs to answer the following questions.
fields:
	- "Locate and upload copies of your pay stubs from the last two months. **Note:** Make sure to black out your Social Security Number.": employer_pay_stubs2
		datatype: file
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employer_pay_stubs2'/>

	- "Name of your employer (company)": employer_name2
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employer_name2'/>

	- "Employer's office address?": employment_address2
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_address2'/>

	- "Employer's phone number": employment_phone2
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_phone2'/>

	- "Occupation (type of work)": employment_occupation2
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_occupation2'/>

	- "What date did you start the job?": employment_start_date2
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_start_date2'/>

	- "Hours worked per week (please estimate)?": employment_hours_worked2
		datatype: number
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_hours_worked2'/>

	- "How much money do you earn each month before taxes? (Please estimate)": employment_wage2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_wage2'/>

	- "Do you have any necessary job related expenses that are not reimbursed by your employer?": job_related_expenses2
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='job_related_expenses2'/>

	- "Explain each of these job related expenses and why they are necessary?": deduction_job_related_description2
		datatype: area
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_job_related_description2'/>

	- "How much did you spend on these necessary job related expenses last month?": deduction_job_related2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_job_related2'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var deduction_job_related_description2_field = $('#deduction_job_related_description2').closest('.form-group');
		var deduction_job_related2_field = $('#deduction_job_related2').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      employer_pay_stubs2: null,
			employer_name2: null,
			employment_address2: null,
			employment_phone2: null,
			employment_occupation2: null,
			employment_start_date2: null,
			employment_hours_worked2: null,
			employment_wage2: null,
			job_related_expenses2: null,
			deduction_job_related_description2: null,
			deduction_job_related2: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: deduction_job_related_description2, field: deduction_job_related_description2_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['job_related_expenses2']) } },
			{ shouldShow: false, variableName: deduction_job_related2, field: deduction_job_related2_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['job_related_expenses2']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	(((augment(second_job) if defined("second_job") else Undefined())))
question: ''
subquestion: |
	# Tell us about your income from ${employer_name2}
fields:
	- "How much did you make in total salary/wages last month (before taxes)? Note: Do not include overtime, commissions or bonuses.": wage_last_month2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='wage_last_month2'/>

	- "Approximately, what's _total_ amount you made in salary/wages before taxes **over the last 12 months**.": wage_avg_monthly2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='wage_avg_monthly2'/>

	- "Did you get any money for overtime in the last 12 months from this job?": overtime_extra_compensation2
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='overtime_extra_compensation2'/>

	- "How much did you earn for overtime **in the last month**?": overtime_last_month2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='overtime_last_month2'/>

	- "Approximately, what was the _total_ about you earned for overtime over the **last 12 months**?": overtime_avg_monthly2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='overtime_avg_monthly2'/>

	- "Did you get any money for commissions or bonuses in the last 12 months from this job?": commission_extra_compensation2
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='commission_extra_compensation2'/>

	- "How much did you make in commissions or bonuses **in the last month**": commission_last_month2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='commission_last_month2'/>

	- "Approximately, what was the _total_ amount you earned in commisions or bonuses **over the last 12 months?**": commission_avg_monthly2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='commission_avg_monthly2'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var overtime_last_month2_field = $('#overtime_last_month2').closest('.form-group');
		var overtime_avg_monthly2_field = $('#overtime_avg_monthly2').closest('.form-group');
		var commission_last_month2_field = $('#commission_last_month2').closest('.form-group');
		var commission_avg_monthly2_field = $('#commission_avg_monthly2').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      wage_last_month2: null,
			wage_avg_monthly2: null,
			overtime_extra_compensation2: null,
			overtime_last_month2: null,
			overtime_avg_monthly2: null,
			commission_extra_compensation2: null,
			commission_last_month2: null,
			commission_avg_monthly2: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: overtime_last_month2, field: overtime_last_month2_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['overtime_extra_compensation2']) } },
			{ shouldShow: false, variableName: overtime_avg_monthly2, field: overtime_avg_monthly2_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['overtime_extra_compensation2']) } },
			{ shouldShow: false, variableName: commission_last_month2, field: commission_last_month2_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['commission_extra_compensation2']) } },
			{ shouldShow: false, variableName: commission_avg_monthly2, field: commission_avg_monthly2_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['commission_extra_compensation2']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	(((augment(second_job) if defined("second_job") else Undefined())))
question: ''
subquestion: |
	# **Deductions from your pay at** ${employer_name2}
	Often employers will take money out of your paycheck to pay for certain things like benefits or dues. These deductions almost always show up on your pay stub.
fields:
	- "Does your employer take any money from your paycheck to pay for any insurance premiums?": health2
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='health2'/>

	- "How much was taken  out for health insurance premiums **last month**?": deduction_health2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_health2'/>

	- "Does your employer take any required union dues out of your paycheck?": union2
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='union2'/>

	- "How much was deducted for required union dues **last month**?": deduction_union2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_union2'/>

	- "Does your employer take required retirement payments our of your paycheck? Note: Don't include deductions for Social Security, FICA, 401(k) or an IRA)": retirement2
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='retirement2'/>

	- "How much was deducted for required retirment payments **last month**?": deduction_retirement2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_retirement2'/>

	- html: |
			<p><strong>Do you have any additional jobs?</strong></p>

			<span hidden data-variable data-event-type='input' id='variable_11'/>

	- "": third_job
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='third_job'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var deduction_health2_field = $('#deduction_health2').closest('.form-group');
		var deduction_union2_field = $('#deduction_union2').closest('.form-group');
		var deduction_retirement2_field = $('#deduction_retirement2').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      health2: null,
			deduction_health2: null,
			union2: null,
			deduction_union2: null,
			retirement2: null,
			deduction_retirement2: null,
			variable_11: null,
			third_job: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: deduction_health2, field: deduction_health2_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['health2']) } },
			{ shouldShow: false, variableName: deduction_union2, field: deduction_union2_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['union2']) } },
			{ shouldShow: false, variableName: deduction_retirement2, field: deduction_retirement2_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['retirement2']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	(((augment(third_job) if defined("third_job") else Undefined())))
question: ''
subquestion: |
	# Tell us about your third job
	This will help the Court understand your earning ability and your current financial situation. Use your most recent pay stubs to answer the following questions.
fields:
	- "Locate and upload copies of your pay stubs from the last two months. **Note:** Make sure to black out your Social Security Number.": employer_pay_stubs3
		datatype: file
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employer_pay_stubs3'/>

	- "Name of your employer (company)": employer_name3
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employer_name3'/>

	- "Employer's office address?": employment_address3
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_address3'/>

	- "Employer's phone number": employment_phone3
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_phone3'/>

	- "Occupation (type of work)": employment_occupation3
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_occupation3'/>

	- "What date did you start the job?": employment_start_date3
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_start_date3'/>

	- "Hours worked per week (please estimate)?": employment_hours_worked3
		datatype: number
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_hours_worked3'/>

	- "How much money do you earn each month before taxes? (Please estimate)": employment_wage3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='employment_wage3'/>

	- "Do you have any necessary job related expenses that are not reimbursed by your employer?": job_related_expenses3
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='job_related_expenses3'/>

	- "Explain each of these job related expenses and why they are necessary?": deduction_job_related_description3
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_job_related_description3'/>

	- "How much did you spend on these necessary job related expenses last month?": deduction_job_related3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_job_related3'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var deduction_job_related_description3_field = $('#deduction_job_related_description3').closest('.form-group');
		var deduction_job_related3_field = $('#deduction_job_related3').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      employer_pay_stubs3: null,
			employer_name3: null,
			employment_address3: null,
			employment_phone3: null,
			employment_occupation3: null,
			employment_start_date3: null,
			employment_hours_worked3: null,
			employment_wage3: null,
			job_related_expenses3: null,
			deduction_job_related_description3: null,
			deduction_job_related3: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: deduction_job_related_description3, field: deduction_job_related_description3_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['job_related_expenses3']) } },
			{ shouldShow: false, variableName: deduction_job_related3, field: deduction_job_related3_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['job_related_expenses3']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	(((augment(third_job) if defined("third_job") else Undefined())))
question: ''
subquestion: |
	# Tell us about your income from ${employer_name3}
fields:
	- "How much did you make in total salary/wages last month (before taxes)? Note: Do not include overtime, commissions or bonuses.": wage_last_month3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='wage_last_month3'/>

	- "Approximately, what's _total_ amount you made in salary/wages before taxes **over the last 12 months**.": wage_avg_monthly3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='wage_avg_monthly3'/>

	- "Did you get any money for overtime in the last 12 months from this job?": overtime_extra_compensation3
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='overtime_extra_compensation3'/>

	- "How much did you earn for overtime **in the last month**?": overtime_last_month3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='overtime_last_month3'/>

	- "Approximately, what was the _total_ about you earned for overtime over the **last 12 months**?": overtime_avg_monthly3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='overtime_avg_monthly3'/>

	- "Did you get any money for commissions or bonuses in the last 12 months from this job?": commission_extra_compensation3
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='commission_extra_compensation3'/>

	- "How much did you make in commissions or bonuses **in the last month**": commission_last_month3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='commission_last_month3'/>

	- "Approximately, what was the _total_ amount you earned in commisions or bonuses **over the last 12 months?**": commission_avg_monthly3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='commission_avg_monthly3'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var overtime_last_month3_field = $('#overtime_last_month3').closest('.form-group');
		var overtime_avg_monthly3_field = $('#overtime_avg_monthly3').closest('.form-group');
		var commission_last_month3_field = $('#commission_last_month3').closest('.form-group');
		var commission_avg_monthly3_field = $('#commission_avg_monthly3').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      wage_last_month3: null,
			wage_avg_monthly3: null,
			overtime_extra_compensation3: null,
			overtime_last_month3: null,
			overtime_avg_monthly3: null,
			commission_extra_compensation3: null,
			commission_last_month3: null,
			commission_avg_monthly3: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: overtime_last_month3, field: overtime_last_month3_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['overtime_extra_compensation3']) } },
			{ shouldShow: false, variableName: overtime_avg_monthly3, field: overtime_avg_monthly3_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['overtime_extra_compensation3']) } },
			{ shouldShow: false, variableName: commission_last_month3, field: commission_last_month3_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['commission_extra_compensation3']) } },
			{ shouldShow: false, variableName: commission_avg_monthly3, field: commission_avg_monthly3_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['commission_extra_compensation3']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	(((augment(third_job) if defined("third_job") else Undefined())))
question: ''
subquestion: |
	# Deductions from your pay at ${employer_name3}
	Often employers will take money out of your paycheck to pay for certain things like benefits or dues. These deductions almost always show up on your pay stub.
fields:
	- "Does your employer take any money from your paycheck to pay for any insurance premiums?": health3
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='health3'/>

	- "How much was taken  out for health insurance premiums **last month**?": deduction_health3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_health3'/>

	- "Does your employer take any required union dues out of your paycheck?": union3
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='union3'/>

	- "How much was deducted for required union dues **last month**?": deduction_union3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_union3'/>

	- "Does your employer take required retirement payments our of your paycheck? Note: Don't include deductions for Social Security, FICA, 401(k) or an IRA)": retirement3
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='retirement3'/>

	- "How much was deducted for required retirment payments **last month**?": deduction_retirement3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='deduction_retirement3'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var deduction_health3_field = $('#deduction_health3').closest('.form-group');
		var deduction_union3_field = $('#deduction_union3').closest('.form-group');
		var deduction_retirement3_field = $('#deduction_retirement3').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      health3: null,
			deduction_health3: null,
			union3: null,
			deduction_union3: null,
			retirement3: null,
			deduction_retirement3: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: deduction_health3, field: deduction_health3_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['health3']) } },
			{ shouldShow: false, variableName: deduction_union3, field: deduction_union3_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['union3']) } },
			{ shouldShow: false, variableName: deduction_retirement3, field: deduction_retirement3_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['retirement3']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	(((augment(income_types["investments"]) if defined("income_types") else Undefined())))
question: ''
subquestion: |
	# Investment Income
fields:
	- "What kinds of investment income have you earned in the past year?": all_investment_sources
		datatype: checkboxes
		required: true
		choices:
			- "Rental Property Income": "rental property"
			- "Dividends or Interest": "dividends/interest"
			- "Trust Income": "trust"
			- "Other": "other"
		none of the above: False
		html: |
			<span hidden data-variable data-event-type='change' id='all_investment_sources'/>

	- "How would you describe this other investment income?": other_investment_income_name
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='other_investment_income_name'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var other_investment_income_name_field = $('#other_investment_income_name').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      all_investment_sources: { "rental property": null,
				"dividends/interest": null,
				"trust": null,
				"other": null, },
			other_investment_income_name: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      all_investment_sources: {
				"Rental Property Income": "rental property",
				"Dividends or Interest": "dividends/interest",
				"Trust Income": "trust",
				"Other": "other"}
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: other_investment_income_name, field: other_investment_income_name_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['all_investment_sources']['other'] ) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	(((augment(all_investment_sources["dividends/interest"]) if defined("all_investment_sources") else Undefined())))
question: ''
subquestion: |
	# Dividends or Interest
fields:
	- "Locate and upload statement(s) showing money you have earned year to date from dividends or interest.": dividend_investment_proof
		datatype: file
		required: false

	- "How much did you earn from **dividends or interest** over the past month?": dividends_investment_last_month
		datatype: currency
		required: true

	- "What were your total earnings from **dividends or interest** over the last 12 months?": dividends_investment_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(all_investment_sources["rental property"]) if defined("all_investment_sources") else Undefined())))
question: ''
subquestion: |
	# Rental Property Income
fields:
	- "Upload statement(s) showing income from all rental  property you and all cash expenses for the last 12 months. Or, you can upload the Schedule C from your last tax return.": rental_investment_proof
		datatype: file
		required: false

	- "How much did you earn in rental property income over the last month?": rental_investment_last_month
		datatype: currency
		required: true

	- "What's the total amount you earned over the last 12 months from all your rental properties?": rental_investment_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(all_investment_sources["trust"]) if defined("all_investment_sources") else Undefined())))
question: ''
subquestion: |
	# Trust
fields:
	- "Upload document showing all income and expenses from trust activity over the last 12 months": trust_investment_proof
		datatype: file
		required: false

	- "What's the name of this trust?": variable_6
		datatype: text
		required: true

	- "What was your total income from the trust last month?": trust_investment_last_month
		datatype: currency
		required: true

	- "What has been your total trust income over the last 12 months?": trust_investment_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(all_investment_sources["other"]) if defined("all_investment_sources") else Undefined())))
question: ''
subquestion: |
	# Income from ${other_investment_income_name}
fields:
	- "Upload document showing all income and expenses from trust activity over the last 12 months": other_investment_proof
		datatype: file
		required: false

	- "What was your income from this revenue source last month?": other_investment_last_month
		datatype: currency
		required: true

	- "What has been your total income from this investment come over the last 12 months?": other_investment_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(income_one_time) if defined("income_one_time") else Undefined())))
question: ''
subquestion: |
	# **Additional Income**
	You checked that you received some extra, one-time money such as an inheritance or winnings. Tell us more about that.
fields:
	- "What was the source of this additional income?": additional_income_description
		datatype: text
		required: true

	- "What's the amount of income?": additional_income_amount
		datatype: currency
		required: true

	- "If applicable, attach (as a single PDF document) proof of the income reported in this section.": additional_income_proof
		datatype: file
		required: false

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(business1) if defined("business1") else Undefined())))
question: ''
subquestion: |
	# ${business_header}
	${business_subheader}
fields:
	- "${business_name_q}": business_name
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_name'/>

	- "What is your relationship to the business?": business_role
		input type: radio
		required: true
		datatype: text
		choices:
			- "Owner/Sole Proprietor": "owner"
			- "Business Partner": "partner"
			- "Other (specify)": "other"
		html: |
			<span hidden data-variable data-event-type='change' id='business_role'/>

	- "Since you selected \"Other\", please specify what you're role is in the businss": business_role_other_description
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_role_other_description'/>

	- "What type of work does this business do?": business_type
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_type'/>

	- "${business_years_q}": years_part_of_business
		datatype: integer
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='years_part_of_business'/>

	- "${business_upload_q}": business_income_proof1
		datatype: file
		required: false
		html: |
			<span hidden data-variable data-event-type='input' id='business_income_proof1'/>

	- "How much did _you_ earn from this business **last month?**": business_last_month1
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_last_month1'/>

	- "How much _total_ money did you earn from this business **over the last 12 months?**": business_year1
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_year1'/>

	- "${business_loop_q}": business2
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business2'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var business_role_field = $('#business_role').closest('.form-group');
		var business_role_other_description_field = $('#business_role_other_description').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      business_name: null,
			business_role: null,
			business_role_other_description: null,
			business_type: null,
			years_part_of_business: null,
			business_income_proof1: null,
			business_last_month1: null,
			business_year1: null,
			business2: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: business_role, field: business_role_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['income_types']['self-employment income'] ) } },
			{ shouldShow: false, variableName: business_role_other_description, field: business_role_other_description_field, required: true, callback: function() { return allVariableValues['business_role'] == "other" } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	(((augment(business2) if defined("business2") else Undefined())))
question: ''
subquestion: |
	# ${business_header}
	${business_subheader}
fields:
	- "${business_name_q}": business_name2
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_name2'/>

	- "What is your relationship to the business?": business_role2
		input type: radio
		required: true
		datatype: text
		choices:
			- "Owner / sole proprieter": "owner"
			- "Business partner": "partner"
			- "Other (specify)": "other"
		html: |
			<span hidden data-variable data-event-type='change' id='business_role2'/>

	- "Since you selected \"Other\", please specify what you're role is in the businss": business_role_other_description2
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_role_other_description2'/>

	- "What type of work does this business do?": business_type2
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_type2'/>

	- "${business_years_q}": years_part_of_business2
		datatype: integer
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='years_part_of_business2'/>

	- "${business_upload_q}": business_income_proof2
		datatype: file
		required: false
		html: |
			<span hidden data-variable data-event-type='input' id='business_income_proof2'/>

	- "How much did _you_ earn from this business **last month?**": business_last_month2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_last_month2'/>

	- "How much _total_ money did you earn from this business **over the last 12 months?**": business_year2
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_year2'/>

	- "${business_loop_q}": business3
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business3'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var business_role2_field = $('#business_role2').closest('.form-group');
		var business_role_other_description2_field = $('#business_role_other_description2').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      business_name2: null,
			business_role2: null,
			business_role_other_description2: null,
			business_type2: null,
			years_part_of_business2: null,
			business_income_proof2: null,
			business_last_month2: null,
			business_year2: null,
			business3: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: business_role2, field: business_role2_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['income_types']['self-employment income'] ) } },
			{ shouldShow: false, variableName: business_role_other_description2, field: business_role_other_description2_field, required: true, callback: function() { return allVariableValues['business_role2'] == "other" } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	(((augment(business3) if defined("business3") else Undefined())))
question: ''
subquestion: |
	# ${business_header}
	${business_subheader}
fields:
	- "${business_name_q}": business_name3
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_name3'/>

	- "What is your relationship to the business?": business_role3
		input type: radio
		required: true
		datatype: text
		choices:
			- "Owner / sole proprieter": "owner"
			- "Business partner": "partner"
			- "Other (specify)": "other"
		html: |
			<span hidden data-variable data-event-type='change' id='business_role3'/>

	- "Since you selected \"Other\", please specify what you're role is in the businss": business_role_other_description3
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_role_other_description3'/>

	- "What type of work does this business do?": business_type3
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_type3'/>

	- "${business_years_q}": years_part_of_business3
		datatype: integer
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='years_part_of_business3'/>

	- "${business_upload_q}": business_income_proof3
		datatype: file
		required: false
		html: |
			<span hidden data-variable data-event-type='input' id='business_income_proof3'/>

	- "How much did _you_ earn from this business **last month?**": business_last_month3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_last_month3'/>

	- "How much _total_ money did you earn from this business **over the last 12 months?**": business_year3
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='business_year3'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var business_role3_field = $('#business_role3').closest('.form-group');
		var business_role_other_description3_field = $('#business_role_other_description3').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      business_name3: null,
			business_role3: null,
			business_role_other_description3: null,
			business_type3: null,
			years_part_of_business3: null,
			business_income_proof3: null,
			business_last_month3: null,
			business_year3: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: business_role3, field: business_role3_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['income_types']['self-employment income'] ) } },
			{ shouldShow: false, variableName: business_role_other_description3, field: business_role_other_description3_field, required: true, callback: function() { return allVariableValues['business_role3'] == "other" } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
mandatory: |
	True
question: ''
subquestion: |
	# Tell us about  the property you own
	In addition to your regular income, the Court needs to understand the value of everything you own. It's important to include everything you own - no matter how large or small. If your spouse can prove did not declare property, they could make the Court grant it all to them.
fields:
	- "Approximately, how much cash do you have to your name? Include any money  you have in checking accounts, savings, credit union, money market or  other deposit accounts.": asset_savings
		datatype: currency
		required: true

	- "Approximately, what's the total value of all the stocks, bonds, and other investment assets you could easily sell?": asset_investments
		datatype: currency
		required: true

	- "Approximately, what's the total amount of any real property you own (houses, buildings, land)?  Provide the fair market value minus the debts you owe on that property.": asset_real_property
		datatype: currency
		required: true

	- "What's the estimated value of _all_ your personal possessions (cars, clothes, furniture, jewelry, electronics, kitchen supplies)? Provide the fair market value minus the debts you owe on that property.": asset_personal_property
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(income_types["public benefits"]) if defined("income_types") else Undefined())))
question: ''
subquestion: |
	# Income from Public Benefits
	You said you have received some form of cash asssitance from public benefits. Note: Do not include unemployment assistance from the government.
fields:
	- "How much cash assistance did you receive from public benefit programs **in the last month**?Benefits might include TANF, SSI, GA/GR.": income_public_benefits_month
		datatype: currency
		required: true

	- "Approximately, what's the _total_ amount of cash assistance you have reveived **over the last 12 months**?": income_public_benefits_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(income_types["partner"]) if defined("income_types") else Undefined())))
question: ''
subquestion: |
	# Income from Partner Support
	You said that you have received some form of partner support over the last 12 months.
fields:
	- "Did the support come from a current partnership a different one or both? (check all that apply)": income_partner_support_source
		datatype: checkboxes
		required: true
		choices:
			- "Current domestic partnership": "current"
			- "A different domestic partnership": "different"
		none of the above: False

	- "What was the _total_ amount of partner support you received **last month**?": income_partner_support_month
		datatype: currency
		required: true

	- "Approximately, what's the _total_ amount of partner support you received over the last 12 months?": income_partner_support_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(income_types["spousal"]) if defined("income_types") else Undefined())))
question: ''
subquestion: |
	# Income from Spousal Support
fields:
	- "Did the support come from a current partnership a different one or both? (check all that apply)": income_spousal_support_source
		datatype: checkboxes
		required: true
		choices:
			- "Current marriage": "current"
			- "A different marriage": "different"
			- "Federally taxable\\*": "federally taxable"
		none of the above: False

	- html: |
			<p><em>* Check the box if the spousal support order or judgment was executed by the parties and the court before January 1, 2019, or if a court-ordered change maintains the spousal support payments as taxable income to the recipient and tax deductible to the payor.</em></p>


	- "What was the _total_ amount of spousal support you received **last month**?": income_spousal_support_month
		datatype: currency
		required: true

	- "Approximately, what's the _total_ amount of partner support you received over the last 12 months?": income_spousal_support_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(income_types["pension"]) if defined("income_types") else Undefined())))
question: ''
subquestion: |
	# Income from Pension/Retirement Payments
	You said that you have received pension or retirement payments over the last 12 months. This should not include payments from social security.
fields:
	- "How much did you receive in retirement payments **last month**?": income_pension_retirement_month
		datatype: currency
		required: true

	- "Approximately, what's the _total_ amount you received in retirement payments **over the last 12 months**?": income_pension_retirement_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(income_types["social security"]) if defined("income_types") else Undefined())))
question: ''
subquestion: |
	# Income from Social Security Benefits
	You said that you received social security retirement benefits in the last 12 months. Just to be clear, do not include money from SSI in this question.
fields:
	- "How much did you receive in social security retirement **last month**?": income_social_security_month
		datatype: currency
		required: true

	- "Approximately, what's the _total_ amount you received in social security retirement  **over the last 12 months**?": income_social_security_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(income_types["disability"]) if defined("income_types") else Undefined())))
question: ''
subquestion: |
	# **Income from Disability**
	You said that you received disability benefits in the last 12 months.
fields:
	- "What kind of disability benefits did you collect over the last 12 months? (check all that apply)": income_disability_source
		datatype: checkboxes
		required: true
		choices:
			- "Social Security (not SSI)": "social security"
			- "State Disability (SDI)": "state disability"
			- "Private Insurance": "private insurance"
		none of the above: False

	- "How much did you receive in disability benefits **last month?**": income_disability_month
		datatype: currency
		required: true

	- "Approximately, what's the _total_ amount you received in disability benefits **over the last 12 months**?": income_disability_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(income_types["unemployment"]) if defined("income_types") else Undefined())))
question: ''
subquestion: |
	# **Income from Unemployment**
	You said that you received unemployment compensation benefits in the last 12 months.
fields:
	- "How much did you receive in unemployment **last month?**": income_unemployment_month
		datatype: currency
		required: true

	- "Approximately, what's the _total_ amount you received in unemployment **over the last 12 months**?": income_unemployment_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(income_types["workers comp"]) if defined("income_types") else Undefined())))
question: ''
subquestion: |
	# **Income from Worker's Compensation**
	You said that you received  compensation benefits in the last 12 months.
fields:
	- "How much did you receive for worker's compensation **last month**?": income_workers_comp_month
		datatype: currency
		required: true

	- "Approximately, what's the _total_ amount you received in worker's compensation **over the last 12 months**?": income_workers_comp_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(income_types["other"]) if defined("income_types") else Undefined())))
question: ''
subquestion: |
	# **Income from** ${other_income_name}
	You said you received income from ${other_income_name} over the last 12 months.
fields:
	- "How much did you receive from this source over the **last month**": income_other_month
		datatype: currency
		required: true

	- "Approximately, what's the _total_ amount you received from this source **over the last 12 months**?": income_other_year
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	True
question: ''
subquestion: |
	# Other Party Income
	${name_of_spouse} will submit their own disclosures, but the Court needs to get your sense of their estimated income as well.  sense.
fields:
	- "What is ${name_of_spouse}'s gross monthly income? (Gross means after taxes or total take- home pay.)": other_party_income
		datatype: currency
		required: true

	- "Tell us how you made this estimate. It does not have to be exact.": other_party_income_based_on
		datatype: text
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
code: |
	asset_personal_property_checkmark = ((augment(asset_personal_property) > (augment(0)))).primitive_value()
---
code: |
	asset_real_property_checkmark = ((augment(asset_real_property) > (augment(0)))).primitive_value()
---
mandatory: |
	True
question: ''
subquestion: |
	# Tell us about your household
fields:
	- "Does anyone live with you that depends on you for any financial support or that you depend on for financial support?": household_size1
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(household_size1) if defined("household_size1") else Undefined())))
question: ''
subquestion: |
	# **Tell us about your household**
	Please provide information about the first person who lives with you.
fields:
	- "Name": householdname1
		datatype: text
		required: true

	- "Age": householdage1
		datatype: integer
		required: true

	- "How are they related to you (_ex:_ son)?": householdrelation1
		datatype: text
		required: true

	- "What is their gross monthly income (after taxes)?": householdincome1
		datatype: currency
		required: true

	- "Does the person pay some of the household expenses?": householdpayexpenses1
		datatype: yesnoradio
		required: true

	- "Does anyone else live with you that depends on you for any financial support or that you depend on for financial support?": household_size2
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(household_size2) if defined("household_size2") else Undefined())))
question: ''
subquestion: |
	# **Tell us about your household**
	Please provide information about the second person who lives with you.
fields:
	- "Name": householdname2
		datatype: text
		required: true

	- "Age": householdage2
		datatype: integer
		required: true

	- "How are they related to you (_ex:_ son)?": householdrelation2
		datatype: text
		required: true

	- "What is their gross monthly income (after taxes)?": householdincome2
		datatype: currency
		required: true

	- "Does the person pay some of the household expenses?": householdpayexpenses2
		datatype: yesnoradio
		required: true

	- "Does anyone else live with you that depends on you for any financial support or that you depend on for financial support?": household_size3
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(household_size3) if defined("household_size3") else Undefined())))
question: ''
subquestion: |
	# **Tell us about your household**
	Please provide information about the third person who lives with you.
fields:
	- "Name": householdname3
		datatype: text
		required: true

	- "Age": householdage3
		datatype: integer
		required: true

	- "How are they related to you (_ex:_ son)?": householdrelation3
		datatype: text
		required: true

	- "What is their gross monthly income (after taxes)?": householdincome3
		datatype: currency
		required: true

	- "Does the person pay some of the household expenses?": householdpayexpenses3
		datatype: yesnoradio
		required: true

	- "Does anyone else live with you that depends on you for any financial support or that you depend on for financial support?": household_size4
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(household_size4) if defined("household_size4") else Undefined())))
question: ''
subquestion: |
	# **Tell us about your household**
	Please provide information about the fourth person who lives with you.
fields:
	- "Name": householdname4
		datatype: text
		required: true

	- "Age": householdage4
		datatype: integer
		required: true

	- "How are they related to you (_ex:_ son)?": householdrelation4
		datatype: text
		required: true

	- "What is their gross monthly income (after taxes)?": householdincome4
		datatype: currency
		required: true

	- "Does the person pay some of the household expenses?": householdpayexpenses4
		datatype: yesnoradio
		required: true

	- "Does anyone else live with you that depends on you for any financial support or that you depend on for financial support?": household_size5
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(household_size5) if defined("household_size5") else Undefined())))
question: ''
subquestion: |
	# **Tell us about your household**
	Please provide information about the fifth person who lives with you.
fields:
	- "Name": householdname5
		datatype: text
		required: true

	- "Age": householdage5
		datatype: integer
		required: true

	- "How are they related to you (_ex:_ son)?": householdrelation5
		datatype: text
		required: true

	- "What is their gross monthly income (after taxes)?": householdincome5
		datatype: currency
		required: true

	- "Does the person pay some of the household expenses?": householdpayexpenses5
		datatype: yesnoradio
		required: true

	- "Does anyone else live with you that depends on you for any financial support or that you depend on for financial support?": household_size6
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(household_size6) if defined("household_size6") else Undefined())))
question: ''
subquestion: |
	# **Tell us about your household**
	Please provide information about the sixth person who lives with you.
fields:
	- "Name": householdname6
		datatype: text
		required: true

	- "Age": householdage6
		datatype: integer
		required: true

	- "How are they related to you (_ex:_ son)?": householdrelation6
		datatype: text
		required: true

	- "What is their gross monthly income (after taxes)?": householdincome6
		datatype: currency
		required: true

	- "Does the person pay some of the household expenses?": householdpayexpenses6
		datatype: yesnoradio
		required: true

	- "Does anyone else live with you that depends on you for any financial support or that you depend on for financial support?": household_size7
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(household_size7) if defined("household_size7") else Undefined())))
question: ''
subquestion: |
	# **Tell us about your household**
	Please provide information about the seventh person who lives with you.
fields:
	- "Name": householdname7
		datatype: text
		required: true

	- "Age": householdage7
		datatype: integer
		required: true

	- "How are they related to you (_ex:_ son)?": householdrelation7
		datatype: text
		required: true

	- "What is their gross monthly income (after taxes)?": householdincome7
		datatype: currency
		required: true

	- "Does the person pay some of the household expenses?": householdpayexpenses7
		datatype: yesnoradio
		required: true

	- "Does anyone else live with you that depends on you for any financial support or that you depend on for financial support?": household_size8
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(household_size8) if defined("household_size8") else Undefined())))
question: ''
subquestion: |
	# **Tell us about your household**
	Please provide information about the eighth person who lives with you.
fields:
	- "Name": householdname8
		datatype: text
		required: true

	- "Age": householdage8
		datatype: integer
		required: true

	- "How are they related to you (_ex:_ son)?": householdrelation8
		datatype: text
		required: true

	- "What is their gross monthly income (after taxes)?": householdincome8
		datatype: currency
		required: true

	- "Does the person pay some of the household expenses?": householdpayexpenses8
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	True
question: ''
subquestion: |
	# **Tell us about your monthly expenses**
	Now that we have a sense of your income, we need to collect information about your monthly expenses.
fields:
	- "What do you spend money on each month? (check all that apply)": expense_types
		datatype: checkboxes
		required: true
		choices:
			- "Renting a home": "home rental"
			- "Owning a home": "home mortgage"
			- "Court-ordered spousal support": "spousal support"
			- "Court-ordered partner support": "partner support"
			- "Court-ordered child support for children from other relationships": "child support"
			- "Minor children you have with your spouse": "children related to case"
			- "Minor children you have from other relationships and who are living with you": "children unrelated to case"
			- "Installment payments and/or debts": "installment/debt"
		none of the above: False

	- "For the expenses you will list in this section, are the amounts...": expenses_listed
		input type: radio
		required: true
		datatype: text
		choices:
			- "Estimated expenses": "estimated"
			- "Actual expenses": "actual"
			- "Proposed needs": "proposed"

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	True
question: ''
subquestion: |
	# **Tell us about your monthly expenses**
	To better understand your cost of living, give us your best estimate of what you spend **each month** on the following categories. If you use a debit or credit card, refer to your monthly statements for a better understanding of what you spend. Include expenses even if someone else gave you the money or paid for them.
fields:
	- "Groceries and household supplies": expenses_household_supplies
		datatype: currency
		required: true

	- "Eating out": expenses_eating_out
		datatype: currency
		required: true

	- "Telephone, cell phone, internet": expenses_communication
		datatype: currency
		required: true

	- "Laundry and cleaning": expenses_cleaning
		datatype: currency
		required: true

	- "Clothes": expenses_clothes
		datatype: currency
		required: true

	- "Education": expenses_education
		datatype: currency
		required: true

	- "Entertainment, gifts, and vacation": expenses_entertainment
		datatype: currency
		required: true

	- "Auto expenses and transportation (insurance, gas, repairs, bus, etc)": expenses_transport
		datatype: currency
		required: true

	- "Health-care costs not paid by insurance": expenses_health
		datatype: currency
		required: true

	- "Insurance (life, accident, etc; do not include auto, home or health insurance)": expenses_insurance
		datatype: currency
		required: true

	- "Savings and investments": expenses_savings
		datatype: currency
		required: true

	- "Charitable contributions": expenses_charity
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(have_children_with_spouse) if defined("have_children_with_spouse") else Undefined())))
question: ''
subquestion: |
	# Special Hardships
	Are there other hardhsips that impact your financial circumstances?
fields:
	- "Do any of these apply to you?": special_hardships
		datatype: checkboxes
		required: true
		choices:
			- "Major losses not covered by insurance (like a fire or theft?": "Major Losses"
			- "Extraordinary health expenses not covered by insurance and NOT related to  your child's heathcare.": "Extraordinary Health"
		none of the above: False

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(expense_types["home rental"]) if defined("expense_types") else Undefined())))
question: ''
subquestion: |
	# Tenant Expenses
fields:
	- "Monthly Rent": expenses_monthly_rent
		datatype: currency
		required: true

	- "Utilities (gas, electric, water, trash)": expenses_rental_utilities
		datatype: currency
		required: true

	- "Renter's Insurance": expenses_renters_insurance
		datatype: currency
		required: true

	- "On average, how much do you spend each month on  maintenance or repairs of your home?": expenses_rental_repairs
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(expense_types["home mortgage"]) if defined("expense_types") else Undefined())))
question: ''
subquestion: |
	# Homeowner Expenses
fields:
	- "Average Monthly Mortgage. If no mortgage, just say $0.": expenses_monthly_mortgage
		datatype: currency
		required: true

	- "Utilities (gas, electric, water, trash)": expenses_homeowner_utility
		datatype: currency
		required: true

	- "On average, how much of your mortgate payment is spent on paying down the principal?": expenses_mortgage_principle
		datatype: currency
		required: true

	- "On average, how much of your mortgage payment is spent on interest?": expenses_mortgage_interest
		datatype: currency
		required: true

	- "How much do you spend on property taxes each year?": expenses_property_taxes
		datatype: currency
		required: true

	- "How much do you spend each month on homeowner's insurance?": expenses_homeowners_insurance
		datatype: currency
		required: true

	- "On average, how much do you spend each month on  maintenance or repairs of your home?": expenses_homeowners_repairs
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(expense_types["spousal support"]) if defined("expense_types") else Undefined())))
question: ''
subquestion: |
	# Spousal Support Expenses
fields:
	- "How much did you pay last month in court-ordered spousal support?": deduction_spousal_support
		datatype: currency
		required: true

	- "Check if applicable": deduction_spousal_tax
		datatype: checkboxes
		required: true
		choices:
			- "Spousal support is federally tax deductible": "deductible"
		none of the above: False

	- html: |
			<p>Check the box above if the spousal support order or judgment was executed by the parties and the court before January 1, 2019, or if a court-ordered change maintains the spousal support payments as taxable income to the recipient and tax deductible to the payor.</p>


under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(expense_types["partner support"]) if defined("expense_types") else Undefined())))
question: ''
subquestion: |
	# Partner Support Expenses
fields:
	- "How much did you pay last month in court-ordered partner support?": deduction_partner_support
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(expense_types["child support"]) if defined("expense_types") else Undefined())))
question: ''
subquestion: |
	# Child Support Expenses
fields:
	- "How much did you pay last month in court-ordered child support for children from different relationships?": deduction_child_support
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(expense_types["children related to case"]) if defined("expense_types") else Undefined())))
question: ''
subquestion: |
	# Childcare Expenses
fields:
	- "How much do you pay monthly for childcare so you can work or get job training?": childcare_to_work
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='childcare_to_work'/>

	- "How much do you pay monthly for your children's health care (amounts insurance does **not** cover)?": uncovered_children_healthcare
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='uncovered_children_healthcare'/>

	- "How much do you pay monthly for travel expenses for visitation?": visitation_travel_expense
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='visitation_travel_expense'/>

	- "How much do you pay monthly for your children's educational or other special needs?": children_special_needs
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='children_special_needs'/>

	- "How much do you pay monthly for your children's health insurance? _Do not include the amount your employer pays._": insurance_for_children_cost
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='insurance_for_children_cost'/>

	- "Do you have health insurance available to you for the children through your job?": insurance_for_children_via_job
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='insurance_for_children_via_job'/>

	- "Name of insurance company (if applicable)": children_insurance_name
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='children_insurance_name'/>

	- "Address of insurance company (if applicable)": children_insurance_address
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='children_insurance_address'/>

	- "How much do you pay monthly for any additional childcare not listed above?": expenses_additional_childcare
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='expenses_additional_childcare'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var children_insurance_name_field = $('#children_insurance_name').closest('.form-group');
		var children_insurance_address_field = $('#children_insurance_address').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      childcare_to_work: null,
			uncovered_children_healthcare: null,
			visitation_travel_expense: null,
			children_special_needs: null,
			insurance_for_children_cost: null,
			insurance_for_children_via_job: null,
			children_insurance_name: null,
			children_insurance_address: null,
			expenses_additional_childcare: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: children_insurance_name, field: children_insurance_name_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['insurance_for_children_via_job']) } },
			{ shouldShow: false, variableName: children_insurance_address, field: children_insurance_address_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['insurance_for_children_via_job']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
code: |
	expenses_childcare_total = ((((augment(childcare_to_work) + (augment(uncovered_children_healthcare)))) + ((augment(visitation_travel_expense) + (augment(children_special_needs))))) + ((augment(insurance_for_children_cost) + (augment(expenses_additional_childcare))))).primitive_value()
---
mandatory: |
	((((augment(special_hardships["Extraordinary Health"]) if defined("special_hardships") else Undefined()))).logical_and(((augment(have_children_with_spouse) if defined("have_children_with_spouse") else Undefined()))))
question: ''
subquestion: |
	# Extraordinary Health Expenses
	Extraordinary health expenses do not include health expenses listed in prior sections -- for example, in the section on child healthcare insurance.
fields:
	- "Amount per month": extra_healthcare_amount
		datatype: currency
		required: true

	- "For how many months?": extra_healthcare_months
		datatype: integer
		required: true

	- "Attach documentaion, including court orders (as a single PDF)": extra_healthcare_proof
		datatype: file
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	((((augment(special_hardships["Major Losses"]) if defined("special_hardships") else Undefined()))).logical_and(((augment(have_children_with_spouse) if defined("have_children_with_spouse") else Undefined()))))
question: ''
subquestion: |
	# Major Loss Expenses
	Major losses **not covered by insurance** (examples: fire, theft, other uninsured loss)
fields:
	- "Amount per month": major_loss_amount
		datatype: currency
		required: true

	- "For how many months?": major_loss_months
		datatype: integer
		required: true

	- "Attach documentaion, including court orders (as a single PDF)": major_loss_proof
		datatype: file
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	((((augment(expense_types["children unrelated to case"]) if defined("expense_types") else Undefined()))).logical_and(((augment(have_children_with_spouse) if defined("have_children_with_spouse") else Undefined()))))
question: ''
subquestion: |
	# Other Relationship Children Expenses
	Expenses for your minor children who are from other relationships and are living with you
fields:
	- "Amount per month": other_relationship_children_amount
		datatype: currency
		required: true

	- "For how many months?": other_relationship_children_months
		datatype: integer
		required: true

	- "The names and ages of those children": other_relationship_children_name_and_ages
		datatype: area
		required: true

	- "Monthly child support you receive for those children": other_relationship_children_child_support_received
		datatype: currency
		required: true

	- "Attach documentaion, including court orders (as a single PDF)": other_relationship_children_hardship_proof
		datatype: file
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	((((((augment(have_children_with_spouse) if defined("have_children_with_spouse") else Undefined()))).logical_and(((augment(special_hardships["Major Losses"]) if defined("special_hardships") else Undefined())))).logical_or(((augment(expense_types["children unrelated to case"]) if defined("expense_types") else Undefined())))).logical_or(((augment(special_hardships["Extraordinary Health"]) if defined("special_hardships") else Undefined()))))
question: ''
subquestion: |
	# Special Expenses Explanation
	You listed expenses related to **one or more** of the following special hardships:

	- Extraordinary health costs
	- Major uninsured losses
	- Children from other relationships
fields:
	- "For the special hardships you listed, explain why they create an extreme financial hardship": special_hardship_explanation
		datatype: area
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(expense_types["installment/debt"]) if defined("expense_types") else Undefined())))
question: ''
subquestion: |
	# Installment and Debt Expenses
	Please provide information about the monthly installment payments or debt payments.
fields:
	- "Who do you make payments to?": debt_creditor1
		datatype: text
		required: true

	- "What's the loan for?": debt_type1
		datatype: text
		required: true

	- "Monthly Amount": debt_monthly1
		datatype: currency
		required: true

	- "What's the remaining balance of the debt?": debt_balance1
		datatype: currency
		required: true

	- "Date of last payment": debt_payment1
		datatype: text
		required: true

	- "Do you make any additional installment or debt payments not listed above?": debt2
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
code: |
	debt1_defined = (ternary(expense_types["installment/debt"], debt_monthly1, 0))
---
mandatory: |
	(((augment(debt2) if defined("debt2") else Undefined())))
question: ''
subquestion: |
	# **Installment and Debt Expenses**
	Please provide information about the monthly installment payments or debt payments.
fields:
	- "Who do you make payments to?": debt_creditor2
		datatype: text
		required: true

	- "What's this loan for?": debt_type2
		datatype: text
		required: true

	- "Monthly Amount": debt_monthly2
		datatype: currency
		required: true

	- "What's the remaining balance of the debt?": debt_balance2
		datatype: currency
		required: true

	- "Date of last payment": debt_payment2
		datatype: text
		required: true

	- "Do you make any additional installment or debt payments not listed above?": debt3
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
code: |
	debt2_defined = (ternary(debt2, debt_monthly2, 0))
---
mandatory: |
	(((augment(debt3) if defined("debt3") else Undefined())))
question: ''
subquestion: |
	# **Installment and Debt Expenses**
	Please provide information about the monthly installment payments or debt payments.
fields:
	- "Who do you make payments to?": debt_creditor3
		datatype: text
		required: true

	- "What's this loan for?": debt_type3
		datatype: text
		required: true

	- "Monthly Amount": debt_monthly3
		datatype: currency
		required: true

	- "What's the remaining balance of the debt?": debt_balance3
		datatype: currency
		required: true

	- "Date of last payment": debt_payment3
		datatype: text
		required: true

	- "Do you make any additional installment or debt payments not listed above?": debt4
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
code: |
	debt3_defined = (ternary(debt3, debt_monthly3, 0))
---
mandatory: |
	(((augment(debt4) if defined("debt4") else Undefined())))
question: ''
subquestion: |
	# **Installment and Debt Expenses**
	Please provide information about the monthly installment payments or debt payments.
fields:
	- "Who do you make payments to?": debt_creditor4
		datatype: text
		required: true

	- "What's this loan for?": debt_type4
		datatype: text
		required: true

	- "Monthly Amount": debt_monthly4
		datatype: currency
		required: true

	- "What's the remaining balance of the debt?": debt_balance4
		datatype: currency
		required: true

	- "Date of last payment": debt_payment4
		datatype: text
		required: true

	- "Do you make any additional installment or debt payments not listed above?": debt5
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
code: |
	debt4_defined = (ternary(debt4, debt_monthly4, 0))
---
mandatory: |
	(((augment(debt5) if defined("debt5") else Undefined())))
question: ''
subquestion: |
	# **Installment and Debt Expenses**
	Please provide information about the monthly installment payments or debt payments.
fields:
	- "Who do you make payments to?": debt_creditor5
		datatype: text
		required: true

	- "What's this loan/debt for?": debt_type5
		datatype: text
		required: true

	- "Monthly Amount": debt_monthly5
		datatype: currency
		required: true

	- "What's the remaining balance of this loan?": debt_balance5
		datatype: currency
		required: true

	- "Date of last payment": debt_payment5
		datatype: text
		required: true

	- "Do you make any additional installment or debt payments not listed above?": debt6
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
code: |
	debt5_defined = (ternary(debt5, debt_monthly5, 0))
---
mandatory: |
	(((augment(debt6) if defined("debt6") else Undefined())))
question: ''
subquestion: |
	# **Installment and Debt Expenses**
	Please provide information about the monthly installment payments or debt payments.
fields:
	- "Who do you make payments to?": debt_creditor6
		datatype: text
		required: true

	- "Why did you take out this loan?": debt_type6
		datatype: text
		required: true

	- "Monthly Amount": debt_monthly6
		datatype: currency
		required: true

	- "What's the remaining balance of this loan?": debt_balance6
		datatype: currency
		required: true

	- "Date of last payment": debt_payment6
		datatype: text
		required: true

	- "Do you make any additional installment or debt payments not listed above?": debt7
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
code: |
	debt6_defined = (ternary(debt6, debt_monthly6, 0))
---
mandatory: |
	(((augment(debt7) if defined("debt7") else Undefined())))
question: ''
subquestion: |
	# **Installment and Debt Expenses**
	Please provide information about the monthly installment payments or debt payments.
fields:
	- "Who do you make payments to?": debt_creditor7
		datatype: text
		required: true

	- "Why did you take out this loan?": debt_type7
		datatype: text
		required: true

	- "Monthly Amount": debt_monthly7
		datatype: currency
		required: true

	- "What's the remaining balance for this loan?": debt_balance7
		datatype: currency
		required: true

	- "Date of last payment": debt_payment7
		datatype: text
		required: true

	- "Do you make any additional installment or debt payments not listed above?": debt8
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
code: |
	debt7_defined = (ternary(debt7, debt_monthly7, 0))
---
mandatory: |
	(((augment(debt8) if defined("debt8") else Undefined())))
question: ''
subquestion: |
	# **Installment and Debt Expenses**
	Please provide information about the monthly installment payments or debt payments.
fields:
	- "Who do you make payments to?": debt_creditor8
		datatype: text
		required: true

	- "Why did you take out this loan?": debt_type8
		datatype: text
		required: true

	- "Monthly Amount": debt_monthly8
		datatype: currency
		required: true

	- "What's the remaining balance of this loan?": debt_balance8
		datatype: currency
		required: true

	- "Date of last payment": debt_payment8
		datatype: text
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
code: |
	debt8_defined = (ternary(debt8, debt_monthly8, 0))
---
code: |
	expenses_debt_total = (((((augment(debt1_defined) + (augment(debt2_defined)))) + ((augment(debt3_defined) + (augment(debt4_defined))))) + ((augment(debt5_defined) + (augment(debt6_defined))))) + ((augment(debt7_defined) + (augment(debt8_defined))))).primitive_value()
---
mandatory: |
	True
question: ''
subquestion: |
	# Review of Expenses
	Please review your expenses.

	- **Home payments:** $${home_expenses_defined}
	- **Real property taxes:** $${expenses_property_taxes_defined}
	- **Home insurance:** $${expenses_home_insurance_defined}
	- **Home maintenance and repairs:** $${expenses_home_repairs_defined}
	- **Healthcare costs not paid by insurance:** $${expenses_health}
	- **Child care:** $${expenses_childcare_total_defined}
	- **Groceries and household supplies:** $${expenses_household_supplies}
	- **Eating out:** $${expenses_eating_out}
	- **Utilities:** $${expenses_utilities_defined}
	- **Telephone, cell phone, and email:** $${expenses_communication}
	- **Laundry and cleaning:** $${expenses_cleaning}
	- **Clothes:** $${expenses_clothes}
	- **Education:** $${expenses_education}
	- **Entertainment, gifts, and vacation:** $${expenses_entertainment}
	- **Auto expenses and transportation:** $${expenses_transport}
	- **Insurance (life, accident, etc):** $${expenses_insurance}
	- **Savings and investments:** $${expenses_savings}
	- **Charitable contributions:** $${expenses_charity}
fields:
	- "Do you have any other expenses not listed above?": expenses_other
		datatype: yesnoradio
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='expenses_other'/>

	- "Description(s) of Other Expenses": other_expense_description
		datatype: text
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='other_expense_description'/>

	- "Other Expenses Monthly Amount": other_expense_amount
		datatype: currency
		required: true
		html: |
			<span hidden data-variable data-event-type='input' id='other_expense_amount'/>

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
script: |
  <script>
    // Those fields which should be conditionally shown
    var other_expense_description_field = $('#other_expense_description').closest('.form-group');
		var other_expense_amount_field = $('#other_expense_amount').closest('.form-group');

    // We track the values of all in-page fields
    var allVariableValues = {
      expenses_other: null,
			other_expense_description: null,
			other_expense_amount: null,
    };

    // We need to be able to map in-page checkbox labels to their actual values
    var checkboxLabelsAndValues = {
      
    }

    var showIfCallbacks = [
      { shouldShow: false, variableName: other_expense_description, field: other_expense_description_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['expenses_other']) } },
			{ shouldShow: false, variableName: other_expense_amount, field: other_expense_amount_field, required: true, callback: function() { return [true, 'True'].includes(allVariableValues['expenses_other']) } },
    ];

    hideAllConditionalFields();
    findCurrentValuesForAllFields();
    conditionallyShowFieldsBasedOnValues();
    assignFieldChangeListeners()

    function hideAllConditionalFields() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
        currentItem.field.hide();
      }
    }

    function findCurrentValuesForAllFields() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').each(function() {
          if (this.type === 'radio') {
            if ($(this).is(':checked')) calculateInputValue(this, variableName);
          } else {
            calculateInputValue(this, variableName);
          }
        });
      });
    }

    function showConditionalFieldsBasedOnCurrentValue(speed = null) {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        var currentItem = showIfCallbacks[i];
        if (currentItem.shouldShow) {
          currentItem.field.find('input, select, textarea').removeAttr('disabled');
          currentItem.field.show(speed);
        } else {
          currentItem.field.find('input, select, textarea').attr('disabled', 'disabled');
          currentItem.field.hide(speed);
        }
      }
    }

    function conditionallyShowFieldsBasedOnValues() {
      get_interview_variables(function(data) {
        if (data.success) {
          allVariableValues = Object.assign(allVariableValues, data.variables);
        }

        calculateShouldShowValues();
        showConditionalFieldsBasedOnCurrentValue();
      });
    }

    function calculateShouldShowValues() {
      for (var i = 0; i < showIfCallbacks.length; i++) {
        currentValue = showIfCallbacks[i];
        currentValue.shouldShow = currentValue.callback();
      }
    }

    function assignFieldChangeListeners() {
      $('[data-variable]').each(function() {
        var field = $(this);
        var eventType = field.data('event-type');
        var variableName = field.attr('id');
        field.closest('.form-group').find('input, select, textarea').on(eventType, function() {
          calculateInputValue(this, variableName);
          calculateShouldShowValues();
          showConditionalFieldsBasedOnCurrentValue('fast');
        });
      });
    }

    function calculateInputValue(el, variableName) {
      if (el.type === 'checkbox') {
        var checkboxValue = checkboxLabelsAndValues[variableName][el.alt];
        allVariableValues[variableName][checkboxValue] = $(el).is(':checked');
      } else {
        allVariableValues[variableName] = el.value;
      }
    }
  </script>
---
code: |
	other_expense_amount_defined = (ternary(expenses_other, other_expense_amount, 0))
---
mandatory: |
	True
question: ''
subquestion: |
	# Expenses Paid by Others
fields:
	- "What amount of your monthly expenses are paid by others?": expenses_amount_paid_by_others
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	True
question: ''
subquestion: |
	# Attorney Fees
fields:
	- "Is either party requesting attorney fees?": attorney_fees
		datatype: yesnoradio
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(attorney_fees) if defined("attorney_fees") else Undefined())))
question: ''
subquestion: |
	# Attorney Fees
fields:
	- "To date, you have paid your attorney this amount for fees and costs": expenses_attorney_fees
		datatype: currency
		required: true

	- "The source of this money was": expenses_attorney_fees_source
		datatype: text
		required: true

	- "How much do you still owe the attorney in fees and costs?": expenses_attorney_fees_outstanding
		datatype: currency
		required: true

	- "What is the hourly rate of your attorney?": expenses_attorney_hourly_rate
		datatype: currency
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(have_children_with_spouse) if defined("have_children_with_spouse") else Undefined())))
question: ''
subquestion: |
	# **Tell us about your children**
	This will help the Court understand more about financial issues related to child support in your case.
fields:
	- "How many children under the age of 18 do you have with the other parent in this case?": children_number
		datatype: integer
		required: true

	- "How often do you see your children (approximatley)?": frequency_with_children
		input type: radio
		required: true
		datatype: number
		choices:
			- "Every month": 720
			- "Every two weeks": 336
			- "Every week": 168
			- "Every day": 24

	- "When you see your children, how many hours do you see them for each time (approximatley)?": number_of_hours_with_children
		datatype: integer
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	(((augment(have_children_with_spouse) if defined("have_children_with_spouse") else Undefined())))
question: ''
subquestion: |
	# Tell us about your children
fields:
	- "Please provide any other information you want the court to know concerning support in your case": additional_information_about_support
		datatype: area
		required: false

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	True
question: ''
subquestion: |
	# Signature

	You declare under penalty of perjury under the laws of the State of California that the information contained in this submission and any attachments is true and correct.
signature: signature
under: |

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
	True
question: ''
subquestion: |
	# Date of Signature
fields:
	- "What is today's date?": signature_date
		datatype: text
		required: true

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
mandatory: |
  True
code: |
  if len(missing_files) > 0:
    send_email(to=party_email, template=incomplete_email)
  else:
    send_email(to=party_email, template=complete_email)
---
mandatory: |
	True
question: ''
subquestion: |
	# Your completed FL-150 is ready for download.
	Please click the link(s) below to download your filled out FL-150 form, as well as any supporting addendums.

attachment code: |
	filter(bool, [FL_150_73c36ecae5e3, Addendum_to_Income_and_Expense_Declaration_template_a60feaed58e5])
allow emailing: False
under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
code: |
	asset_other_property = ((augment(asset_real_property) + (augment(asset_personal_property)))).primitive_value()
---
code: |
	question1otherjobs_employment2_paragraph = """Employer: %s

	Employer\'s address: %s

	Employer\'s phone number: %s

	Occupation: %s

	Date job started: %s

	I work about %s hours per week.

	I get paid $%s gross (before taxes) per month""" % (employer_name2,employment_address2,employment_phone2,employment_occupation2,employment_start_date2,employment_hours_worked2,employment_wage2)
---
code: |
	insert_question1otherjobs_employment2_paragraph = (ternary(second_job, question1otherjobs_employment2_paragraph, ""))
---
code: |
	question1otherjobs_employment3_paragraph = """Employer: %s

	Employer\'s address: %s

	Employer\'s phone number: %s

	Occupation:  %s

	Date job started: %s

	I work about %s hours per week.

	I get paid $ %s gross (before taxes) per month""" % (employer_name3,employment_address3,employment_phone3,employment_occupation3,employment_start_date3,employment_hours_worked3,employment_wage3)
---
code: |
	insert_question1otherjobs_employment3_paragraph = (ternary(third_job, question1otherjobs_employment3_paragraph, ""))
---
code: |
	question12_person6_paragraph = """**Question 12--The following people live with me**


	Name: %s

	Age: %s

	How the person is related to me: %s

	That person\'s gross monthly income: %s

	Does the person pay some of the household expenses: %s""" % (householdname6,householdage6,householdrelation6,householdincome6,payyesno6)
---
code: |
	insert_question12_person6_paragraph = (ternary(household_size6, question12_person6_paragraph, "See FL-150 Form"))
---
code: |
	question12_person7_paragraph = """Name: %s

	Age: %s

	How the person is related to me: %s

	That person\'s gross monthly income: %s

	Does the person pay some of the household expenses: %s""" % (householdname7,householdage7,householdrelation7,householdincome7,payyesno7)
---
code: |
	insert_question12_person7_paragraph = (ternary(household_size7, question12_person7_paragraph, ""))
---
code: |
	question12_person8_paragraph = """Name: %s

	Age: %s

	How the person is related to me: %s

	That person\'s gross monthly income: %s

	Does the person pay some of the household expenses: %s""" % (householdname8,householdage8,householdrelation8,householdincome8,payyesno8)
---
code: |
	insert_question12_person8_paragraph = (ternary(household_size8, question12_person8_paragraph, ""))
---
code: |
	character_limit_other_party_income_based_on = (((augment(other_party_income_based_on).__len__())) > ((augment(25)))).primitive_value()
---
code: |
	pdf_other_party_income_based_on = (ternary(character_limit_other_party_income_based_on, "See Addendum", other_party_income_based_on))
---
code: |
	addendum_other_party_income_is_based_on = (ternary(character_limit_other_party_income_based_on, other_party_income_based_on, "See FL-150 form"))
---
code: |
	character_limit_source_of_other_income = (((augment(additional_income_description).__len__())) > ((augment(25)))).primitive_value()
---
code: |
	pdf_source_of_other_income = (ternary(character_limit_source_of_other_income, "See addendum", additional_income_description))
---
code: |
	addendum_source_of_other_income = (ternary(character_limit_source_of_other_income, additional_income_description, "See Form FL-150"))
---
code: |
	character_limit_income_change_description = (((augment(income_change_description).__len__())) > ((augment(25)))).primitive_value()
---
code: |
	addendum_income_change_description = (ternary(character_limit_income_change_description, income_change_description, "See FL-150 form"))
---
code: |
	pdf_income_change_description = (ternary(character_limit_income_change_description, "See Addendum", income_change_description))
---
code: |
	question14_debt7_paragraph = """Paid to: %s

	For: %s

	Amount ($): %s

	Balance ($): %s

	Date of last payment: %s""" % (debt_creditor7,debt_type7,debt_monthly7,debt_balance7,debt_payment7)
---
code: |
	insert_question14_debt7_paragraph = (ternary(debt7, question14_debt7_paragraph, "See FL-150 Form"))
---
code: |
	question14_debt8_paragraph = """
	Paid to: %s

	For: %s

	Amount ($): %s

	Balance ($): %s

	Date of last referral: %s""" % (debt_creditor8,debt_type8,debt_monthly8,debt_balance8,debt_payment8)
---
code: |
	insert_question14_debt8_paragraph = (ternary(debt8, question14_debt8_paragraph, ""))
---
code: |
	character_limit_other_relationship_children_name_and_ages = (((augment(other_relationship_children_name_and_ages).__len__())) > ((augment(40)))).primitive_value()
---
code: |
	pdf_other_relationship_children_name_and_ages = (ternary(character_limit_other_relationship_children_name_and_ages, "See Addendum", other_relationship_children_name_and_ages))
---
code: |
	addendum_other_relationship_children_name_and_ages = (ternary(character_limit_other_relationship_children_name_and_ages, other_relationship_children_name_and_ages, "See FL-150 Form"))
---
code: |
	character_limit_special_hardship_explanation = (((augment(special_hardship_explanation).__len__())) > ((augment(40)))).primitive_value()
---
code: |
	pdf_special_hardship_explanation = (ternary(character_limit_special_hardship_explanation, "See Addendum", special_hardship_explanation))
---
code: |
	addendum_special_hardship_explanation = (ternary(character_limit_special_hardship_explanation, special_hardship_explanation, "See FL-150 Form"))
---
code: |
	character_limit_additional_information_about_support = (((augment(additional_information_about_support).__len__())) > ((augment(40)))).primitive_value()
---
code: |
	pdf_additional_information_about_support = (ternary(character_limit_additional_information_about_support, "See Addendum", additional_information_about_support))
---
code: |
	addendum_additional_information_about_support = (ternary(character_limit_additional_information_about_support, additional_information_about_support, "See FL-150 Form"))
---
code: |
	per_month_checked = ((augment(employment_wage1) > (augment(0)))).primitive_value()
---
code: |
	high_school_incomplete = ((augment(education_level) < (augment(12)))).primitive_value()
---
code: |
	completed_college = ((augment(education_level) >= (augment(16)))).primitive_value()
---
code: |
	completed_graduate = ((augment(education_level) >= (augment(18)))).primitive_value()
---
code: |
	years_of_college = ((augment(education_level) - (augment(12)))).primitive_value()
---
code: |
	years_of_college_makes_sense = ((augment(years_of_college) >= (augment(0)))).primitive_value()
---
code: |
	years_of_college_filled = (ternary(years_of_college_makes_sense, years_of_college, 0))
---
code: |
	filed_taxes = ((augment(tax_filing_year) >= (augment(0)))).primitive_value()
---
code: |
	petitioner = (ternary(filer_is_petitioner, party_name, name_of_spouse))
---
code: |
	respondent = (ternary(filer_is_petitioner, name_of_spouse, party_name))
---
code: |
	deduction_union1_defined = (ternary(union1, deduction_union1, 0))
---
code: |
	deduction_union2_defined = (ternary(union2, deduction_union2, 0))
---
code: |
	deduction_union3_defined = (ternary(union3, deduction_union3, 0))
---
code: |
	deduction_union = (((augment(deduction_union1_defined) + (augment(deduction_union2_defined)))) + ((augment(deduction_union3_defined)))).primitive_value()
---
code: |
	deduction_health1_defined = (ternary(health1, deduction_health1, 0))
---
code: |
	deduction_health2_defined = (ternary(health2, deduction_health2, 0))
---
code: |
	deduction_health3_defined = (ternary(health3, deduction_health3, 0))
---
code: |
	deduction_health = (((augment(deduction_health1_defined) + (augment(deduction_health2_defined)))) + ((augment(deduction_health3_defined)))).primitive_value()
---
code: |
	deduction_retirement1_defined = (ternary(retirement1, deduction_retirement1, 0))
---
code: |
	deduction_retirement2_defined = (ternary(retirement2, deduction_retirement2, 0))
---
code: |
	deduction_retirement3_defined = (ternary(retirement3, deduction_retirement3, 0))
---
code: |
	deduction_retirement = (((augment(deduction_retirement1_defined) + (augment(deduction_retirement2_defined)))) + ((augment(deduction_retirement3_defined)))).primitive_value()
---
code: |
	deduction_job_related1_defined = (ternary(job_related_expenses1, deduction_job_related1, 0))
---
code: |
	deduction_job_related2_defined = (ternary(job_related_expenses2, deduction_job_related2, 0))
---
code: |
	deduction_job_related3_defined = (ternary(job_related_expenses3, deduction_job_related3, 0))
---
code: |
	deduction_job_related = (((augment(deduction_job_related1_defined) + (augment(deduction_job_related2_defined)))) + ((augment(deduction_job_related3_defined)))).primitive_value()
---
code: |
	wage_last_month1_defined = (ternary(current_or_former_employment, wage_last_month1, 0))
---
code: |
	wage_last_month2_defined = (ternary(second_job, wage_last_month2, 0))
---
code: |
	wage_last_month3_defined = (ternary(third_job, wage_last_month3, 0))
---
code: |
	wage_last_month_total = (((augment(wage_last_month1_defined) + (augment(wage_last_month2_defined)))) + ((augment(wage_last_month3_defined)))).primitive_value()
---
code: |
	wage_avg_monthly1_defined = (ternary(current_or_former_employment, wage_avg_monthly1, 0))
---
code: |
	wage_avg_monthly2_defined = (ternary(second_job, wage_avg_monthly2, 0))
---
code: |
	wage_avg_monthly3_defined = (ternary(third_job, wage_avg_monthly3, 0))
---
code: |
	wage_avg_monthly_total = ((((augment(wage_avg_monthly1_defined) + (augment(wage_avg_monthly2_defined)))) + ((augment(wage_avg_monthly3_defined)))) / ((augment(12)))).primitive_value()
---
code: |
	commission_last_month1_defined = (ternary(current_or_former_employment, commission_last_month1, 0))
---
code: |
	commission_last_month2_defined = (ternary(second_job, commission_last_month2, 0))
---
code: |
	commission_last_month3_defined = (ternary(third_job, commission_last_month3, 0))
---
code: |
	commission_last_month_total = (((augment(commission_last_month1_defined) + (augment(commission_last_month2_defined)))) + ((augment(commission_last_month3_defined)))).primitive_value()
---
code: |
	commission_monthly_avg1_defined = (ternary(current_or_former_employment, commission_avg_monthly1, 0))
---
code: |
	commission_monthly_avg2_defined = (ternary(second_job, commission_avg_monthly2, 0))
---
code: |
	commission_monthly_avg3_defined = (ternary(third_job, commission_avg_monthly3, 0))
---
code: |
	commission_monthly_avg_total = ((((augment(commission_monthly_avg1_defined) + (augment(commission_monthly_avg2_defined)))) + ((augment(commission_monthly_avg3_defined)))) / ((augment(12)))).primitive_value()
---
code: |
	overtime_last_month1_defined = (ternary(current_or_former_employment, overtime_last_month1, 0))
---
code: |
	overtime_last_month2_defined = (ternary(second_job, overtime_last_month2, 0))
---
code: |
	overtime_last_month3_defined = (ternary(third_job, overtime_last_month3, 0))
---
code: |
	total_overtime_last_month = (((augment(overtime_last_month1_defined) + (augment(overtime_last_month2_defined)))) + ((augment(overtime_last_month3_defined)))).primitive_value()
---
code: |
	overtime_avg_monthly1_defined = (ternary(current_or_former_employment, overtime_avg_monthly1, 0))
---
code: |
	overtime_avg_monthly2_defined = (ternary(second_job, overtime_avg_monthly2, 0))
---
code: |
	overtime_avg_monthly3_defined = (ternary(third_job, overtime_avg_monthly3, 0))
---
code: |
	overtime_avg_monthly_total = ((((augment(overtime_avg_monthly1_defined) + (augment(overtime_avg_monthly2_defined)))) + ((augment(overtime_avg_monthly3_defined)))) / ((augment(12)))).primitive_value()
---
code: |
	income_public_benefits_monthly_avg = ((augment(income_public_benefits_year) / (augment(12)))).primitive_value()
---
code: |
	income_spousal_support_monthly_avg = ((augment(income_spousal_support_year) / (augment(12)))).primitive_value()
---
code: |
	income_partner_support_monthly_avg = ((augment(income_partner_support_year) / (augment(12)))).primitive_value()
---
code: |
	income_pension_retirement_monthly_avg = ((augment(income_pension_retirement_year) / (augment(12)))).primitive_value()
---
code: |
	income_social_security_monthly_avg = ((augment(income_social_security_year) / (augment(12)))).primitive_value()
---
code: |
	income_disability_monthly_avg = ((augment(income_disability_year) / (augment(12)))).primitive_value()
---
code: |
	income_unemployment_comp_monthly_avg = ((augment(income_unemployment_year) / (augment(12)))).primitive_value()
---
code: |
	income_workers_comp_monthly_avg = ((augment(income_workers_comp_year) / (augment(12)))).primitive_value()
---
code: |
	income_other_monthly_avg = ((augment(income_other_year) / (augment(12)))).primitive_value()
---
code: |
	dividends_monthly_avg = ((augment(dividends_investment_year) / (augment(12)))).primitive_value()
---
code: |
	rental_investment_monthly_avg = ((augment(rental_investment_year) / (augment(12)))).primitive_value()
---
code: |
	trust_monthly_avg = ((augment(trust_investment_year) / (augment(12)))).primitive_value()
---
code: |
	business_last_month = (((augment(business_last_month1_defined) + (augment(business_last_month2_defined)))) + ((augment(business_last_month3_defined)))).primitive_value()
---
code: |
	business_last_month1_defined = (ternary(business1, business_last_month1, 0))
---
code: |
	business_last_month2_defined = (ternary(business2, business_last_month2, 0))
---
code: |
	business_last_month3_defined = (ternary(business3, business_last_month3, 0))
---
code: |
	business_year1_defined = (ternary(business1, business_year1, 0))
---
code: |
	business_year2_defined = (ternary(business2, business_year2, 0))
---
code: |
	business_year3_defined = (ternary(business3, business_year3, 0))
---
code: |
	business_year = ((((augment(business_year1_defined) + (augment(business_year2_defined)))) + ((augment(business_year3_defined)))) / ((augment(12)))).primitive_value()
---
code: |
	other_investment_monthly_avg = ((augment(other_investment_year) / (augment(12)))).primitive_value()
---
code: |
	home_expenses = (ternary(expense_types["home mortgage"], expenses_monthly_mortgage, expenses_monthly_rent))
---
code: |
	expenses_home_insurance = (ternary(expense_types["home mortgage"], expenses_homeowners_insurance, expenses_renters_insurance))
---
code: |
	expenses_home_repairs = (ternary(expense_types["home mortgage"], expenses_homeowners_repairs, expenses_rental_repairs))
---
code: |
	expenses_utilities = (ternary(expense_types["home mortgage"], expenses_homeowner_utility, expenses_rental_utilities))
---
code: |
	deduction_job_related_addendum_paragraph1 = """Job 1: %s""" % (deduction_job_related_description1)
---
code: |
	deduction_job_related_addendum_paragraph2 = """Job 2: %s""" % (deduction_job_related_description2)
---
code: |
	deduction_job_related_addendum_paragraph3 = """Job 3: %s""" % (deduction_job_related_description3)
---
code: |
	insert_deduction_job_related_addendum_paragraph1 = (ternary(job_related_expenses1, deduction_job_related_addendum_paragraph1, ""))
---
code: |
	insert_deduction_job_related_addendum_paragraph2 = (ternary(job_related_expenses2, deduction_job_related_addendum_paragraph2, ""))
---
code: |
	insert_deduction_job_related_addendum_paragraph3 = (ternary(job_related_expenses3, deduction_job_related_addendum_paragraph3, ""))
---
code: |
	has_home = (((augment(expense_types["home mortgage"]))).logical_or((augment(expense_types["home rental"])))).primitive_value()
---
code: |
	expenses_property_taxes_defined = (ternary(expense_types["home mortgage"], expenses_property_taxes, 0))
---
code: |
	expenses_childcare_total_defined = (ternary(expense_types["children related to case"], expenses_childcare_total, 0))
---
code: |
	expenses_utilities_defined = (ternary(has_home, expenses_utilities, 0))
---
code: |
	home_expenses_defined = (ternary(has_home, home_expenses, 0))
---
code: |
	expenses_home_insurance_defined = (ternary(has_home, expenses_home_insurance, 0))
---
code: |
	expenses_home_repairs_defined = (ternary(has_home, expenses_home_repairs, 0))
---
code: |
	expenses_total_debt_defined = (ternary(expense_types["installment/debt"], expenses_debt_total, 0))
---
code: |
	expenses_grand_total = (((((((((((augment(expenses_health) + (augment(expenses_household_supplies)))) + ((augment(expenses_eating_out) + (augment(expenses_communication))))) + ((augment(expenses_cleaning) + (augment(expenses_clothes))))) + ((augment(expenses_education) + (augment(expenses_entertainment))))) + ((augment(expenses_transport) + (augment(expenses_insurance))))) + ((augment(expenses_savings) + (augment(expenses_charity))))) + ((augment(other_expense_amount_defined) + (augment(expenses_total_debt_defined))))) + ((augment(expenses_home_repairs_defined) + (augment(expenses_home_insurance_defined))))) + ((augment(home_expenses_defined) + (augment(expenses_utilities_defined))))) + ((augment(expenses_childcare_total_defined) + (augment(expenses_property_taxes_defined))))).primitive_value()
---
code: |
	payyesno6 = (ternary(householdpayexpenses6, "Yes", "No"))
---
code: |
	payyesno7 = (ternary(householdpayexpenses7, "Yes", "No"))
---
code: |
	payyesno8 = (ternary(householdpayexpenses8, "Yes", "No"))
---
code: |
	past_employed = ((augment(employment) == (augment("in past")))).primitive_value()
---
code: |
	owner_business_header = """Tell us about the business you own"""
---
code: |
	contractor_header = """Independent Contractor Income"""
---
code: |
	business_header = (ternary(income_types["self-employment income"], owner_business_header, contractor_header))
---
code: |
	owner_business_subheader = """You said that you own one or more businesses. Please provide details about this business below."""
---
code: |
	contractor_subheader = """You said that your %s work is as an independent contractor. This means that you received a 1099 tax form from a business and did not have taxes withheld from your paycheck.""" % (current_or_former)
---
code: |
	business_subheader = (ternary(income_types["self-employment income"], owner_business_subheader, contractor_subheader))
---
code: |
	owner_business_name_q = """What\'s the name of your business?"""
---
code: |
	contractor_name_q = """What\'s the name of the %s business you contract with?""" % (current_or_former)
---
code: |
	business_name_q = (ternary(income_types["self-employment income"], owner_business_name_q, contractor_name_q))
---
code: |
	contractor_years_q = """How many years have you done this type of work?"""
---
code: |
	owner_years_q = """How many years have you owned or been involved in this business?"""
---
code: |
	business_years_q = (ternary(income_types["self-employment income"], owner_years_q, contractor_years_q))
---
code: |
	contractor_upload_q = """If you have filed a tax return since your %s work as an independent contractor for this business, please upload the Schedule that you filed as part of your return.""" % (current_or_former)
---
code: |
	owner_upload_q = """Attach the Schedule C you completed for this business and submitted as part of your last tax return OR attach a statement showing the profit and loss  of this business for the last two years."""
---
code: |
	business_upload_q = (ternary(income_types["self-employment income"], owner_upload_q, contractor_upload_q))
---
code: |
	contractor_loop_q = """Are you an independent contractor for another business?"""
---
code: |
	owner_loop_q = """Do you have another business?"""
---
code: |
	business_loop_q = (ternary(income_types["self-employment income"], owner_loop_q, contractor_loop_q))
---
code: |
	business1 = (((augment(employee_contractor) == (augment("contractor")))).logical_or((augment(income_types["self-employment income"])))).primitive_value()
---
code: |
	percent_with_children = (((augment(number_of_hours_with_children) / (augment(frequency_with_children)))) * ((augment(100)))).primitive_value()
---
code: |
	percent_spouse_with_children = ((augment(100) - (augment(percent_with_children)))).primitive_value()
---
code: |
	current_or_former = (ternary(currently_employed, "current", "most recent"))
---
code: |
	currently_employed = ((augment(employment) == (augment("current")))).primitive_value()
---
code: |
	formerly_employed = ((augment(employment) == (augment("in past")))).primitive_value()
---
code: |
	upload_current_or_former = (ternary(currently_employed, "Please locate and upload copies of your pay stubs from the last two months.", "Please locate and upload copies of your pay stubs from the last two months of your most recent job."))
---
code: |
	import requests
	import json
	import time
	template_id = 650
	access_key = 'A2XVMPsRhp'
	drawn_variables = {'11900': markdown_to_plaintext(str(petitioner if defined("petitioner") else "")), '11880': markdown_to_plaintext(str(income_spousal_support_source if defined("income_spousal_support_source") else "")), '11872': markdown_to_plaintext(str(income_partner_support_source if defined("income_partner_support_source") else "")), '11855': markdown_to_plaintext(str(completed_graduate if defined("completed_graduate") else "")), '11856': markdown_to_plaintext(str(education_license if defined("education_license") else "")), '11864': markdown_to_plaintext(str(___shortcut_427_false if defined("___shortcut_427_false") else "")), '11859': markdown_to_plaintext(str(___shortcut_608_choice if defined("___shortcut_608_choice") else "")), '11860': markdown_to_plaintext(str(___shortcut_635_choice if defined("___shortcut_635_choice") else "")), '11861': markdown_to_plaintext(str(___shortcut_645_choice if defined("___shortcut_645_choice") else "")), '11858': markdown_to_plaintext(str(filed_taxes if defined("filed_taxes") else "")), '11876': markdown_to_plaintext(str(___shortcut_620_choice if defined("___shortcut_620_choice") else "")), '11877': markdown_to_plaintext(str(___shortcut_631_choice if defined("___shortcut_631_choice") else "")), '11878': markdown_to_plaintext(str(income_one_time if defined("income_one_time") else "")), '11885': markdown_to_plaintext(str(householdpayexpenses1 if defined("householdpayexpenses1") else "")), '11887': markdown_to_plaintext(str(householdpayexpenses2 if defined("householdpayexpenses2") else "")), '11889': markdown_to_plaintext(str(householdpayexpenses3 if defined("householdpayexpenses3") else "")), '11891': markdown_to_plaintext(str(householdpayexpenses4 if defined("householdpayexpenses4") else "")), '11893': markdown_to_plaintext(str(householdpayexpenses5 if defined("householdpayexpenses5") else "")), '11886': markdown_to_plaintext(str(___shortcut_497_false if defined("___shortcut_497_false") else "")), '11869': markdown_to_plaintext(str(income_spousal_support_source if defined("income_spousal_support_source") else "")), '11871': markdown_to_plaintext(str(income_partner_support_source if defined("income_partner_support_source") else "")), '11927': markdown_to_plaintext(str(business_type if defined("business_type") else "")), '11935': markdown_to_plaintext(str(asset_other_property if defined("asset_other_property") else "")), '11942': markdown_to_plaintext(str(householdname2 if defined("householdname2") else "")), '11943': markdown_to_plaintext(str(householdname3 if defined("householdname3") else "")), '11945': markdown_to_plaintext(str(householdname5 if defined("householdname5") else "")), '11946': markdown_to_plaintext(str(householdage1 if defined("householdage1") else "")), '11947': markdown_to_plaintext(str(householdage2 if defined("householdage2") else "")), '11948': markdown_to_plaintext(str(householdage3 if defined("householdage3") else "")), '11949': markdown_to_plaintext(str(householdage4 if defined("householdage4") else "")), '11950': markdown_to_plaintext(str(householdage5 if defined("householdage5") else "")), '11905': markdown_to_plaintext(str(party_name if defined("party_name") else "")), '11850': markdown_to_plaintext(str(petitioner if defined("petitioner") else "")), '11936': markdown_to_plaintext(str(respondent if defined("respondent") else "")), '11938': markdown_to_plaintext(str(case_number if defined("case_number") else "")), '11953': markdown_to_plaintext(str(householdrelation3 if defined("householdrelation3") else "")), '11974': markdown_to_plaintext(str(debt_monthly5 if defined("debt_monthly5") else "")), '11964': markdown_to_plaintext(str(debt_balance1 if defined("debt_balance1") else "")), '11965': markdown_to_plaintext(str(debt_balance2 if defined("debt_balance2") else "")), '11966': markdown_to_plaintext(str(debt_balance3 if defined("debt_balance3") else "")), '11960': markdown_to_plaintext(str(expenses_attorney_fees if defined("expenses_attorney_fees") else "")), '11963': markdown_to_plaintext(str(expenses_attorney_hourly_rate if defined("expenses_attorney_hourly_rate") else "")), '11898': markdown_to_plaintext(str(other_claimant_name if defined("other_claimant_name") else "")), '11904': markdown_to_plaintext(str(college_degrees_obtained if defined("college_degrees_obtained") else "")), '11906': markdown_to_plaintext(str((signature.url_for() if signature != "" else "") if defined("signature") else "")), '11915': markdown_to_plaintext(str(income_partner_support_month if defined("income_partner_support_month") else "")), '11917': markdown_to_plaintext(str(income_social_security_month if defined("income_social_security_month") else "")), '11920': markdown_to_plaintext(str(income_workers_comp_month if defined("income_workers_comp_month") else "")), '11921': markdown_to_plaintext(str(income_other_month if defined("income_other_month") else "")), '11924': markdown_to_plaintext(str(other_investment_last_month if defined("other_investment_last_month") else "")), '11911': markdown_to_plaintext(str(wage_last_month_total if defined("wage_last_month_total") else "")), '11922': markdown_to_plaintext(str(years_part_of_business if defined("years_part_of_business") else "")), '11941': markdown_to_plaintext(str(case_number if defined("case_number") else "")), '11939': markdown_to_plaintext(str(petitioner if defined("petitioner") else "")), '11882': markdown_to_plaintext(str(___shortcut_609_choice if defined("___shortcut_609_choice") else "")), '11883': markdown_to_plaintext(str(___shortcut_638_choice if defined("___shortcut_638_choice") else "")), '11884': markdown_to_plaintext(str(___shortcut_649_choice if defined("___shortcut_649_choice") else "")), '11901': markdown_to_plaintext(str(completed_college if defined("completed_college") else "")), '11933': markdown_to_plaintext(str(___shortcut_648_choice if defined("___shortcut_648_choice") else "")), '11879': markdown_to_plaintext(str(income_changed if defined("income_changed") else "")), '11931': markdown_to_plaintext(str(asset_personal_property_checkmark if defined("asset_personal_property_checkmark") else "")), '11910': markdown_to_plaintext(str(signature_date if defined("signature_date") else "")), '11958': markdown_to_plaintext(str(signature_date if defined("signature_date") else "")), '11907': markdown_to_plaintext(str(other_party_income if defined("other_party_income") else "")), '11909': markdown_to_plaintext(str(tax_exemptions if defined("tax_exemptions") else "")), '11937': markdown_to_plaintext(str(other_claimant_name if defined("other_claimant_name") else "")), '11849': markdown_to_plaintext(str(pdf_other_party_income_based_on if defined("pdf_other_party_income_based_on") else "")), '11926': markdown_to_plaintext(str(business_name if defined("business_name") else "")), '11852': markdown_to_plaintext(str(householdname1 if defined("householdname1") else "")), '11944': markdown_to_plaintext(str(householdname4 if defined("householdname4") else "")), '11951': markdown_to_plaintext(str(householdrelation1 if defined("householdrelation1") else "")), '11952': markdown_to_plaintext(str(householdrelation2 if defined("householdrelation2") else "")), '11959': markdown_to_plaintext(str((signature.url_for() if signature != "" else "") if defined("signature") else "")), '11970': markdown_to_plaintext(str(debt_monthly1 if defined("debt_monthly1") else "")), '11971': markdown_to_plaintext(str(debt_monthly2 if defined("debt_monthly2") else "")), '11972': markdown_to_plaintext(str(debt_monthly3 if defined("debt_monthly3") else "")), '11973': markdown_to_plaintext(str(debt_monthly4 if defined("debt_monthly4") else "")), '11967': markdown_to_plaintext(str(debt_balance4 if defined("debt_balance4") else "")), '11968': markdown_to_plaintext(str(debt_balance5 if defined("debt_balance5") else "")), '11969': markdown_to_plaintext(str(debt_balance6 if defined("debt_balance6") else "")), '11961': markdown_to_plaintext(str(expenses_attorney_fees_source if defined("expenses_attorney_fees_source") else "")), '11962': markdown_to_plaintext(str(expenses_attorney_fees_outstanding if defined("expenses_attorney_fees_outstanding") else "")), '11975': markdown_to_plaintext(str(debt_monthly6 if defined("debt_monthly6") else "")), '11978': markdown_to_plaintext(str(other_claimant_name if defined("other_claimant_name") else "")), '11980': markdown_to_plaintext(str(children_number if defined("children_number") else "")), '11987': markdown_to_plaintext(str(childcare_to_work if defined("childcare_to_work") else "")), '11897': markdown_to_plaintext(str(respondent if defined("respondent") else "")), '11981': markdown_to_plaintext(str(percent_with_children if defined("percent_with_children") else "")), '11988': markdown_to_plaintext(str(uncovered_children_healthcare if defined("uncovered_children_healthcare") else "")), '11989': markdown_to_plaintext(str(visitation_travel_expense if defined("visitation_travel_expense") else "")), '11990': markdown_to_plaintext(str(children_special_needs if defined("children_special_needs") else "")), '11992': markdown_to_plaintext(str(major_loss_amount if defined("major_loss_amount") else "")), '11899': markdown_to_plaintext(str(case_number if defined("case_number") else "")), '11851': markdown_to_plaintext(str(party_age if defined("party_age") else "")), '11903': markdown_to_plaintext(str(years_of_college_filled if defined("years_of_college_filled") else "")), '11993': markdown_to_plaintext(str(other_relationship_children_amount if defined("other_relationship_children_amount") else "")), '11995': markdown_to_plaintext(str(other_relationship_children_child_support_received if defined("other_relationship_children_child_support_received") else "")), '11991': markdown_to_plaintext(str(extra_healthcare_amount if defined("extra_healthcare_amount") else "")), '11928': markdown_to_plaintext(str(pdf_source_of_other_income if defined("pdf_source_of_other_income") else "")), '11929': markdown_to_plaintext(str(pdf_income_change_description if defined("pdf_income_change_description") else "")), '11994': markdown_to_plaintext(str(pdf_other_relationship_children_name_and_ages if defined("pdf_other_relationship_children_name_and_ages") else "")), '11996': markdown_to_plaintext(str(pdf_special_hardship_explanation if defined("pdf_special_hardship_explanation") else "")), '11997': markdown_to_plaintext(str(pdf_additional_information_about_support if defined("pdf_additional_information_about_support") else "")), '11954': markdown_to_plaintext(str(expense_types if defined("expense_types") else "")), '11913': markdown_to_plaintext(str(income_public_benefits_month if defined("income_public_benefits_month") else "")), '11914': markdown_to_plaintext(str(income_spousal_support_month if defined("income_spousal_support_month") else "")), '11916': markdown_to_plaintext(str(income_pension_retirement_month if defined("income_pension_retirement_month") else "")), '11918': markdown_to_plaintext(str(income_disability_month if defined("income_disability_month") else "")), '11925': markdown_to_plaintext(str(dividends_investment_last_month if defined("dividends_investment_last_month") else "")), '11923': markdown_to_plaintext(str(business_last_month if defined("business_last_month") else "")), '11934': markdown_to_plaintext(str(business_role_other_description if defined("business_role_other_description") else "")), '11955': markdown_to_plaintext(str(expense_types if defined("expense_types") else "")), '11940': markdown_to_plaintext(str(respondent if defined("respondent") else "")), '11857': markdown_to_plaintext(str(education_vocational if defined("education_vocational") else "")), '11862': markdown_to_plaintext(str(___shortcut_654_choice if defined("___shortcut_654_choice") else "")), '11930': markdown_to_plaintext(str(asset_real_property_checkmark if defined("asset_real_property_checkmark") else "")), '11976': markdown_to_plaintext(str(petitioner if defined("petitioner") else "")), '11977': markdown_to_plaintext(str(respondent if defined("respondent") else "")), '11979': markdown_to_plaintext(str(case_number if defined("case_number") else "")), '11919': markdown_to_plaintext(str(income_unemployment_month if defined("income_unemployment_month") else "")), '11999': markdown_to_plaintext(str(trust_investment_last_month if defined("trust_investment_last_month") else "")), '11998': markdown_to_plaintext(str(other_investment_income_name if defined("other_investment_income_name") else "")), '11932': markdown_to_plaintext(str(total_overtime_last_month if defined("total_overtime_last_month") else "")), '11912': markdown_to_plaintext(str(commission_last_month_total if defined("commission_last_month_total") else "")), '12000': markdown_to_plaintext(str(additional_income_amount if defined("additional_income_amount") else "")), '11957': markdown_to_plaintext(str(party_name if defined("party_name") else "")), '11984': markdown_to_plaintext(str(children_insurance_name if defined("children_insurance_name") else "")), '11982': markdown_to_plaintext(str(percent_spouse_with_children if defined("percent_spouse_with_children") else "")), '11986': markdown_to_plaintext(str(insurance_for_children_cost if defined("insurance_for_children_cost") else "")), '11985': markdown_to_plaintext(str(children_insurance_address if defined("children_insurance_address") else "")), '11868': markdown_to_plaintext(str(income_types if defined("income_types") else "")), '11894': markdown_to_plaintext(str(___shortcut_498_false if defined("___shortcut_498_false") else "")), '11896': markdown_to_plaintext(str(___shortcut_545_false if defined("___shortcut_545_false") else "")), '11895': markdown_to_plaintext(str(insurance_for_children_via_job if defined("insurance_for_children_via_job") else "")), '11873': markdown_to_plaintext(str(income_disability_source if defined("income_disability_source") else "")), '11874': markdown_to_plaintext(str(income_disability_source if defined("income_disability_source") else "")), '11875': markdown_to_plaintext(str(income_disability_source if defined("income_disability_source") else "")), '11881': markdown_to_plaintext(str(deduction_spousal_tax if defined("deduction_spousal_tax") else "")), '11863': markdown_to_plaintext(str(tax_state_ca if defined("tax_state_ca") else "")), '11865': markdown_to_plaintext(str(per_month_checked if defined("per_month_checked") else "")), '11853': markdown_to_plaintext(str(___shortcut_133_false if defined("___shortcut_133_false") else "")), '11888': markdown_to_plaintext(str(___shortcut_492_false if defined("___shortcut_492_false") else "")), '11892': markdown_to_plaintext(str(___shortcut_499_false if defined("___shortcut_499_false") else "")), '11854': markdown_to_plaintext(str(high_school_incomplete if defined("high_school_incomplete") else "")), '11890': markdown_to_plaintext(str(___shortcut_514_false if defined("___shortcut_514_false") else "")), '11870': markdown_to_plaintext(str(income_spousal_support_source if defined("income_spousal_support_source") else ""))}
	fillable_variables = {'topmostSubform[0].Page1[0].P1Caption[0].CourtInfo[0].CrtMailingAdd[0]': markdown_to_plaintext(str(court_street_address if defined("court_street_address") else "")), 'topmostSubform[0].Page1[0].P1Caption[0].AttyInfo[0].Phone[0]': markdown_to_plaintext(str(party_phone if defined("party_phone") else "")), 'topmostSubform[0].Page1[0].P1Caption[0].AttyInfo[0].Zip[0]': markdown_to_plaintext(str(party_zip if defined("party_zip") else "")), 'topmostSubform[0].Page1[0].Employer_tf[0]': markdown_to_plaintext(str(employer_name1 if defined("employer_name1") else "")), 'topmostSubform[0].Page1[0].Employer_address_tf[0]': markdown_to_plaintext(str(employment_address1 if defined("employment_address1") else "")), 'topmostSubform[0].Page1[0].P1Caption[0].CourtInfo[0].CrtStreet[0]': markdown_to_plaintext(str(court_street_address if defined("court_street_address") else "")), 'topmostSubform[0].Page1[0].P1Caption[0].CourtInfo[0].CrtCityZip[0]': markdown_to_plaintext(str(court_city_and_zip_code if defined("court_city_and_zip_code") else "")), 'topmostSubform[0].Page1[0].P1Caption[0].CourtInfo[0].CrtBranch[0]': markdown_to_plaintext(str(court_branch_name if defined("court_branch_name") else "")), 'topmostSubform[0].Page1[0].Employer_phone\.ft[0]': markdown_to_plaintext(str(employment_phone1 if defined("employment_phone1") else "")), 'topmostSubform[0].Page1[0].Party_occupation_tf[0]': markdown_to_plaintext(str(employment_occupation1 if defined("employment_occupation1") else "")), 'topmostSubform[0].Page1[0].hours_tf[0]': markdown_to_plaintext(str(employment_hours1 if defined("employment_hours1") else "")), 'topmostSubform[0].Page1[0].gross_tf[0]': markdown_to_plaintext(str(employment_wage1 if defined("employment_wage1") else "")), 'topmostSubform[0].Page2[0].FillText1[22]': markdown_to_plaintext(str(rental_investment_last_month if defined("rental_investment_last_month") else "")), 'topmostSubform[0].Page2[0].NumericField2[2]': markdown_to_plaintext(str(other_investment_monthly_avg if defined("other_investment_monthly_avg") else "")), 'topmostSubform[0].Page3[0].PxCaption[0].TitlePartyName[0].Party3_ft[0]': markdown_to_plaintext(str(other_claimant_name if defined("other_claimant_name") else "")), 'topmostSubform[0].Page3[0].TextField6[10]': markdown_to_plaintext(str(householdincome1 if defined("householdincome1") else "")), 'topmostSubform[0].Page3[0].TextField6[11]': markdown_to_plaintext(str(householdincome2 if defined("householdincome2") else "")), 'topmostSubform[0].Page3[0].TextField6[13]': markdown_to_plaintext(str(householdincome4 if defined("householdincome4") else "")), 'topmostSubform[0].Page3[0].TextField6[14]': markdown_to_plaintext(str(householdincome5 if defined("householdincome5") else "")), 'topmostSubform[0].Page3[0].TextField6[8]': markdown_to_plaintext(str(householdrelation4 if defined("householdrelation4") else "")), 'topmostSubform[0].Page3[0].TextField6[9]': markdown_to_plaintext(str(householdrelation5 if defined("householdrelation5") else "")), 'topmostSubform[0].Page3[0].EXPN[6]': markdown_to_plaintext(str(expenses_household_supplies if defined("expenses_household_supplies") else "")), 'topmostSubform[0].Page3[0].EXPN[7]': markdown_to_plaintext(str(expenses_eating_out if defined("expenses_eating_out") else "")), 'topmostSubform[0].Page2[0].FillText1[29]': markdown_to_plaintext(str(deduction_child_support if defined("deduction_child_support") else "")), 'topmostSubform[0].Page1[0].P1Caption[0].AttyInfo[0].State[0]': markdown_to_plaintext(str(party_state if defined("party_state") else "")), 'topmostSubform[0].Page3[0].EXPN[9]': markdown_to_plaintext(str(expenses_communication if defined("expenses_communication") else "")), 'topmostSubform[0].Page3[0].EXPN[10]': markdown_to_plaintext(str(expenses_cleaning if defined("expenses_cleaning") else "")), 'topmostSubform[0].Page3[0].EXPN[11]': markdown_to_plaintext(str(expenses_clothes if defined("expenses_clothes") else "")), 'topmostSubform[0].Page3[0].EXPN[12]': markdown_to_plaintext(str(expenses_education if defined("expenses_education") else "")), 'topmostSubform[0].Page3[0].EXPN[13]': markdown_to_plaintext(str(expenses_entertainment if defined("expenses_entertainment") else "")), 'topmostSubform[0].Page3[0].EXPN[14]': markdown_to_plaintext(str(expenses_transport if defined("expenses_transport") else "")), 'topmostSubform[0].Page3[0].EXPN[15]': markdown_to_plaintext(str(expenses_insurance if defined("expenses_insurance") else "")), 'topmostSubform[0].Page3[0].EXPN[16]': markdown_to_plaintext(str(expenses_savings if defined("expenses_savings") else "")), 'topmostSubform[0].Page3[0].EXPN[17]': markdown_to_plaintext(str(expenses_charity if defined("expenses_charity") else "")), 'topmostSubform[0].Page3[0].EXPN[18]': markdown_to_plaintext(str(expenses_debt_total if defined("expenses_debt_total") else "")), 'topmostSubform[0].Page3[0].EXPNother[0]': markdown_to_plaintext(str(expenses_amount_paid_by_others if defined("expenses_amount_paid_by_others") else "")), 'topmostSubform[0].Page2[0].FillText1[23]': markdown_to_plaintext(str(deduction_union if defined("deduction_union") else "")), 'topmostSubform[0].Page2[0].FillText1[31]': markdown_to_plaintext(str(deduction_retirement if defined("deduction_retirement") else "")), 'topmostSubform[0].Page2[0].FillText1[30]': markdown_to_plaintext(str(deduction_health if defined("deduction_health") else "")), 'topmostSubform[0].Page2[0].FillText1[28]': markdown_to_plaintext(str(deduction_partner_support if defined("deduction_partner_support") else "")), 'topmostSubform[0].Page2[0].FillText1[24]': markdown_to_plaintext(str(deduction_job_related if defined("deduction_job_related") else "")), 'topmostSubform[0].Page2[0].NumericField1[0]': markdown_to_plaintext(str(wage_avg_monthly_total if defined("wage_avg_monthly_total") else "")), 'topmostSubform[0].Page2[0].NumericField1[10]': markdown_to_plaintext(str(commission_last_month_total if defined("commission_last_month_total") else "")), 'topmostSubform[0].Page2[0].NumericField1[8]': markdown_to_plaintext(str(income_spousal_support_monthly_avg if defined("income_spousal_support_monthly_avg") else "")), 'topmostSubform[0].Page2[0].NumericField1[7]': markdown_to_plaintext(str(income_partner_support_monthly_avg if defined("income_partner_support_monthly_avg") else "")), 'topmostSubform[0].Page2[0].NumericField1[5]': markdown_to_plaintext(str(income_social_security_monthly_avg if defined("income_social_security_monthly_avg") else "")), 'topmostSubform[0].Page1[0].FillText109[5]': markdown_to_plaintext(str(name_joint_tax_filer if defined("name_joint_tax_filer") else "")), 'topmostSubform[0].Page1[0].FillText109[2]': markdown_to_plaintext(str(license_obtained if defined("license_obtained") else "")), 'topmostSubform[0].Page1[0].FillText109[3]': markdown_to_plaintext(str(training_obtained if defined("training_obtained") else "")), 'topmostSubform[0].Page2[0].NumericField1[2]': markdown_to_plaintext(str(income_workers_comp_monthly_avg if defined("income_workers_comp_monthly_avg") else "")), 'topmostSubform[0].Page2[0].NumericField1[1]': markdown_to_plaintext(str(income_other_monthly_avg if defined("income_other_monthly_avg") else "")), 'topmostSubform[0].Page2[0].NumericField1[4]': markdown_to_plaintext(str(income_disability_monthly_avg if defined("income_disability_monthly_avg") else "")), 'topmostSubform[0].Page2[0].NumericField2[0]': markdown_to_plaintext(str(dividends_monthly_avg if defined("dividends_monthly_avg") else "")), 'topmostSubform[0].Page2[0].FillText1[25]': markdown_to_plaintext(str(asset_investments if defined("asset_investments") else "")), 'topmostSubform[0].Page3[0].EXPN[2]': markdown_to_plaintext(str(expenses_home_insurance if defined("expenses_home_insurance") else "")), 'topmostSubform[0].Page3[0].EXPN[8]': markdown_to_plaintext(str(expenses_utilities if defined("expenses_utilities") else "")), 'topmostSubform[0].Page3[0].EXPN[4]': markdown_to_plaintext(str(expenses_health if defined("expenses_health") else "")), 'topmostSubform[0].Page3[0].TextField6[15]': markdown_to_plaintext(str(debt_creditor1 if defined("debt_creditor1") else "")), 'topmostSubform[0].Page3[0].TextField6[16]': markdown_to_plaintext(str(debt_creditor2 if defined("debt_creditor2") else "")), 'topmostSubform[0].Page3[0].TextField6[17]': markdown_to_plaintext(str(debt_creditor3 if defined("debt_creditor3") else "")), 'topmostSubform[0].Page3[0].TextField6[18]': markdown_to_plaintext(str(debt_creditor4 if defined("debt_creditor4") else "")), 'topmostSubform[0].Page3[0].TextField6[19]': markdown_to_plaintext(str(debt_creditor5 if defined("debt_creditor5") else "")), 'topmostSubform[0].Page3[0].TextField6[20]': markdown_to_plaintext(str(debt_creditor6 if defined("debt_creditor6") else "")), 'topmostSubform[0].Page3[0].TextField6[21]': markdown_to_plaintext(str(debt_type1 if defined("debt_type1") else "")), 'topmostSubform[0].Page3[0].TextField6[22]': markdown_to_plaintext(str(debt_type2 if defined("debt_type2") else "")), 'topmostSubform[0].Page3[0].TextField6[23]': markdown_to_plaintext(str(debt_type3 if defined("debt_type3") else "")), 'topmostSubform[0].Page3[0].TextField6[24]': markdown_to_plaintext(str(debt_type4 if defined("debt_type4") else "")), 'topmostSubform[0].Page3[0].TextField6[25]': markdown_to_plaintext(str(debt_type5 if defined("debt_type5") else "")), 'topmostSubform[0].Page3[0].TextField6[26]': markdown_to_plaintext(str(debt_type6 if defined("debt_type6") else "")), 'topmostSubform[0].Page4[0].NumericField3[0]': markdown_to_plaintext(str(extra_healthcare_months if defined("extra_healthcare_months") else "")), 'topmostSubform[0].Page4[0].NumericField4[0]': markdown_to_plaintext(str(major_loss_months if defined("major_loss_months") else "")), 'topmostSubform[0].Page4[0].NumericField5[0]': markdown_to_plaintext(str(other_relationship_children_months if defined("other_relationship_children_months") else "")), 'topmostSubform[0].Page3[0].TextField6[12]': markdown_to_plaintext(str(householdincome3 if defined("householdincome3") else "")), 'topmostSubform[0].Page1[0].FillText109[4]': markdown_to_plaintext(str(tax_filing_year if defined("tax_filing_year") else "")), 'topmostSubform[0].Page1[0].FillText109[1]': markdown_to_plaintext(str(grad_degrees_obtained if defined("grad_degrees_obtained") else "")), 'topmostSubform[0].Page2[0].NumericField1[9]': markdown_to_plaintext(str(income_public_benefits_monthly_avg if defined("income_public_benefits_monthly_avg") else "")), 'topmostSubform[0].Page2[0].NumericField2[4]': markdown_to_plaintext(str(rental_investment_monthly_avg if defined("rental_investment_monthly_avg") else "")), 'topmostSubform[0].Page2[0].FillText1[26]': markdown_to_plaintext(str(asset_savings if defined("asset_savings") else "")), 'topmostSubform[0].Page3[0].TOTAL[0]': markdown_to_plaintext(str(expenses_grand_total if defined("expenses_grand_total") else "")), 'topmostSubform[0].Page3[0].DateField6[0]': markdown_to_plaintext(str(debt_payment1 if defined("debt_payment1") else "")), 'topmostSubform[0].Page3[0].DateField5[0]': markdown_to_plaintext(str(debt_payment2 if defined("debt_payment2") else "")), 'topmostSubform[0].Page3[0].DateField4[0]': markdown_to_plaintext(str(debt_payment3 if defined("debt_payment3") else "")), 'topmostSubform[0].Page3[0].DateField3[0]': markdown_to_plaintext(str(debt_payment4 if defined("debt_payment4") else "")), 'topmostSubform[0].Page3[0].DateField2[0]': markdown_to_plaintext(str(debt_payment5 if defined("debt_payment5") else "")), 'topmostSubform[0].Page3[0].DateField1[0]': markdown_to_plaintext(str(debt_payment6 if defined("debt_payment6") else "")), 'topmostSubform[0].Page1[0].P1Caption[0].AttyInfo[0].Email[0]': markdown_to_plaintext(str(party_email if defined("party_email") else "")), 'topmostSubform[0].Page1[0].Date_started_job_tf[0]': markdown_to_plaintext(str(employment_start_date1 if defined("employment_start_date1") else "")), 'topmostSubform[0].Page1[0].P1Caption[0].AttyInfo[0].Name[0]': markdown_to_plaintext(str(party_name if defined("party_name") else "")), 'topmostSubform[0].Page1[0].P1Caption[0].AttyInfo[0].Street[0]': markdown_to_plaintext(str(party_street_address if defined("party_street_address") else "")), 'topmostSubform[0].Page1[0].P1Caption[0].AttyInfo[0].City[0]': markdown_to_plaintext(str(party_city if defined("party_city") else "")), 'topmostSubform[0].Page2[0].FillText1[27]': markdown_to_plaintext(str(deduction_spousal_support if defined("deduction_spousal_support") else "")), 'topmostSubform[0].Page2[0].NumericField2[1]': markdown_to_plaintext(str(business_year if defined("business_year") else "")), 'topmostSubform[0].Page3[0].MortPrin[0]': markdown_to_plaintext(str(expenses_mortgage_principle if defined("expenses_mortgage_principle") else "")), 'topmostSubform[0].Page3[0].MortInt[0]': markdown_to_plaintext(str(expenses_mortgage_interest if defined("expenses_mortgage_interest") else "")), 'topmostSubform[0].Page2[0].NumericField1[11]': markdown_to_plaintext(str(overtime_avg_monthly_total if defined("overtime_avg_monthly_total") else "")), 'topmostSubform[0].Page2[0].NumericField1[6]': markdown_to_plaintext(str(income_pension_retirement_monthly_avg if defined("income_pension_retirement_monthly_avg") else "")), 'topmostSubform[0].Page2[0].NumericField1[3]': markdown_to_plaintext(str(income_unemployment_comp_monthly_avg if defined("income_unemployment_comp_monthly_avg") else "")), 'topmostSubform[0].Page2[0].NumericField2[3]': markdown_to_plaintext(str(trust_monthly_avg if defined("trust_monthly_avg") else "")), 'topmostSubform[0].Page3[0].EXPN[1]': markdown_to_plaintext(str(expenses_property_taxes if defined("expenses_property_taxes") else "")), 'topmostSubform[0].Page3[0].EXPN[5]': markdown_to_plaintext(str(expenses_childcare_total if defined("expenses_childcare_total") else "")), 'topmostSubform[0].Page3[0].EXPN[3]': markdown_to_plaintext(str(expenses_home_repairs if defined("expenses_home_repairs") else "")), 'topmostSubform[0].Page3[0].EXPN[0]': markdown_to_plaintext(str(home_expenses if defined("home_expenses") else "")), 'topmostSubform[0].Page1[0].FillText109[6]': markdown_to_plaintext(str(tax_state if defined("tax_state") else ""))}
	post_data = { 'template_id': template_id, 'access_key': access_key, 'drawn_target_variables': drawn_variables, 'fillable_target_variables': fillable_variables }
	fill_response = requests.post('https://community.lawyer/fill', json=post_data).json()
	task_id = fill_response.get('task_id')
	filled_attachment_url = ""
	done = False
	pdf_attempts = 0
	while not done and pdf_attempts < 250:
		task_response = requests.get('https://community.lawyer/tasks?task_id={0}&access_key={1}'.format(task_id, access_key)).json()
		done = task_response.get('status') == 'done'
		filled_attachment_url = task_response.get('document')
		pdf_attempts += 1
		time.sleep(.2)
	FL_150_73c36ecae5e3 = DAFileCollection()
	FL_150_73c36ecae5e3.pdf = DAFile()
	FL_150_73c36ecae5e3.pdf.initialize(extension="pdf")
	if done:
		FL_150_73c36ecae5e3.pdf.from_url(filled_attachment_url)
		FL_150_73c36ecae5e3.info = {'name': 'FL-150', 'filename': 'FL_150', 'description': ''}
	else:
		FL_150_73c36ecae5e3.pdf.from_url('https://community.lawyer/static/blank.pdf')
		FL_150_73c36ecae5e3.info = {'name': 'We encountered a problem', 'filename': 'FL_150', 'description': 'There was a problem filling your Pdf - please try again'}
	define("___FL_150", FL_150_73c36ecae5e3.pdf)
	background_action('___send_answers_background')
---
attachment:
  name: Addendum to Income and Expense Declaration
  filename: Addendum to Income and Expense Declaration
  variable name: Addendum_to_Income_and_Expense_Declaration_template_a60feaed58e5
  valid formats:
    - pdf
    - docx
  content: |
    # **Addendum to Income and Expense Declaration**
		Where no information is contained under the question headers below, the full content of the response will be found in the FL-150 form itself (if applicable).



		_Question 1--Other Jobs_


		${insert_question1otherjobs_employment2_paragraph if defined("insert_question1otherjobs_employment2_paragraph") else ""}

		${insert_question1otherjobs_employment3_paragraph if defined("insert_question1otherjobs_employment3_paragraph") else ""}




		_Question 4--Other party's income_


		${addendum_other_party_income_is_based_on if defined("addendum_other_party_income_is_based_on") else ""}




		_Question 8--Additional Income_


		${addendum_source_of_other_income if defined("addendum_source_of_other_income") else ""}




		_Question 9--Change in income_


		${addendum_income_change_description if defined("addendum_income_change_description") else ""}




		_Question 10g--Necessary job-related expenses not reimbursed by employer_


		${insert_deduction_job_related_addendum_paragraph1 if defined("insert_deduction_job_related_addendum_paragraph1") else ""}

		${insert_deduction_job_related_addendum_paragraph2 if defined("insert_deduction_job_related_addendum_paragraph2") else ""}

		${insert_deduction_job_related_addendum_paragraph3 if defined("insert_deduction_job_related_addendum_paragraph3") else ""}




		_Question 12--The following people live with me_


		${insert_question12_person6_paragraph if defined("insert_question12_person6_paragraph") else ""}

		${insert_question12_person7_paragraph if defined("insert_question12_person7_paragraph") else ""}

		${insert_question12_person8_paragraph if defined("insert_question12_person8_paragraph") else ""}




		_Question 14--Installment payments and debts not listed above_


		${insert_question14_debt7_paragraph if defined("insert_question14_debt7_paragraph") else ""}

		${insert_question14_debt8_paragraph if defined("insert_question14_debt8_paragraph") else ""}




		_Question 19--Special hardships_


		Names and ages of those children: ${addendum_other_relationship_children_name_and_ages if defined("addendum_other_relationship_children_name_and_ages") else ""}


		The expenses listed in a, b, and c create an extreme hardship because: ${addendum_special_hardship_explanation if defined("addendum_special_hardship_explanation") else ""}




		_Question 20--Other information I want the court to know concerning support in my case_


		${addendum_additional_information_about_support if defined("addendum_additional_information_about_support") else ""}


		THIS IS THE END OF THE ADDENDUM
---
mandatory: |
	True
question: ''
subquestion: |
	Thank you for using this app. Your session is complete.

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
template: incomplete_email
subject: |
  FL-150: Documents Required
content: |
  Thank you for the JCC's Financial Disclosure Toolkit to assist with your forms. We have used your responses to fill the FL-150 Income and Expenses Declaration. 

  Right now your form is not complete, but we have provided a list of the remaining information you need. 

  To download your incomplete form go here: 

  ${fl150_with_attachments.url_for(temporary=True, seconds=60 * 60 * 24 * 10)}

  Here's the other information you may need to complete your form:

  % for proof in missing_files:
  ${proof}

  % endfor

  Once you complete the form, file it with your Court clerk. 

  If you have any questions or feedback send an email to jack.madans-t@jud.ca.gov
---
code: |
  all_files = [
    FL_150_73c36ecae5e3,
    Addendum_to_Income_and_Expense_Declaration_template_a60feaed58e5
  ]
  proofs = [
    "tax_return_proof",
    "past_employment_pay_stubs",
    "current_employer_pay_stubs1",
    "employer_pay_stubs2",
    "employer_pay_stubs3",
    "dividend_investment_proof",
    "rental_investment_proof",
    "trust_investment_proof",
    "other_investment_proof",
    "additional_income_proof",
    "business_income_proof",
    "business_income_proof2",
    "business_income_proof3",
    "extra_healthcare_proof",
    "major_loss_proof",
    "other_relationship_children_hardship_proof"
  ]
  missing_files = []
	all_vars = all_variables()
  for proof_name in proofs:
		proof_obj = all_vars.get(proof_name)
    if proof_obj is not None:
			if proof_obj != "None":
				all_files.append(value(proof_name))
			else:
				proof_title = proof_name.replace('_proof', '').replace('_', ' ').strip().title()
				missing_files.append(proof_title)

  fl150_with_attachments = pdf_concatenate(*all_files)
---
template: complete_email
subject: |
  FL-150: Completed Form
content: |
  Thank you for the JCC's Financial Disclosure Toolkit to assist with your forms. We have used your responses to fill the FL-150 Income and Expenses Declaration. 

  Right now your form is complete. To download your form go here:

  ${fl150_with_attachments.url_for(temporary=True, seconds=60 * 60 * 24 * 10)}

  Print your form and file it with your Court clerk, if you are ready.

  If you have any questions or feedback send an email to jack.madans-t@jud.ca.gov
